//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		localhost:3333/msrfmea_2_2_0.ml.xsd
package go_Msrfmea220Ml

import (
	xml "github.com/metaleap/go-xsd-pkg/www.w3.org/2001/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

var XsdGoPkgNotations = new(xsdt.Notations)

func init() {
	XsdGoPkgNotations.Add("", "BMP", "-//ISBN 0-7923-9432-1::Graphic Notation//NOTATION Microsoft Windows Bitmap//EN", "")
	XsdGoPkgNotations.Add("", "CGMBIN", "-//ISO 8632/3//NOTATION Binary encoding//EN", "")
	XsdGoPkgNotations.Add("", "EPS", "+//ISBN 0-7923-9432-1::Graphic Notation//NOTATION Adobe Systems Encapulated PostScript//EN", "")
	XsdGoPkgNotations.Add("", "GIF", "+//ISBN 0-7923-9432-1::Graphic Notation//NOTATION CompuServe Graphic Interchange Format//EN", "")
	XsdGoPkgNotations.Add("", "HTML", "-//W3C//NOTATION HTML 4.0//EN", "")
	XsdGoPkgNotations.Add("", "JPEG", "-//ISO/IEC 10918:1993//NOTATION Digital Compression and Coding of Continuous-tone Still Images (JPEG)//EN", "")
	XsdGoPkgNotations.Add("", "PCX", "+//ISBN 0-7923-9432-1::Graphic Notation//NOTATION ZSoft PCX bitmap//EN", "")
	XsdGoPkgNotations.Add("", "PDF", "-//Adobe Systems//NOTATION Portable Document Format//EN", "")
	XsdGoPkgNotations.Add("", "PS", "-//ISBN 0--201--18127--4::Adobe//NOTATION PostScript//EN", "")
	XsdGoPkgNotations.Add("", "SGML", "+//ISO 8879:1986//NOTATION Standard Generalized Markup Language//EN", "")
	XsdGoPkgNotations.Add("", "TEX", "+//ISBN 0-201-13448-9::Knuth//NOTATION The TeXbook//EN", "")
	XsdGoPkgNotations.Add("", "TIFF", "+//ISBN 0-7923-9432-1::Graphic Notation//NOTATION Aldus/Microsoft Tagged Interchange File Format//EN", "")
	XsdGoPkgNotations.Add("", "WMF", "+//ISBN 0-7923-9432-1::Graphic Notation//NOTATION Microsoft Windows Metafile//EN", "")
}

type XsdGoPkgHasAttr_Si_XsdtAnySimpleType_ struct {
	Si xsdt.AnySimpleType `xml:"SI,attr"`
}

type XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_ struct {
	Syscond xsdt.AnySimpleType `xml:"SYSCOND,attr"`
}

type XsdGoPkgHasAttr_View_XsdtAnySimpleType_ struct {
	View xsdt.AnySimpleType `xml:"VIEW,attr"`
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_S_XsdtAnySimpleType_ struct {
	S xsdt.AnySimpleType `xml:"S,attr"`
}

type XsdGoPkgHasAttr_T_XsdtAnySimpleType_ struct {
	T xsdt.AnySimpleType `xml:"T,attr"`
}

type TxsdSub struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSub function is not nil (ie. was set by outside code), calls it with this TxsdSub instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSub instance.
func (me *TxsdSub) Walk() (err error) {
	if fn := WalkHandlers.TxsdSub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sub struct {
	Subs []*TxsdSub `xml:"SUB"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sub instance.
func (me *XsdGoPkgHasElems_Sub) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Type_XsdtAnySimpleType_ struct {
	Type xsdt.AnySimpleType `xml:"TYPE,attr"`
}

type XsdGoPkgHasElems_Sup struct {
	Sups []*TxsdSub `xml:"SUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sup instance.
func (me *XsdGoPkgHasElems_Sup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIe struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Sup

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Type_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_Sub

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdIe function is not nil (ie. was set by outside code), calls it with this TxsdIe instance as the single argument. Then calls the Walk() method on 3/9 embed(s) and 0/0 field(s) belonging to this TxsdIe instance.
func (me *TxsdIe) Walk() (err error) {
	if fn := WalkHandlers.TxsdIe; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Ie struct {
	Ies []*TxsdIe `xml:"IE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ie instance.
func (me *XsdGoPkgHasElems_Ie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_L_XsdtAnySimpleType_ struct {
	L xsdt.AnySimpleType `xml:"L,attr"`
}

type TxsdTtType xsdt.Nmtoken

//	Since TxsdTtType is just a simple String type, this merely returns the current string value.
func (me TxsdTtType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTtType's alias type xsdt.Nmtoken.
func (me TxsdTtType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdTtType is "SGML-ATTRIBUTE".
func (me TxsdTtType) IsSgmlAttribute() bool { return me.String() == "SGML-ATTRIBUTE" }

//	Returns true if the value of this enumerated TxsdTtType is "CONTROL-ELEMENT".
func (me TxsdTtType) IsControlElement() bool { return me.String() == "CONTROL-ELEMENT" }

//	Returns true if the value of this enumerated TxsdTtType is "CODE".
func (me TxsdTtType) IsCode() bool { return me.String() == "CODE" }

//	Returns true if the value of this enumerated TxsdTtType is "TOOL".
func (me TxsdTtType) IsTool() bool { return me.String() == "TOOL" }

//	Returns true if the value of this enumerated TxsdTtType is "OTHER".
func (me TxsdTtType) IsOther() bool { return me.String() == "OTHER" }

//	Returns true if the value of this enumerated TxsdTtType is "ORGANISATION".
func (me TxsdTtType) IsOrganisation() bool { return me.String() == "ORGANISATION" }

//	Returns true if the value of this enumerated TxsdTtType is "STATE".
func (me TxsdTtType) IsState() bool { return me.String() == "STATE" }

//	Returns true if the value of this enumerated TxsdTtType is "VARIABLE".
func (me TxsdTtType) IsVariable() bool { return me.String() == "VARIABLE" }

//	Returns true if the value of this enumerated TxsdTtType is "PRM".
func (me TxsdTtType) IsPrm() bool { return me.String() == "PRM" }

//	Since TxsdTtType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTtType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdTtType is "MATERIAL".
func (me TxsdTtType) IsMaterial() bool { return me.String() == "MATERIAL" }

//	Returns true if the value of this enumerated TxsdTtType is "PRODUCT".
func (me TxsdTtType) IsProduct() bool { return me.String() == "PRODUCT" }

//	Returns true if the value of this enumerated TxsdTtType is "SGMLTAG".
func (me TxsdTtType) IsSgmltag() bool { return me.String() == "SGMLTAG" }

type XsdGoPkgHasAttr_Type_TxsdTtType_ struct {
	Type TxsdTtType `xml:"TYPE,attr"`
}

type XsdGoPkgHasAttr_UserDefinedType_XsdtAnySimpleType_ struct {
	UserDefinedType xsdt.AnySimpleType `xml:"USER-DEFINED-TYPE,attr"`
}

type TxsdTt struct {
	XsdGoPkgHasAttr_Type_TxsdTtType_

	XsdGoPkgHasAttr_UserDefinedType_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTt function is not nil (ie. was set by outside code), calls it with this TxsdTt instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdTt instance.
func (me *TxsdTt) Walk() (err error) {
	if fn := WalkHandlers.TxsdTt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tt struct {
	Tts []*TxsdTt `xml:"TT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tt instance.
func (me *XsdGoPkgHasElems_Tt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEType xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdEType is "BOLD".
func (me TxsdEType) IsBold() bool { return me.String() == "BOLD" }

//	Since TxsdEType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdEType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdEType is just a simple String type, this merely returns the current string value.
func (me TxsdEType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdEType's alias type xsdt.Nmtoken.
func (me TxsdEType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdEType is "ITALIC".
func (me TxsdEType) IsItalic() bool { return me.String() == "ITALIC" }

//	Returns true if the value of this enumerated TxsdEType is "PLAIN".
func (me TxsdEType) IsPlain() bool { return me.String() == "PLAIN" }

//	Returns true if the value of this enumerated TxsdEType is "BOLDITALIC".
func (me TxsdEType) IsBolditalic() bool { return me.String() == "BOLDITALIC" }

type XsdGoPkgHasAttr_Type_TxsdEType_Bold struct {
	Type TxsdEType `xml:"TYPE,attr"`
}

//	Returns the default value for Type -- "BOLD"
func (me XsdGoPkgHasAttr_Type_TxsdEType_Bold) TypeDefault() TxsdEType { return TxsdEType("BOLD") }

type XsdGoPkgHasAttr_Color_XsdtAnySimpleType_ struct {
	Color xsdt.AnySimpleType `xml:"COLOR,attr"`
}

type TxsdEFont xsdt.Nmtoken

//	Since TxsdEFont is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdEFont) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdEFont is just a simple String type, this merely returns the current string value.
func (me TxsdEFont) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdEFont's alias type xsdt.Nmtoken.
func (me TxsdEFont) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdEFont is "DEFAULT".
func (me TxsdEFont) IsDefault() bool { return me.String() == "DEFAULT" }

//	Returns true if the value of this enumerated TxsdEFont is "MONO".
func (me TxsdEFont) IsMono() bool { return me.String() == "MONO" }

type XsdGoPkgHasAttr_Font_TxsdEFont_ struct {
	Font TxsdEFont `xml:"FONT,attr"`
}

type TxsdE struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Type_TxsdEType_Bold

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Color_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Font_TxsdEFont_
}

//	If the WalkHandlers.TxsdE function is not nil (ie. was set by outside code), calls it with this TxsdE instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TxsdE instance.
func (me *TxsdE) Walk() (err error) {
	if fn := WalkHandlers.TxsdE; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_E struct {
	Es []*TxsdE `xml:"E"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_E function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_E instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_E instance.
func (me *XsdGoPkgHasElems_E) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_E; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Es {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdL4 struct {
	XsdGoPkgHasElems_E

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_L_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Tt

	XsdGoPkgHasElems_Sup

	XsdGoPkgHasElems_Sub

	XsdGoPkgHasElems_Ie

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdL4 function is not nil (ie. was set by outside code), calls it with this TxsdL4 instance as the single argument. Then calls the Walk() method on 6/12 embed(s) and 0/0 field(s) belonging to this TxsdL4 instance.
func (me *TxsdL4) Walk() (err error) {
	if fn := WalkHandlers.TxsdL4; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_L4 struct {
	L4s []*TxsdL4 `xml:"L-4"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_L4 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_L4 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_L4 instance.
func (me *XsdGoPkgHasElems_L4) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_L4; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.L4s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLongName struct {
	XsdGoPkgHasElems_L4

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdLongName function is not nil (ie. was set by outside code), calls it with this TxsdLongName instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdLongName instance.
func (me *TxsdLongName) Walk() (err error) {
	if fn := WalkHandlers.TxsdLongName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L4.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LongName struct {
	LongName *TxsdLongName `xml:"LONG-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LongName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LongName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LongName instance.
func (me *XsdGoPkgHasElem_LongName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LongName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShortName struct {
	ShortName *TxsdSub `xml:"SHORT-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShortName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShortName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShortName instance.
func (me *XsdGoPkgHasElem_ShortName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShortName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink struct {
	Hytime xsdt.Nmtoken `xml:"HYTIME,attr"`
}

//	Returns the fixed value for Hytime -- "CLINK"
func (me XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink) HytimeFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("CLINK")
}

type XsdGoPkgHasAttr_IdRef_XsdtIdref_ struct {
	IdRef xsdt.Idref `xml:"ID-REF,attr"`
}

type XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef struct {
	Hynames xsdt.Nmtokens `xml:"HYNAMES,attr"`
}

//	Returns the fixed value for Hynames -- "LINKEND ID-REF"
func (me XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef) HynamesFixed() xsdt.Nmtokens {
	return xsdt.Nmtokens("LINKEND ID-REF")
}

type TxsdFmXrefIdClass xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-VARIANT".
func (me TxsdFmXrefIdClass) IsFmVariant() bool { return me.String() == "FM-VARIANT" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-FORM-SHEET".
func (me TxsdFmXrefIdClass) IsFmFormSheet() bool { return me.String() == "FM-FORM-SHEET" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-PALETTE".
func (me TxsdFmXrefIdClass) IsFmPalette() bool { return me.String() == "FM-PALETTE" }

//	This convenience method just performs a simple type conversion to TxsdFmXrefIdClass's alias type xsdt.Nmtoken.
func (me TxsdFmXrefIdClass) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-FUNCTION".
func (me TxsdFmXrefIdClass) IsFmFunction() bool { return me.String() == "FM-FUNCTION" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-STRUCTURE".
func (me TxsdFmXrefIdClass) IsFmStructure() bool { return me.String() == "FM-STRUCTURE" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-FAULT".
func (me TxsdFmXrefIdClass) IsFmFault() bool { return me.String() == "FM-FAULT" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "SW-USER-ACCESS-CASE".
func (me TxsdFmXrefIdClass) IsSwUserAccessCase() bool { return me.String() == "SW-USER-ACCESS-CASE" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "EXTERNAL".
func (me TxsdFmXrefIdClass) IsExternal() bool { return me.String() == "EXTERNAL" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-FAULT-TYPE".
func (me TxsdFmXrefIdClass) IsFmFaultType() bool { return me.String() == "FM-FAULT-TYPE" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-TOOL".
func (me TxsdFmXrefIdClass) IsFmTool() bool { return me.String() == "FM-TOOL" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-ACTION".
func (me TxsdFmXrefIdClass) IsFmAction() bool { return me.String() == "FM-ACTION" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-CONTROL-PLAN".
func (me TxsdFmXrefIdClass) IsFmControlPlan() bool { return me.String() == "FM-CONTROL-PLAN" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-USER-GROUP".
func (me TxsdFmXrefIdClass) IsFmUserGroup() bool { return me.String() == "FM-USER-GROUP" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-TEAM".
func (me TxsdFmXrefIdClass) IsFmTeam() bool { return me.String() == "FM-TEAM" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-PROJECT".
func (me TxsdFmXrefIdClass) IsFmProject() bool { return me.String() == "FM-PROJECT" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-ACTION-TYPE".
func (me TxsdFmXrefIdClass) IsFmActionType() bool { return me.String() == "FM-ACTION-TYPE" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-STRUCTURE-ELEMENT".
func (me TxsdFmXrefIdClass) IsFmStructureElement() bool { return me.String() == "FM-STRUCTURE-ELEMENT" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-FORM-SHEET-PRESENTATION-VERSION".
func (me TxsdFmXrefIdClass) IsFmFormSheetPresentationVersion() bool {
	return me.String() == "FM-FORM-SHEET-PRESENTATION-VERSION"
}

//	Since TxsdFmXrefIdClass is just a simple String type, this merely returns the current string value.
func (me TxsdFmXrefIdClass) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-CHARACTERISTIC".
func (me TxsdFmXrefIdClass) IsFmCharacteristic() bool { return me.String() == "FM-CHARACTERISTIC" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-ASSESSMENT-CATALOG".
func (me TxsdFmXrefIdClass) IsFmAssessmentCatalog() bool {
	return me.String() == "FM-ASSESSMENT-CATALOG"
}

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-PART-LIST-ENTRY".
func (me TxsdFmXrefIdClass) IsFmPartListEntry() bool { return me.String() == "FM-PART-LIST-ENTRY" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-PROCESS-DIAGRAM".
func (me TxsdFmXrefIdClass) IsFmProcessDiagram() bool { return me.String() == "FM-PROCESS-DIAGRAM" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-COLLECTION".
func (me TxsdFmXrefIdClass) IsFmCollection() bool { return me.String() == "FM-COLLECTION" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-TASK-SET".
func (me TxsdFmXrefIdClass) IsFmTaskSet() bool { return me.String() == "FM-TASK-SET" }

//	Since TxsdFmXrefIdClass is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFmXrefIdClass) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-TASK-SETS".
func (me TxsdFmXrefIdClass) IsFmTaskSets() bool { return me.String() == "FM-TASK-SETS" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-PALETTE-ROW".
func (me TxsdFmXrefIdClass) IsFmPaletteRow() bool { return me.String() == "FM-PALETTE-ROW" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-PALETTE-COLUMN".
func (me TxsdFmXrefIdClass) IsFmPaletteColumn() bool { return me.String() == "FM-PALETTE-COLUMN" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-FUNCTION-TYPE".
func (me TxsdFmXrefIdClass) IsFmFunctionType() bool { return me.String() == "FM-FUNCTION-TYPE" }

//	Returns true if the value of this enumerated TxsdFmXrefIdClass is "FM-CHARACTERISTIC-TYPE".
func (me TxsdFmXrefIdClass) IsFmCharacteristicType() bool {
	return me.String() == "FM-CHARACTERISTIC-TYPE"
}

type XsdGoPkgHasAttr_IdClass_TxsdFmXrefIdClass_ struct {
	IdClass TxsdFmXrefIdClass `xml:"ID-CLASS,attr"`
}

type TxsdFmXref struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_IdClass_TxsdFmXrefIdClass_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmXref function is not nil (ie. was set by outside code), calls it with this TxsdFmXref instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmXref instance.
func (me *TxsdFmXref) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmXref struct {
	FmXrefs []*TxsdFmXref `xml:"FM-XREF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmXref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmXref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmXref instance.
func (me *XsdGoPkgHasElems_FmXref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmXrefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCollectionConts struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmXref

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCollectionConts function is not nil (ie. was set by outside code), calls it with this TxsdFmCollectionConts instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmCollectionConts instance.
func (me *TxsdFmCollectionConts) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCollectionConts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCollectionConts struct {
	FmCollectionConts *TxsdFmCollectionConts `xml:"FM-COLLECTION-CONTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCollectionConts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCollectionConts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCollectionConts instance.
func (me *XsdGoPkgHasElem_FmCollectionConts) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCollectionConts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCollectionConts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdXrefShowContent xsdt.Nmtoken

//	Since TxsdXrefShowContent is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowContent) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdXrefShowContent is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowContent) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowContent's alias type xsdt.Nmtoken.
func (me TxsdXrefShowContent) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowContent is "SHOW-CONTENT".
func (me TxsdXrefShowContent) IsShowContent() bool { return me.String() == "SHOW-CONTENT" }

//	Returns true if the value of this enumerated TxsdXrefShowContent is "NO-SHOW-CONTENT".
func (me TxsdXrefShowContent) IsNoShowContent() bool { return me.String() == "NO-SHOW-CONTENT" }

type XsdGoPkgHasAttr_ShowContent_TxsdXrefShowContent_NoShowContent struct {
	ShowContent TxsdXrefShowContent `xml:"SHOW-CONTENT,attr"`
}

//	Returns the default value for ShowContent -- "NO-SHOW-CONTENT"
func (me XsdGoPkgHasAttr_ShowContent_TxsdXrefShowContent_NoShowContent) ShowContentDefault() TxsdXrefShowContent {
	return TxsdXrefShowContent("NO-SHOW-CONTENT")
}

type TxsdXrefShowSee xsdt.Nmtoken

//	Since TxsdXrefShowSee is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowSee) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowSee's alias type xsdt.Nmtoken.
func (me TxsdXrefShowSee) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowSee is "NO-SHOW-SEE".
func (me TxsdXrefShowSee) IsNoShowSee() bool { return me.String() == "NO-SHOW-SEE" }

//	Returns true if the value of this enumerated TxsdXrefShowSee is "SHOW-SEE".
func (me TxsdXrefShowSee) IsShowSee() bool { return me.String() == "SHOW-SEE" }

//	Since TxsdXrefShowSee is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowSee) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_ShowSee_TxsdXrefShowSee_NoShowSee struct {
	ShowSee TxsdXrefShowSee `xml:"SHOW-SEE,attr"`
}

//	Returns the default value for ShowSee -- "NO-SHOW-SEE"
func (me XsdGoPkgHasAttr_ShowSee_TxsdXrefShowSee_NoShowSee) ShowSeeDefault() TxsdXrefShowSee {
	return TxsdXrefShowSee("NO-SHOW-SEE")
}

type TxsdXrefShowResourceNumber xsdt.Nmtoken

//	Since TxsdXrefShowResourceNumber is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowResourceNumber) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdXrefShowResourceNumber is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowResourceNumber) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowResourceNumber's alias type xsdt.Nmtoken.
func (me TxsdXrefShowResourceNumber) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowResourceNumber is "NO-SHOW-NUMBER".
func (me TxsdXrefShowResourceNumber) IsNoShowNumber() bool { return me.String() == "NO-SHOW-NUMBER" }

//	Returns true if the value of this enumerated TxsdXrefShowResourceNumber is "SHOW-NUMBER".
func (me TxsdXrefShowResourceNumber) IsShowNumber() bool { return me.String() == "SHOW-NUMBER" }

type XsdGoPkgHasAttr_ShowResourceNumber_TxsdXrefShowResourceNumber_ShowNumber struct {
	ShowResourceNumber TxsdXrefShowResourceNumber `xml:"SHOW-RESOURCE-NUMBER,attr"`
}

//	Returns the default value for ShowResourceNumber -- "SHOW-NUMBER"
func (me XsdGoPkgHasAttr_ShowResourceNumber_TxsdXrefShowResourceNumber_ShowNumber) ShowResourceNumberDefault() TxsdXrefShowResourceNumber {
	return TxsdXrefShowResourceNumber("SHOW-NUMBER")
}

type TxsdXrefShowResourceShortName xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdXrefShowResourceShortName is "SHOW-SHORT-NAME".
func (me TxsdXrefShowResourceShortName) IsShowShortName() bool {
	return me.String() == "SHOW-SHORT-NAME"
}

//	Since TxsdXrefShowResourceShortName is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowResourceShortName) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdXrefShowResourceShortName is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowResourceShortName) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowResourceShortName's alias type xsdt.Nmtoken.
func (me TxsdXrefShowResourceShortName) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowResourceShortName is "NO-SHOW-SHORT-NAME".
func (me TxsdXrefShowResourceShortName) IsNoShowShortName() bool {
	return me.String() == "NO-SHOW-SHORT-NAME"
}

type XsdGoPkgHasAttr_ShowResourceShortName_TxsdXrefShowResourceShortName_ShowShortName struct {
	ShowResourceShortName TxsdXrefShowResourceShortName `xml:"SHOW-RESOURCE-SHORT-NAME,attr"`
}

//	Returns the default value for ShowResourceShortName -- "SHOW-SHORT-NAME"
func (me XsdGoPkgHasAttr_ShowResourceShortName_TxsdXrefShowResourceShortName_ShowShortName) ShowResourceShortNameDefault() TxsdXrefShowResourceShortName {
	return TxsdXrefShowResourceShortName("SHOW-SHORT-NAME")
}

type TxsdXrefShowResourcePage xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdXrefShowResourcePage is "SHOW-PAGE".
func (me TxsdXrefShowResourcePage) IsShowPage() bool { return me.String() == "SHOW-PAGE" }

//	Since TxsdXrefShowResourcePage is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowResourcePage) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdXrefShowResourcePage is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowResourcePage) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowResourcePage's alias type xsdt.Nmtoken.
func (me TxsdXrefShowResourcePage) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowResourcePage is "NO-SHOW-PAGE".
func (me TxsdXrefShowResourcePage) IsNoShowPage() bool { return me.String() == "NO-SHOW-PAGE" }

type XsdGoPkgHasAttr_ShowResourcePage_TxsdXrefShowResourcePage_ShowPage struct {
	ShowResourcePage TxsdXrefShowResourcePage `xml:"SHOW-RESOURCE-PAGE,attr"`
}

//	Returns the default value for ShowResourcePage -- "SHOW-PAGE"
func (me XsdGoPkgHasAttr_ShowResourcePage_TxsdXrefShowResourcePage_ShowPage) ShowResourcePageDefault() TxsdXrefShowResourcePage {
	return TxsdXrefShowResourcePage("SHOW-PAGE")
}

type XsdGoPkgHasAttr_IdClass_XsdtNmtoken_ struct {
	IdClass xsdt.Nmtoken `xml:"ID-CLASS,attr"`
}

type XsdGoPkgHasAttr_ExtIdClass_XsdtAnySimpleType_ struct {
	ExtIdClass xsdt.AnySimpleType `xml:"EXT-ID-CLASS,attr"`
}

type TxsdXrefShowResourceType xsdt.Nmtoken

//	Since TxsdXrefShowResourceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowResourceType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdXrefShowResourceType is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowResourceType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowResourceType's alias type xsdt.Nmtoken.
func (me TxsdXrefShowResourceType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowResourceType is "NO-SHOW-TYPE".
func (me TxsdXrefShowResourceType) IsNoShowType() bool { return me.String() == "NO-SHOW-TYPE" }

//	Returns true if the value of this enumerated TxsdXrefShowResourceType is "SHOW-TYPE".
func (me TxsdXrefShowResourceType) IsShowType() bool { return me.String() == "SHOW-TYPE" }

type XsdGoPkgHasAttr_ShowResourceType_TxsdXrefShowResourceType_ShowType struct {
	ShowResourceType TxsdXrefShowResourceType `xml:"SHOW-RESOURCE-TYPE,attr"`
}

//	Returns the default value for ShowResourceType -- "SHOW-TYPE"
func (me XsdGoPkgHasAttr_ShowResourceType_TxsdXrefShowResourceType_ShowType) ShowResourceTypeDefault() TxsdXrefShowResourceType {
	return TxsdXrefShowResourceType("SHOW-TYPE")
}

type TxsdXrefShowResourceLongName xsdt.Nmtoken

//	Since TxsdXrefShowResourceLongName is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdXrefShowResourceLongName) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdXrefShowResourceLongName is just a simple String type, this merely returns the current string value.
func (me TxsdXrefShowResourceLongName) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdXrefShowResourceLongName's alias type xsdt.Nmtoken.
func (me TxsdXrefShowResourceLongName) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdXrefShowResourceLongName is "NO-SHOW-LONG-NAME".
func (me TxsdXrefShowResourceLongName) IsNoShowLongName() bool {
	return me.String() == "NO-SHOW-LONG-NAME"
}

//	Returns true if the value of this enumerated TxsdXrefShowResourceLongName is "SHOW-LONG-NAME".
func (me TxsdXrefShowResourceLongName) IsShowLongName() bool { return me.String() == "SHOW-LONG-NAME" }

type XsdGoPkgHasAttr_ShowResourceLongName_TxsdXrefShowResourceLongName_ShowLongName struct {
	ShowResourceLongName TxsdXrefShowResourceLongName `xml:"SHOW-RESOURCE-LONG-NAME,attr"`
}

//	Returns the default value for ShowResourceLongName -- "SHOW-LONG-NAME"
func (me XsdGoPkgHasAttr_ShowResourceLongName_TxsdXrefShowResourceLongName_ShowLongName) ShowResourceLongNameDefault() TxsdXrefShowResourceLongName {
	return TxsdXrefShowResourceLongName("SHOW-LONG-NAME")
}

type TxsdXref struct {
	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_ShowContent_TxsdXrefShowContent_NoShowContent

	XsdGoPkgHasAttr_ShowSee_TxsdXrefShowSee_NoShowSee

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_ShowResourceNumber_TxsdXrefShowResourceNumber_ShowNumber

	XsdGoPkgHasAttr_ShowResourceShortName_TxsdXrefShowResourceShortName_ShowShortName

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_ShowResourcePage_TxsdXrefShowResourcePage_ShowPage

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdClass_XsdtNmtoken_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_ExtIdClass_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_ShowResourceType_TxsdXrefShowResourceType_ShowType

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_ShowResourceLongName_TxsdXrefShowResourceLongName_ShowLongName
}

//	If the WalkHandlers.TxsdXref function is not nil (ie. was set by outside code), calls it with this TxsdXref instance as the single argument. Then calls the Walk() method on 1/18 embed(s) and 0/0 field(s) belonging to this TxsdXref instance.
func (me *TxsdXref) Walk() (err error) {
	if fn := WalkHandlers.TxsdXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Xref struct {
	Xrefs []*TxsdXref `xml:"XREF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Xref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Xref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Xref instance.
func (me *XsdGoPkgHasElems_Xref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Xref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Xrefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Notation struct {
	Notation *TxsdSub `xml:"NOTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Notation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Notation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Notation instance.
func (me *XsdGoPkgHasElem_Notation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Notation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Notation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tool struct {
	Tool *TxsdSub `xml:"TOOL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tool function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tool instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tool instance.
func (me *XsdGoPkgHasElem_Tool) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tool; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tool.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ToolVersion struct {
	ToolVersion *TxsdSub `xml:"TOOL-VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ToolVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ToolVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ToolVersion instance.
func (me *XsdGoPkgHasElem_ToolVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ToolVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ToolVersion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLongName1 struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Tt

	XsdGoPkgHasElems_Sub

	XsdGoPkgHasElems_Ie

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_E

	XsdGoPkgHasElems_Sup

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdLongName1 function is not nil (ie. was set by outside code), calls it with this TxsdLongName1 instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdLongName1 instance.
func (me *TxsdLongName1) Walk() (err error) {
	if fn := WalkHandlers.TxsdLongName1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LongName1 struct {
	LongName1 *TxsdLongName1 `xml:"LONG-NAME-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LongName1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LongName1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LongName1 instance.
func (me *XsdGoPkgHasElem_LongName1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LongName1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LongName1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_MimeType_XsdtAnySimpleType_ struct {
	MimeType xsdt.AnySimpleType `xml:"MIME-TYPE,attr"`
}

type TxsdUrl struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_MimeType_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdUrl function is not nil (ie. was set by outside code), calls it with this TxsdUrl instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdUrl instance.
func (me *TxsdUrl) Walk() (err error) {
	if fn := WalkHandlers.TxsdUrl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Url struct {
	Url *TxsdUrl `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Url instance.
func (me *XsdGoPkgHasElem_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Xfile struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "XFILE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Xfile) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("XFILE")
}

type XsdGoPkgHasAttr_Id_XsdtId_ struct {
	Id xsdt.Id `xml:"ID,attr"`
}

type TxsdXfile struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Xfile

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName1

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Url

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Notation

	XsdGoPkgHasElem_Tool

	XsdGoPkgHasElem_ToolVersion
}

//	If the WalkHandlers.TxsdXfile function is not nil (ie. was set by outside code), calls it with this TxsdXfile instance as the single argument. Then calls the Walk() method on 6/13 embed(s) and 0/0 field(s) belonging to this TxsdXfile instance.
func (me *TxsdXfile) Walk() (err error) {
	if fn := WalkHandlers.TxsdXfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ToolVersion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Notation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tool.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Xfile struct {
	Xfiles []*TxsdXfile `xml:"XFILE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Xfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Xfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Xfile instance.
func (me *XsdGoPkgHasElems_Xfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Xfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Xfiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFt struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Tt

	XsdGoPkgHasElems_E

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFt function is not nil (ie. was set by outside code), calls it with this TxsdFt instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFt instance.
func (me *TxsdFt) Walk() (err error) {
	if fn := WalkHandlers.TxsdFt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Tt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Ft struct {
	Fts []*TxsdFt `xml:"FT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Ft function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Ft instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Ft instance.
func (me *XsdGoPkgHasElems_Ft) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Ft; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Fts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_XrefTarget struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "XREF-TARGET"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_XrefTarget) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("XREF-TARGET")
}

type TxsdXrefTarget struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_XrefTarget

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName1
}

//	If the WalkHandlers.TxsdXrefTarget function is not nil (ie. was set by outside code), calls it with this TxsdXrefTarget instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TxsdXrefTarget instance.
func (me *TxsdXrefTarget) Walk() (err error) {
	if fn := WalkHandlers.TxsdXrefTarget; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_XrefTarget struct {
	XrefTargets []*TxsdXrefTarget `xml:"XREF-TARGET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_XrefTarget function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_XrefTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_XrefTarget instance.
func (me *XsdGoPkgHasElems_XrefTarget) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_XrefTarget; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.XrefTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Position struct {
	Position *TxsdSub `xml:"POSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Position function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Position instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Position instance.
func (me *XsdGoPkgHasElem_Position) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Position; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Position.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_State1 struct {
	State1 *TxsdSub `xml:"STATE-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_State1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_State1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_State1 instance.
func (me *XsdGoPkgHasElem_State1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_State1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.State1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Date1 struct {
	Date1 *TxsdSub `xml:"DATE-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Date1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Date1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Date1 instance.
func (me *XsdGoPkgHasElem_Date1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Date1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Date1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Std struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "STD"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Std) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("STD")
}

type XsdGoPkgHasElem_Subtitle struct {
	Subtitle *TxsdSub `xml:"SUBTITLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Subtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Subtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Subtitle instance.
func (me *XsdGoPkgHasElem_Subtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Subtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdStd struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Subtitle

	XsdGoPkgHasElem_Position

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Std

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName1

	XsdGoPkgHasElem_State1

	XsdGoPkgHasElem_Date1

	XsdGoPkgHasElem_Url
}

//	If the WalkHandlers.TxsdStd function is not nil (ie. was set by outside code), calls it with this TxsdStd instance as the single argument. Then calls the Walk() method on 7/14 embed(s) and 0/0 field(s) belonging to this TxsdStd instance.
func (me *TxsdStd) Walk() (err error) {
	if fn := WalkHandlers.TxsdStd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Subtitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Position.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_State1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Std struct {
	Stds []*TxsdStd `xml:"STD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Std function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Std instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Std instance.
func (me *XsdGoPkgHasElems_Std) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Std; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Stds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryArg struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryArg function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryArg instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryArg instance.
func (me *TxsdMsrQueryArg) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryArg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryArg struct {
	MsrQueryArgs []*TxsdMsrQueryArg `xml:"MSR-QUERY-ARG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryArg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryArg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryArg instance.
func (me *XsdGoPkgHasElems_MsrQueryArg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryArg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryArgs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Comment struct {
	Comment *TxsdSub `xml:"COMMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Comment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Comment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Comment instance.
func (me *XsdGoPkgHasElem_Comment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Comment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Comment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryName struct {
	MsrQueryName *TxsdSub `xml:"MSR-QUERY-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryName instance.
func (me *XsdGoPkgHasElem_MsrQueryName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryProps struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_MsrQueryName

	XsdGoPkgHasElems_MsrQueryArg

	XsdGoPkgHasElem_Comment
}

//	If the WalkHandlers.TxsdMsrQueryProps function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryProps instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryProps instance.
func (me *TxsdMsrQueryProps) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryProps; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryArg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Comment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryProps struct {
	MsrQueryProps *TxsdMsrQueryProps `xml:"MSR-QUERY-PROPS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryProps function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryProps instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryProps instance.
func (me *XsdGoPkgHasElem_MsrQueryProps) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryProps; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdL2 struct {
	XsdGoPkgHasElems_Tt

	XsdGoPkgHasElems_Sub

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_E

	XsdGoPkgHasElems_Sup

	XsdGoPkgHasElems_Ft

	XsdGoPkgHasAttr_L_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_XrefTarget

	XsdGoPkgHasElems_Ie

	XsdGoPkgHasElems_MsrQueryText

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdL2 function is not nil (ie. was set by outside code), calls it with this TxsdL2 instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdL2 instance.
func (me *TxsdL2) Walk() (err error) {
	if fn := WalkHandlers.TxsdL2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Tt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ft.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_XrefTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_L2 struct {
	L2s []*TxsdL2 `xml:"L-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_L2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_L2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_L2 instance.
func (me *XsdGoPkgHasElems_L2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_L2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.L2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryResultText struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_L2

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryResultText function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryResultText instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryResultText instance.
func (me *TxsdMsrQueryResultText) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryResultText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryResultText struct {
	MsrQueryResultText *TxsdMsrQueryResultText `xml:"MSR-QUERY-RESULT-TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryResultText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryResultText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryResultText instance.
func (me *XsdGoPkgHasElem_MsrQueryResultText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryResultText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryResultText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryText struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_MsrQueryProps

	XsdGoPkgHasElem_MsrQueryResultText

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryText function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryText instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryText instance.
func (me *TxsdMsrQueryText) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrQueryResultText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryText struct {
	MsrQueryTexts []*TxsdMsrQueryText `xml:"MSR-QUERY-TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryText instance.
func (me *XsdGoPkgHasElems_MsrQueryText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryTexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBr struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdBr function is not nil (ie. was set by outside code), calls it with this TxsdBr instance as the single argument. Then calls the Walk() method on 0/5 embed(s) and 0/0 field(s) belonging to this TxsdBr instance.
func (me *TxsdBr) Walk() (err error) {
	if fn := WalkHandlers.TxsdBr; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Br struct {
	Brs []*TxsdBr `xml:"BR"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Br function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Br instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Br instance.
func (me *XsdGoPkgHasElems_Br) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Br; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Brs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Xdoc struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "XDOC"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Xdoc) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("XDOC")
}

type XsdGoPkgHasElem_Number struct {
	Number *TxsdSub `xml:"NUMBER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Number function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Number instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Number instance.
func (me *XsdGoPkgHasElem_Number) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Number; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Number.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Publisher struct {
	Publisher *TxsdSub `xml:"PUBLISHER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Publisher instance.
func (me *XsdGoPkgHasElem_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdXdoc struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Xdoc

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName1

	XsdGoPkgHasElem_Number

	XsdGoPkgHasElem_State1

	XsdGoPkgHasElem_Publisher

	XsdGoPkgHasElem_Position

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Date1

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Url

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdXdoc function is not nil (ie. was set by outside code), calls it with this TxsdXdoc instance as the single argument. Then calls the Walk() method on 8/15 embed(s) and 0/0 field(s) belonging to this TxsdXdoc instance.
func (me *TxsdXdoc) Walk() (err error) {
	if fn := WalkHandlers.TxsdXdoc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_State1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Publisher.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Position.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Number.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Xdoc struct {
	Xdocs []*TxsdXdoc `xml:"XDOC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Xdoc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Xdoc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Xdoc instance.
func (me *XsdGoPkgHasElems_Xdoc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Xdoc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Xdocs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdL1 struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Tt

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasElems_Xfile

	XsdGoPkgHasElems_Ft

	XsdGoPkgHasElems_Sub

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Br

	XsdGoPkgHasElems_XrefTarget

	XsdGoPkgHasElems_E

	XsdGoPkgHasElems_Std

	XsdGoPkgHasElems_MsrQueryText

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_Sup

	XsdGoPkgHasElems_Ie

	XsdGoPkgHasElems_Xdoc

	XsdGoPkgHasAttr_L_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdL1 function is not nil (ie. was set by outside code), calls it with this TxsdL1 instance as the single argument. Then calls the Walk() method on 14/20 embed(s) and 0/0 field(s) belonging to this TxsdL1 instance.
func (me *TxsdL1) Walk() (err error) {
	if fn := WalkHandlers.TxsdL1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Br.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_XrefTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Std.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xdoc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Ft.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_L1 struct {
	L1s []*TxsdL1 `xml:"L-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_L1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_L1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_L1 instance.
func (me *XsdGoPkgHasElems_L1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_L1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.L1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_ struct {
	HelpEntry xsdt.AnySimpleType `xml:"HELP-ENTRY,attr"`
}

type TkeepWithPreviousType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TkeepWithPreviousType's alias type xsdt.Nmtoken.
func (me TkeepWithPreviousType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TkeepWithPreviousType is "NO-KEEP".
func (me TkeepWithPreviousType) IsNoKeep() bool { return me.String() == "NO-KEEP" }

//	Returns true if the value of this enumerated TkeepWithPreviousType is "KEEP".
func (me TkeepWithPreviousType) IsKeep() bool { return me.String() == "KEEP" }

//	Since TkeepWithPreviousType is just a simple String type, this merely sets the current value from the specified string.
func (me *TkeepWithPreviousType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TkeepWithPreviousType is just a simple String type, this merely returns the current string value.
func (me TkeepWithPreviousType) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_ struct {
	KeepWithPrevious TkeepWithPreviousType `xml:"KEEP-WITH-PREVIOUS,attr"`
}

type TxsdP struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasElems_L1

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdP function is not nil (ie. was set by outside code), calls it with this TxsdP instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdP instance.
func (me *TxsdP) Walk() (err error) {
	if fn := WalkHandlers.TxsdP; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_P struct {
	Ps []*TxsdP `xml:"P"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_P function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_P instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_P instance.
func (me *XsdGoPkgHasElems_P) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_P; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TfloatType xsdt.Nmtoken

//	Since TfloatType is just a simple String type, this merely sets the current value from the specified string.
func (me *TfloatType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TfloatType is just a simple String type, this merely returns the current string value.
func (me TfloatType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TfloatType's alias type xsdt.Nmtoken.
func (me TfloatType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TfloatType is "NO-FLOAT".
func (me TfloatType) IsNoFloat() bool { return me.String() == "NO-FLOAT" }

//	Returns true if the value of this enumerated TfloatType is "FLOAT".
func (me TfloatType) IsFloat() bool { return me.String() == "FLOAT" }

type XsdGoPkgHasAttr_Float_TfloatType_ struct {
	Float TfloatType `xml:"FLOAT,attr"`
}

type TxsdL5 struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_E

	XsdGoPkgHasElems_Br

	XsdGoPkgHasAttr_L_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_Xref

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdL5 function is not nil (ie. was set by outside code), calls it with this TxsdL5 instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TxsdL5 instance.
func (me *TxsdL5) Walk() (err error) {
	if fn := WalkHandlers.TxsdL5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Br.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_L5 struct {
	L5s []*TxsdL5 `xml:"L-5"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_L5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_L5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_L5 instance.
func (me *XsdGoPkgHasElems_L5) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_L5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.L5s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpgWideType xsdt.Nmtoken

//	Since TpgWideType is just a simple String type, this merely sets the current value from the specified string.
func (me *TpgWideType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TpgWideType is just a simple String type, this merely returns the current string value.
func (me TpgWideType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TpgWideType's alias type xsdt.Nmtoken.
func (me TpgWideType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TpgWideType is "NO-PGWIDE".
func (me TpgWideType) IsNoPgwide() bool { return me.String() == "NO-PGWIDE" }

//	Returns true if the value of this enumerated TpgWideType is "PGWIDE".
func (me TpgWideType) IsPgwide() bool { return me.String() == "PGWIDE" }

type XsdGoPkgHasAttr_Pgwide_TpgWideType_ struct {
	Pgwide TpgWideType `xml:"PGWIDE,attr"`
}

type XsdGoPkgHasAttr_AllowBreak_XsdtNmtoken_1 struct {
	AllowBreak xsdt.Nmtoken `xml:"ALLOW-BREAK,attr"`
}

//	Returns the default value for AllowBreak -- "1"
func (me XsdGoPkgHasAttr_AllowBreak_XsdtNmtoken_1) AllowBreakDefault() xsdt.Nmtoken {
	return xsdt.Nmtoken("1")
}

type TxsdVerbatim struct {
	XsdGoPkgHasAttr_Float_TfloatType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasElems_L5

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Pgwide_TpgWideType_

	XsdGoPkgHasAttr_AllowBreak_XsdtNmtoken_1

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdVerbatim function is not nil (ie. was set by outside code), calls it with this TxsdVerbatim instance as the single argument. Then calls the Walk() method on 1/12 embed(s) and 0/0 field(s) belonging to this TxsdVerbatim instance.
func (me *TxsdVerbatim) Walk() (err error) {
	if fn := WalkHandlers.TxsdVerbatim; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Verbatim struct {
	Verbatims []*TxsdVerbatim `xml:"VERBATIM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Verbatim function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Verbatim instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Verbatim instance.
func (me *XsdGoPkgHasElems_Verbatim) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Verbatim; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Verbatims {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnnotationText struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdAnnotationText function is not nil (ie. was set by outside code), calls it with this TxsdAnnotationText instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdAnnotationText instance.
func (me *TxsdAnnotationText) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnnotationText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnnotationText struct {
	AnnotationText *TxsdAnnotationText `xml:"ANNOTATION-TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnnotationText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnnotationText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnnotationText instance.
func (me *XsdGoPkgHasElem_AnnotationText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnnotationText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnnotationText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Label struct {
	Label *TxsdLongName `xml:"LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Label instance.
func (me *XsdGoPkgHasElem_Label) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Label; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AnnotationOrigin struct {
	AnnotationOrigin *TxsdSub `xml:"ANNOTATION-ORIGIN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AnnotationOrigin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AnnotationOrigin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AnnotationOrigin instance.
func (me *XsdGoPkgHasElem_AnnotationOrigin) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AnnotationOrigin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnnotationOrigin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnnotation struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Label

	XsdGoPkgHasElem_AnnotationOrigin

	XsdGoPkgHasElem_AnnotationText

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdAnnotation function is not nil (ie. was set by outside code), calls it with this TxsdAnnotation instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdAnnotation instance.
func (me *TxsdAnnotation) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnnotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnnotationOrigin.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AnnotationText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Annotation struct {
	Annotations []*TxsdAnnotation `xml:"ANNOTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Annotation instance.
func (me *XsdGoPkgHasElems_Annotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Annotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Annotations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAnnotations struct {
	XsdGoPkgHasElems_Annotation

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdAnnotations function is not nil (ie. was set by outside code), calls it with this TxsdAnnotations instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdAnnotations instance.
func (me *TxsdAnnotations) Walk() (err error) {
	if fn := WalkHandlers.TxsdAnnotations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Annotations struct {
	Annotations *TxsdAnnotations `xml:"ANNOTATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Annotations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Annotations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Annotations instance.
func (me *XsdGoPkgHasElem_Annotations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Annotations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Gid_XsdtAnySimpleType_ struct {
	Gid xsdt.AnySimpleType `xml:"GID,attr"`
}

type TxsdSd struct {
	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Gid_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdClass_XsdtNmtoken_
}

//	If the WalkHandlers.TxsdSd function is not nil (ie. was set by outside code), calls it with this TxsdSd instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TxsdSd instance.
func (me *TxsdSd) Walk() (err error) {
	if fn := WalkHandlers.TxsdSd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sd struct {
	Sds []*TxsdSd `xml:"SD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sd instance.
func (me *XsdGoPkgHasElems_Sd) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Desc struct {
	Desc *TxsdMsrQueryResultText `xml:"DESC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Desc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Desc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Desc instance.
func (me *XsdGoPkgHasElem_Desc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Desc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Sdg struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "SDG"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Sdg) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("SDG")
}

type TxsdSdgCaption struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Sdg

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSdgCaption function is not nil (ie. was set by outside code), calls it with this TxsdSdgCaption instance as the single argument. Then calls the Walk() method on 3/10 embed(s) and 0/0 field(s) belonging to this TxsdSdgCaption instance.
func (me *TxsdSdgCaption) Walk() (err error) {
	if fn := WalkHandlers.TxsdSdgCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SdgCaption struct {
	SdgCaption *TxsdSdgCaption `xml:"SDG-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SdgCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SdgCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SdgCaption instance.
func (me *XsdGoPkgHasElem_SdgCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SdgCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SdgCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSdg struct {
	XsdGoPkgHasAttr_Gid_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_Sd

	XsdGoPkgHasElems_Sdg

	XsdGoPkgHasElem_SdgCaption

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSdg function is not nil (ie. was set by outside code), calls it with this TxsdSdg instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TxsdSdg instance.
func (me *TxsdSdg) Walk() (err error) {
	if fn := WalkHandlers.TxsdSdg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Sd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SdgCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sdg struct {
	Sdgs []*TxsdSdg `xml:"SDG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sdg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sdg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sdg instance.
func (me *XsdGoPkgHasElems_Sdg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sdg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sdgs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSdgs struct {
	XsdGoPkgHasElems_Sdg

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSdgs function is not nil (ie. was set by outside code), calls it with this TxsdSdgs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSdgs instance.
func (me *TxsdSdgs) Walk() (err error) {
	if fn := WalkHandlers.TxsdSdgs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Sdg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sdgs struct {
	Sdgs *TxsdSdgs `xml:"SDGS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sdgs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sdgs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sdgs instance.
func (me *XsdGoPkgHasElem_Sdgs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sdgs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_TeamMember struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "TEAM-MEMBER"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_TeamMember) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("TEAM-MEMBER")
}

type TxsdTeamMemberRef struct {
	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_TeamMember

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdTeamMemberRef function is not nil (ie. was set by outside code), calls it with this TxsdTeamMemberRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdTeamMemberRef instance.
func (me *TxsdTeamMemberRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdTeamMemberRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TeamMemberRef struct {
	TeamMemberRef *TxsdTeamMemberRef `xml:"TEAM-MEMBER-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TeamMemberRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TeamMemberRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TeamMemberRef instance.
func (me *XsdGoPkgHasElem_TeamMemberRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TeamMemberRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdL10 struct {
	XsdGoPkgHasAttr_L_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdL10 function is not nil (ie. was set by outside code), calls it with this TxsdL10 instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdL10 instance.
func (me *TxsdL10) Walk() (err error) {
	if fn := WalkHandlers.TxsdL10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_L10 struct {
	L10s []*TxsdL10 `xml:"L-10"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_L10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_L10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_L10 instance.
func (me *XsdGoPkgHasElems_L10) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_L10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.L10s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRevisionLabel struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_L10

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdRevisionLabel function is not nil (ie. was set by outside code), calls it with this TxsdRevisionLabel instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdRevisionLabel instance.
func (me *TxsdRevisionLabel) Walk() (err error) {
	if fn := WalkHandlers.TxsdRevisionLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevisionLabel struct {
	RevisionLabel *TxsdRevisionLabel `xml:"REVISION-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevisionLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevisionLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevisionLabel instance.
func (me *XsdGoPkgHasElem_RevisionLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevisionLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevisionLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Date struct {
	Date *TxsdRevisionLabel `xml:"DATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Date function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Date instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Date instance.
func (me *XsdGoPkgHasElem_Date) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Date; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Company struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "COMPANY"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Company) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("COMPANY")
}

type TxsdCompanyRef struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Company

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef
}

//	If the WalkHandlers.TxsdCompanyRef function is not nil (ie. was set by outside code), calls it with this TxsdCompanyRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdCompanyRef instance.
func (me *TxsdCompanyRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompanyRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompanyRef struct {
	CompanyRef *TxsdCompanyRef `xml:"COMPANY-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompanyRef instance.
func (me *XsdGoPkgHasElem_CompanyRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompanyRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevisionLabelP1 struct {
	RevisionLabelP1 *TxsdSub `xml:"REVISION-LABEL-P1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevisionLabelP1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevisionLabelP1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevisionLabelP1 instance.
func (me *XsdGoPkgHasElem_RevisionLabelP1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevisionLabelP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevisionLabelP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RevisionLabelP2 struct {
	RevisionLabelP2 *TxsdSub `xml:"REVISION-LABEL-P2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RevisionLabelP2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RevisionLabelP2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RevisionLabelP2 instance.
func (me *XsdGoPkgHasElem_RevisionLabelP2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RevisionLabelP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RevisionLabelP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_State struct {
	State *TxsdRevisionLabel `xml:"STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_State instance.
func (me *XsdGoPkgHasElem_State) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_State; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.State.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompanyRevisionInfo struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_CompanyRef

	XsdGoPkgHasElem_RevisionLabelP1

	XsdGoPkgHasElem_RevisionLabelP2

	XsdGoPkgHasElem_State

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_RevisionLabel
}

//	If the WalkHandlers.TxsdCompanyRevisionInfo function is not nil (ie. was set by outside code), calls it with this TxsdCompanyRevisionInfo instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdCompanyRevisionInfo instance.
func (me *TxsdCompanyRevisionInfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompanyRevisionInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RevisionLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionLabelP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionLabelP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_State.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyRevisionInfo struct {
	CompanyRevisionInfos []*TxsdCompanyRevisionInfo `xml:"COMPANY-REVISION-INFO"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyRevisionInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyRevisionInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyRevisionInfo instance.
func (me *XsdGoPkgHasElems_CompanyRevisionInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyRevisionInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompanyRevisionInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompanyRevisionInfos struct {
	XsdGoPkgHasElems_CompanyRevisionInfo

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdCompanyRevisionInfos function is not nil (ie. was set by outside code), calls it with this TxsdCompanyRevisionInfos instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdCompanyRevisionInfos instance.
func (me *TxsdCompanyRevisionInfos) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompanyRevisionInfos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CompanyRevisionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompanyRevisionInfos struct {
	CompanyRevisionInfos *TxsdCompanyRevisionInfos `xml:"COMPANY-REVISION-INFOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyRevisionInfos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyRevisionInfos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompanyRevisionInfos instance.
func (me *XsdGoPkgHasElem_CompanyRevisionInfos) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyRevisionInfos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompanyRevisionInfos.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Change struct {
	Change *TxsdMsrQueryResultText `xml:"CHANGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Change function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Change instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Change instance.
func (me *XsdGoPkgHasElem_Change) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Change; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Change.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reason struct {
	Reason *TxsdMsrQueryResultText `xml:"REASON"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reason instance.
func (me *XsdGoPkgHasElem_Reason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdModificationType xsdt.Nmtoken

//	Since TxsdModificationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdModificationType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdModificationType is just a simple String type, this merely returns the current string value.
func (me TxsdModificationType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdModificationType's alias type xsdt.Nmtoken.
func (me TxsdModificationType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdModificationType is "CONTENT-RELATED".
func (me TxsdModificationType) IsContentRelated() bool { return me.String() == "CONTENT-RELATED" }

//	Returns true if the value of this enumerated TxsdModificationType is "DOC-RELATED".
func (me TxsdModificationType) IsDocRelated() bool { return me.String() == "DOC-RELATED" }

type XsdGoPkgHasAttr_Type_TxsdModificationType_ContentRelated struct {
	Type TxsdModificationType `xml:"TYPE,attr"`
}

//	Returns the default value for Type -- "CONTENT-RELATED"
func (me XsdGoPkgHasAttr_Type_TxsdModificationType_ContentRelated) TypeDefault() TxsdModificationType {
	return TxsdModificationType("CONTENT-RELATED")
}

type TxsdModification struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Change

	XsdGoPkgHasElem_Reason

	XsdGoPkgHasAttr_Type_TxsdModificationType_ContentRelated
}

//	If the WalkHandlers.TxsdModification function is not nil (ie. was set by outside code), calls it with this TxsdModification instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdModification instance.
func (me *TxsdModification) Walk() (err error) {
	if fn := WalkHandlers.TxsdModification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Reason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Change.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Modification struct {
	Modifications []*TxsdModification `xml:"MODIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Modification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Modification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Modification instance.
func (me *XsdGoPkgHasElems_Modification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Modification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Modifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdModifications struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Modification

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdModifications function is not nil (ie. was set by outside code), calls it with this TxsdModifications instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdModifications instance.
func (me *TxsdModifications) Walk() (err error) {
	if fn := WalkHandlers.TxsdModifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Modification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Modifications struct {
	Modifications *TxsdModifications `xml:"MODIFICATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Modifications function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Modifications instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Modifications instance.
func (me *XsdGoPkgHasElem_Modifications) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Modifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Modifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IssuedBy struct {
	IssuedBy *TxsdRevisionLabel `xml:"ISSUED-BY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IssuedBy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IssuedBy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IssuedBy instance.
func (me *XsdGoPkgHasElem_IssuedBy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IssuedBy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IssuedBy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDocRevision struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_RevisionLabel

	XsdGoPkgHasElem_Date

	XsdGoPkgHasElem_Modifications

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_CompanyRevisionInfos

	XsdGoPkgHasElem_RevisionLabelP1

	XsdGoPkgHasElem_IssuedBy

	XsdGoPkgHasElem_RevisionLabelP2

	XsdGoPkgHasElem_State
}

//	If the WalkHandlers.TxsdDocRevision function is not nil (ie. was set by outside code), calls it with this TxsdDocRevision instance as the single argument. Then calls the Walk() method on 9/14 embed(s) and 0/0 field(s) belonging to this TxsdDocRevision instance.
func (me *TxsdDocRevision) Walk() (err error) {
	if fn := WalkHandlers.TxsdDocRevision; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Modifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CompanyRevisionInfos.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionLabelP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IssuedBy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionLabelP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_State.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RevisionLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocRevision struct {
	DocRevisions []*TxsdDocRevision `xml:"DOC-REVISION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocRevision function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocRevision instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocRevision instance.
func (me *XsdGoPkgHasElems_DocRevision) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocRevision; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocRevisions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDocRevisions struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_DocRevision

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdDocRevisions function is not nil (ie. was set by outside code), calls it with this TxsdDocRevisions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdDocRevisions instance.
func (me *TxsdDocRevisions) Walk() (err error) {
	if fn := WalkHandlers.TxsdDocRevisions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DocRevision.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocRevisions struct {
	DocRevisions *TxsdDocRevisions `xml:"DOC-REVISIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocRevisions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocRevisions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocRevisions instance.
func (me *XsdGoPkgHasElem_DocRevisions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocRevisions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocRevisions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Language struct {
	Language *TxsdSub `xml:"LANGUAGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Language function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Language instance.
func (me *XsdGoPkgHasElem_Language) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UsedLanguages struct {
	UsedLanguages *TxsdRevisionLabel `xml:"USED-LANGUAGES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UsedLanguages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UsedLanguages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UsedLanguages instance.
func (me *XsdGoPkgHasElem_UsedLanguages) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UsedLanguages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UsedLanguages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_TargetSystem_XsdtAnySimpleType_ struct {
	TargetSystem xsdt.AnySimpleType `xml:"TARGET-SYSTEM,attr"`
}

type TxsdFormatterCtrl struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_TargetSystem_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFormatterCtrl function is not nil (ie. was set by outside code), calls it with this TxsdFormatterCtrl instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdFormatterCtrl instance.
func (me *TxsdFormatterCtrl) Walk() (err error) {
	if fn := WalkHandlers.TxsdFormatterCtrl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormatterCtrl struct {
	FormatterCtrls []*TxsdFormatterCtrl `xml:"FORMATTER-CTRL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormatterCtrl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormatterCtrl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormatterCtrl instance.
func (me *XsdGoPkgHasElems_FormatterCtrl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormatterCtrl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormatterCtrls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFormatterCtrls struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FormatterCtrl

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFormatterCtrls function is not nil (ie. was set by outside code), calls it with this TxsdFormatterCtrls instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFormatterCtrls instance.
func (me *TxsdFormatterCtrls) Walk() (err error) {
	if fn := WalkHandlers.TxsdFormatterCtrls; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FormatterCtrl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormatterCtrls struct {
	FormatterCtrls *TxsdFormatterCtrls `xml:"FORMATTER-CTRLS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormatterCtrls function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormatterCtrls instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FormatterCtrls instance.
func (me *XsdGoPkgHasElem_FormatterCtrls) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormatterCtrls; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FormatterCtrls.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocLabel struct {
	DocLabel *TxsdRevisionLabel `xml:"DOC-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocLabel instance.
func (me *XsdGoPkgHasElem_DocLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrivateCode struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Type_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdPrivateCode function is not nil (ie. was set by outside code), calls it with this TxsdPrivateCode instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdPrivateCode instance.
func (me *TxsdPrivateCode) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrivateCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PrivateCode struct {
	PrivateCodes []*TxsdPrivateCode `xml:"PRIVATE-CODE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrivateCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrivateCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrivateCode instance.
func (me *XsdGoPkgHasElems_PrivateCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrivateCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrivateCodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrivateCodes struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_PrivateCode

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdPrivateCodes function is not nil (ie. was set by outside code), calls it with this TxsdPrivateCodes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdPrivateCodes instance.
func (me *TxsdPrivateCodes) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrivateCodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_PrivateCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PrivateCodes struct {
	PrivateCodes *TxsdPrivateCodes `xml:"PRIVATE-CODES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrivateCodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrivateCodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PrivateCodes instance.
func (me *XsdGoPkgHasElem_PrivateCodes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrivateCodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrivateCodes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EntityName struct {
	EntityName *TxsdSub `xml:"ENTITY-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EntityName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EntityName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EntityName instance.
func (me *XsdGoPkgHasElem_EntityName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EntityName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntityName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompanyDocInfo struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_CompanyRef

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasElem_PrivateCodes

	XsdGoPkgHasElem_EntityName

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_DocLabel
}

//	If the WalkHandlers.TxsdCompanyDocInfo function is not nil (ie. was set by outside code), calls it with this TxsdCompanyDocInfo instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdCompanyDocInfo instance.
func (me *TxsdCompanyDocInfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompanyDocInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CompanyRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PrivateCodes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EntityName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyDocInfo struct {
	CompanyDocInfos []*TxsdCompanyDocInfo `xml:"COMPANY-DOC-INFO"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyDocInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyDocInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyDocInfo instance.
func (me *XsdGoPkgHasElems_CompanyDocInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyDocInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompanyDocInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompanyDocInfos struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_CompanyDocInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdCompanyDocInfos function is not nil (ie. was set by outside code), calls it with this TxsdCompanyDocInfos instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdCompanyDocInfos instance.
func (me *TxsdCompanyDocInfos) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompanyDocInfos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CompanyDocInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompanyDocInfos struct {
	CompanyDocInfos *TxsdCompanyDocInfos `xml:"COMPANY-DOC-INFOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyDocInfos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyDocInfos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompanyDocInfos instance.
func (me *XsdGoPkgHasElem_CompanyDocInfos) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyDocInfos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompanyDocInfos.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAdminData struct {
	XsdGoPkgHasElem_CompanyDocInfos

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_DocRevisions

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Language

	XsdGoPkgHasElem_UsedLanguages

	XsdGoPkgHasElem_FormatterCtrls
}

//	If the WalkHandlers.TxsdAdminData function is not nil (ie. was set by outside code), calls it with this TxsdAdminData instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdAdminData instance.
func (me *TxsdAdminData) Walk() (err error) {
	if fn := WalkHandlers.TxsdAdminData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CompanyDocInfos.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FormatterCtrls.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DocRevisions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Language.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UsedLanguages.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AdminData struct {
	AdminData *TxsdAdminData `xml:"ADMIN-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AdminData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdminData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AdminData instance.
func (me *XsdGoPkgHasElem_AdminData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AdminData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructureElement struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-STRUCTURE-ELEMENT"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructureElement) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-STRUCTURE-ELEMENT")
}

type TxsdFmStructureElementRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructureElement

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmStructureElementRef function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureElementRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureElementRef instance.
func (me *TxsdFmStructureElementRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureElementRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureElementRef struct {
	FmStructureElementRef *TxsdFmStructureElementRef `xml:"FM-STRUCTURE-ELEMENT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureElementRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureElementRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureElementRef instance.
func (me *XsdGoPkgHasElem_FmStructureElementRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureElementRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Category struct {
	Category *TxsdSub `xml:"CATEGORY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Category function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Category instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Category instance.
func (me *XsdGoPkgHasElem_Category) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Category; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserdefinedAttribute struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-USERDEFINED-ATTRIBUTE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserdefinedAttribute) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-USERDEFINED-ATTRIBUTE")
}

type TxsdFmUserdefinedAttributeRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserdefinedAttribute

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef
}

//	If the WalkHandlers.TxsdFmUserdefinedAttributeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmUserdefinedAttributeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmUserdefinedAttributeRef instance.
func (me *TxsdFmUserdefinedAttributeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserdefinedAttributeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserdefinedAttributeRef struct {
	FmUserdefinedAttributeRefs []*TxsdFmUserdefinedAttributeRef `xml:"FM-USERDEFINED-ATTRIBUTE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttributeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserdefinedAttributeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserdefinedAttributeRef instance.
func (me *XsdGoPkgHasElems_FmUserdefinedAttributeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttributeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserdefinedAttributeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserdefinedAttributeRefs struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmUserdefinedAttributeRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmUserdefinedAttributeRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmUserdefinedAttributeRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmUserdefinedAttributeRefs instance.
func (me *TxsdFmUserdefinedAttributeRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserdefinedAttributeRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmUserdefinedAttributeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserdefinedAttributeRefs struct {
	FmUserdefinedAttributeRefs *TxsdFmUserdefinedAttributeRefs `xml:"FM-USERDEFINED-ATTRIBUTE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttributeRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserdefinedAttributeRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserdefinedAttributeRefs instance.
func (me *XsdGoPkgHasElem_FmUserdefinedAttributeRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttributeRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmProjectContent struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmCollectionConts

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmStructureElementRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmProjectContent function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmProjectContent instance as the single argument. Then calls the Walk() method on 10/15 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmProjectContent instance.
func (me *TxsdFmDrbfmProjectContent) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmProjectContent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollectionConts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmProjectContent struct {
	FmDrbfmProjectContents []*TxsdFmDrbfmProjectContent `xml:"FM-DRBFM-PROJECT-CONTENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmProjectContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmProjectContent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmProjectContent instance.
func (me *XsdGoPkgHasElems_FmDrbfmProjectContent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmProjectContent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmProjectContents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmProjectContents struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmDrbfmProjectContent
}

//	If the WalkHandlers.TxsdFmDrbfmProjectContents function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmProjectContents instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmProjectContents instance.
func (me *TxsdFmDrbfmProjectContents) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmProjectContents; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmProjectContent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmProjectContents struct {
	FmDrbfmProjectContents *TxsdFmDrbfmProjectContents `xml:"FM-DRBFM-PROJECT-CONTENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmProjectContents function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmProjectContents instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmProjectContents instance.
func (me *XsdGoPkgHasElem_FmDrbfmProjectContents) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmProjectContents; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmProjectContents.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModification struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-DRBFM-MODIFICATION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModification) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-DRBFM-MODIFICATION")
}

type TxsdFmDrbfmModificationRef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModification

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmModificationRef function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationRef instance.
func (me *TxsdFmDrbfmModificationRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationRef struct {
	FmDrbfmModificationRefs []*TxsdFmDrbfmModificationRef `xml:"FM-DRBFM-MODIFICATION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationRef instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModificationRefs struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmDrbfmModificationRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmModificationRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationRefs instance.
func (me *TxsdFmDrbfmModificationRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmModificationRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationRefs struct {
	FmDrbfmModificationRefs *TxsdFmDrbfmModificationRefs `xml:"FM-DRBFM-MODIFICATION-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationRefs instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModificationType struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-DRBFM-MODIFICATION-TYPE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModificationType) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-DRBFM-MODIFICATION-TYPE")
}

type TxsdFmDrbfmModificationTypeRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModificationType

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink
}

//	If the WalkHandlers.TxsdFmDrbfmModificationTypeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationTypeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationTypeRef instance.
func (me *TxsdFmDrbfmModificationTypeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationTypeRef struct {
	FmDrbfmModificationTypeRef *TxsdFmDrbfmModificationTypeRef `xml:"FM-DRBFM-MODIFICATION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationTypeRef instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModificationNote struct {
	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmDrbfmModificationTypeRef

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmStructureElementRef

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc
}

//	If the WalkHandlers.TxsdFmDrbfmModificationNote function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationNote instance as the single argument. Then calls the Walk() method on 10/15 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationNote instance.
func (me *TxsdFmDrbfmModificationNote) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmModificationTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationNote struct {
	FmDrbfmModificationNotes []*TxsdFmDrbfmModificationNote `xml:"FM-DRBFM-MODIFICATION-NOTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationNote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationNote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationNote instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationNote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationNotes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModificationNotes struct {
	XsdGoPkgHasElems_FmDrbfmModificationNote

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmModificationNotes function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationNotes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationNotes instance.
func (me *TxsdFmDrbfmModificationNotes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationNotes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmModificationNote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationNotes struct {
	FmDrbfmModificationNotes *TxsdFmDrbfmModificationNotes `xml:"FM-DRBFM-MODIFICATION-NOTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationNotes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationNotes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationNotes instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationNotes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationNotes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationNotes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FieldName_XsdtAnySimpleType_ struct {
	FieldName xsdt.AnySimpleType `xml:"FIELD-NAME,attr"`
}

type TxsdMiscValue struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FieldName_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdMiscValue function is not nil (ie. was set by outside code), calls it with this TxsdMiscValue instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdMiscValue instance.
func (me *TxsdMiscValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdMiscValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MiscValue struct {
	MiscValue *TxsdMiscValue `xml:"MISC-VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MiscValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MiscValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MiscValue instance.
func (me *XsdGoPkgHasElem_MiscValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MiscValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MiscValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMisc struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Label

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_MiscValue

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMisc function is not nil (ie. was set by outside code), calls it with this TxsdMisc instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdMisc instance.
func (me *TxsdMisc) Walk() (err error) {
	if fn := WalkHandlers.TxsdMisc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Misc struct {
	Miscs []*TxsdMisc `xml:"MISC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Misc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Misc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Misc instance.
func (me *XsdGoPkgHasElems_Misc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Misc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Miscs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMiscData struct {
	XsdGoPkgHasElems_Misc

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMiscData function is not nil (ie. was set by outside code), calls it with this TxsdMiscData instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdMiscData instance.
func (me *TxsdMiscData) Walk() (err error) {
	if fn := WalkHandlers.TxsdMiscData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Misc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MiscData struct {
	MiscData *TxsdMiscData `xml:"MISC-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MiscData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MiscData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MiscData instance.
func (me *XsdGoPkgHasElem_MiscData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MiscData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CoverSheetStyle struct {
	CoverSheetStyle *TxsdSub `xml:"COVER-SHEET-STYLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CoverSheetStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CoverSheetStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CoverSheetStyle instance.
func (me *XsdGoPkgHasElem_CoverSheetStyle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CoverSheetStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CoverSheetStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUserCoverSheet struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_CoverSheetStyle

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdUserCoverSheet function is not nil (ie. was set by outside code), calls it with this TxsdUserCoverSheet instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdUserCoverSheet instance.
func (me *TxsdUserCoverSheet) Walk() (err error) {
	if fn := WalkHandlers.TxsdUserCoverSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_CoverSheetStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UserCoverSheet struct {
	UserCoverSheets []*TxsdUserCoverSheet `xml:"USER-COVER-SHEET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UserCoverSheet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UserCoverSheet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UserCoverSheet instance.
func (me *XsdGoPkgHasElems_UserCoverSheet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UserCoverSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UserCoverSheets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdUserCoverSheets struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_UserCoverSheet

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdUserCoverSheets function is not nil (ie. was set by outside code), calls it with this TxsdUserCoverSheets instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdUserCoverSheets instance.
func (me *TxsdUserCoverSheets) Walk() (err error) {
	if fn := WalkHandlers.TxsdUserCoverSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_UserCoverSheet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UserCoverSheets struct {
	UserCoverSheets *TxsdUserCoverSheets `xml:"USER-COVER-SHEETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UserCoverSheets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UserCoverSheets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UserCoverSheets instance.
func (me *XsdGoPkgHasElem_UserCoverSheets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UserCoverSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Versionstatus_XsdtAnySimpleType_ struct {
	Versionstatus xsdt.AnySimpleType `xml:"VERSIONSTATUS,attr"`
}

type XsdGoPkgHasAttr_Structureversion_XsdtAnySimpleType_ struct {
	Structureversion xsdt.AnySimpleType `xml:"STRUCTUREVERSION,attr"`
}

type XsdGoPkgHasAttr_Structureedition_XsdtAnySimpleType_ struct {
	Structureedition xsdt.AnySimpleType `xml:"STRUCTUREEDITION,attr"`
}

type XsdGoPkgHasAttr_Previousstructureversion_XsdtAnySimpleType_ struct {
	Previousstructureversion xsdt.AnySimpleType `xml:"PREVIOUSSTRUCTUREVERSION,attr"`
}

type XsdGoPkgHasAttr_Nextstructureversion_XsdtAnySimpleType_ struct {
	Nextstructureversion xsdt.AnySimpleType `xml:"NEXTSTRUCTUREVERSION,attr"`
}

type XsdGoPkgHasAttr_Versionstamp_XsdtAnySimpleType_ struct {
	Versionstamp xsdt.AnySimpleType `xml:"VERSIONSTAMP,attr"`
}

type TxsdFmVersionInfo struct {
	XsdGoPkgHasAttr_Versionstamp_XsdtAnySimpleType_

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Nextstructureversion_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Versionstatus_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Structureversion_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Previousstructureversion_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Structureedition_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmVersionInfo function is not nil (ie. was set by outside code), calls it with this TxsdFmVersionInfo instance as the single argument. Then calls the Walk() method on 3/14 embed(s) and 0/0 field(s) belonging to this TxsdFmVersionInfo instance.
func (me *TxsdFmVersionInfo) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVersionInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVersionInfo struct {
	FmVersionInfo *TxsdFmVersionInfo `xml:"FM-VERSION-INFO"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVersionInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVersionInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVersionInfo instance.
func (me *XsdGoPkgHasElem_FmVersionInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVersionInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmProject struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-DRBFM-PROJECT"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmProject) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-DRBFM-PROJECT")
}

type TxsdFmFormHeader struct {
	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFormHeader function is not nil (ie. was set by outside code), calls it with this TxsdFmFormHeader instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFormHeader instance.
func (me *TxsdFmFormHeader) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFormHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFormHeader struct {
	FmFormHeader *TxsdFmFormHeader `xml:"FM-FORM-HEADER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFormHeader function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFormHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFormHeader instance.
func (me *XsdGoPkgHasElem_FmFormHeader) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFormHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmProject struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmProject

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmFormHeader

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmDrbfmProjectContents

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmDrbfmModificationRefs

	XsdGoPkgHasElem_FmDrbfmModificationNotes

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmProject function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmProject instance as the single argument. Then calls the Walk() method on 14/21 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmProject instance.
func (me *TxsdFmDrbfmProject) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmProject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmModificationRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmModificationNotes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmProjectContents.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmProject struct {
	FmDrbfmProjects []*TxsdFmDrbfmProject `xml:"FM-DRBFM-PROJECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmProject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmProject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmProject instance.
func (me *XsdGoPkgHasElems_FmDrbfmProject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmProject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmProjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmProjects struct {
	XsdGoPkgHasElems_FmDrbfmProject

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmProjects function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmProjects instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmProjects instance.
func (me *TxsdFmDrbfmProjects) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmProjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmProject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmProjects struct {
	FmDrbfmProjects *TxsdFmDrbfmProjects `xml:"FM-DRBFM-PROJECTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmProjects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmProjects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmProjects instance.
func (me *XsdGoPkgHasElem_FmDrbfmProjects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmProjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmProjects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RiskPriorityFactor struct {
	RiskPriorityFactor *TxsdSub `xml:"RISK-PRIORITY-FACTOR"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RiskPriorityFactor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RiskPriorityFactor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RiskPriorityFactor instance.
func (me *XsdGoPkgHasElem_RiskPriorityFactor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RiskPriorityFactor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RiskPriorityFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmAssessmentEntry struct {
	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_RiskPriorityFactor

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Label
}

//	If the WalkHandlers.TxsdFmAssessmentEntry function is not nil (ie. was set by outside code), calls it with this TxsdFmAssessmentEntry instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdFmAssessmentEntry instance.
func (me *TxsdFmAssessmentEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAssessmentEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RiskPriorityFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentEntry struct {
	FmAssessmentEntries []*TxsdFmAssessmentEntry `xml:"FM-ASSESSMENT-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentEntry instance.
func (me *XsdGoPkgHasElems_FmAssessmentEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmAssessmentDiscoveryList struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmAssessmentEntry

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmAssessmentDiscoveryList function is not nil (ie. was set by outside code), calls it with this TxsdFmAssessmentDiscoveryList instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmAssessmentDiscoveryList instance.
func (me *TxsdFmAssessmentDiscoveryList) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAssessmentDiscoveryList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmAssessmentEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentDiscoveryList struct {
	FmAssessmentDiscoveryList *TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-DISCOVERY-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentDiscoveryList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentDiscoveryList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentDiscoveryList instance.
func (me *XsdGoPkgHasElem_FmAssessmentDiscoveryList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentDiscoveryList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentDiscoveryList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentMilList struct {
	FmAssessmentMilList *TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-MIL-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentMilList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentMilList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentMilList instance.
func (me *XsdGoPkgHasElem_FmAssessmentMilList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentMilList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentMilList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentOccurrenceList struct {
	FmAssessmentOccurrenceList *TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-OCCURRENCE-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentOccurrenceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentOccurrenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentOccurrenceList instance.
func (me *XsdGoPkgHasElem_FmAssessmentOccurrenceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentOccurrenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentOccurrenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentSignificanceList struct {
	FmAssessmentSignificanceList *TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-SIGNIFICANCE-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentSignificanceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentSignificanceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentSignificanceList instance.
func (me *XsdGoPkgHasElem_FmAssessmentSignificanceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentSignificanceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentSignificanceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAssessmentCatalog struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-ASSESSMENT-CATALOG"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAssessmentCatalog) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-ASSESSMENT-CATALOG")
}

type TxsdFmAssessmentCatalog struct {
	XsdGoPkgHasElem_FmAssessmentSignificanceList

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAssessmentCatalog

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmAssessmentOccurrenceList

	XsdGoPkgHasElem_FmAssessmentDiscoveryList

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmAssessmentMilList

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmAssessmentCatalog function is not nil (ie. was set by outside code), calls it with this TxsdFmAssessmentCatalog instance as the single argument. Then calls the Walk() method on 12/19 embed(s) and 0/0 field(s) belonging to this TxsdFmAssessmentCatalog instance.
func (me *TxsdFmAssessmentCatalog) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAssessmentCatalog; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAssessmentMilList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAssessmentOccurrenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAssessmentSignificanceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAssessmentDiscoveryList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentCatalog struct {
	FmAssessmentCatalogs []*TxsdFmAssessmentCatalog `xml:"FM-ASSESSMENT-CATALOG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentCatalog function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentCatalog instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentCatalog instance.
func (me *XsdGoPkgHasElems_FmAssessmentCatalog) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentCatalog; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentCatalogs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmAssessmentCatalogs struct {
	XsdGoPkgHasElems_FmAssessmentCatalog

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmAssessmentCatalogs function is not nil (ie. was set by outside code), calls it with this TxsdFmAssessmentCatalogs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmAssessmentCatalogs instance.
func (me *TxsdFmAssessmentCatalogs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAssessmentCatalogs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmAssessmentCatalog.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentCatalogs struct {
	FmAssessmentCatalogs *TxsdFmAssessmentCatalogs `xml:"FM-ASSESSMENT-CATALOGS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentCatalogs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentCatalogs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentCatalogs instance.
func (me *XsdGoPkgHasElem_FmAssessmentCatalogs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentCatalogs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentCatalogs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TeamMemberRef struct {
	TeamMemberRefs []*TxsdTeamMemberRef `xml:"TEAM-MEMBER-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TeamMemberRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TeamMemberRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TeamMemberRef instance.
func (me *XsdGoPkgHasElems_TeamMemberRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TeamMemberRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TeamMemberRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTeamMemberRefs struct {
	XsdGoPkgHasElems_TeamMemberRef

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTeamMemberRefs function is not nil (ie. was set by outside code), calls it with this TxsdTeamMemberRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdTeamMemberRefs instance.
func (me *TxsdTeamMemberRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdTeamMemberRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TeamMemberRefs struct {
	TeamMemberRefs *TxsdTeamMemberRefs `xml:"TEAM-MEMBER-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TeamMemberRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TeamMemberRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TeamMemberRefs instance.
func (me *XsdGoPkgHasElem_TeamMemberRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TeamMemberRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TeamMemberRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTeam struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-TEAM"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTeam) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-TEAM")
}

type TxsdFmTeam struct {
	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTeam

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_TeamMemberRefs

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTeam function is not nil (ie. was set by outside code), calls it with this TxsdFmTeam instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdFmTeam instance.
func (me *TxsdFmTeam) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTeam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTeam struct {
	FmTeams []*TxsdFmTeam `xml:"FM-TEAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTeam function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTeam instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTeam instance.
func (me *XsdGoPkgHasElems_FmTeam) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTeam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTeams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTeams struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmTeam
}

//	If the WalkHandlers.TxsdFmTeams function is not nil (ie. was set by outside code), calls it with this TxsdFmTeams instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmTeams instance.
func (me *TxsdFmTeams) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTeams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTeam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTeams struct {
	FmTeams *TxsdFmTeams `xml:"FM-TEAMS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTeams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTeams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTeams instance.
func (me *XsdGoPkgHasElem_FmTeams) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTeams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTeams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_TeamMember struct {
	FNamespace xsdt.Nmtokens `xml:"F-NAMESPACE,attr"`
}

//	Returns the fixed value for FNamespace -- "TEAM-MEMBER"
func (me XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_TeamMember) FNamespaceFixed() xsdt.Nmtokens {
	return xsdt.Nmtokens("TEAM-MEMBER")
}

type XsdGoPkgHasElem_City struct {
	City *TxsdSub `xml:"CITY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_City instance.
func (me *XsdGoPkgHasElem_City) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_City; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Department struct {
	Department *TxsdSub `xml:"DEPARTMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Department function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Department instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Department instance.
func (me *XsdGoPkgHasElem_Department) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Department; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Department.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fax struct {
	Fax *TxsdSub `xml:"FAX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fax instance.
func (me *XsdGoPkgHasElem_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Email struct {
	Email *TxsdSub `xml:"EMAIL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Email instance.
func (me *XsdGoPkgHasElem_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Homepage struct {
	Homepage *TxsdSub `xml:"HOMEPAGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Homepage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Homepage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Homepage instance.
func (me *XsdGoPkgHasElem_Homepage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Homepage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Homepage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Role struct {
	Roles []*TxsdRevisionLabel `xml:"ROLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Role function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Role instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Role instance.
func (me *XsdGoPkgHasElems_Role) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Role; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Roles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FChildType_XsdtAnySimpleType_RoleSelection struct {
	FChildType xsdt.AnySimpleType `xml:"F-CHILD-TYPE,attr"`
}

//	Returns the fixed value for FChildType -- "ROLE:SELECTION"
func (me XsdGoPkgHasAttr_FChildType_XsdtAnySimpleType_RoleSelection) FChildTypeFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("ROLE:SELECTION")
}

type TxsdRoles struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Role

	XsdGoPkgHasAttr_FChildType_XsdtAnySimpleType_RoleSelection

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdRoles function is not nil (ie. was set by outside code), calls it with this TxsdRoles instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdRoles instance.
func (me *TxsdRoles) Walk() (err error) {
	if fn := WalkHandlers.TxsdRoles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Role.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Roles struct {
	Roles *TxsdRoles `xml:"ROLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Roles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Roles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Roles instance.
func (me *XsdGoPkgHasElem_Roles) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Roles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Roles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Zip struct {
	Zip *TxsdSub `xml:"ZIP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Zip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Zip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Zip instance.
func (me *XsdGoPkgHasElem_Zip) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Zip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Zip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Phone struct {
	Phone *TxsdSub `xml:"PHONE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Phone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Phone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Phone instance.
func (me *XsdGoPkgHasElem_Phone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Phone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Phone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Address struct {
	Address *TxsdSub `xml:"ADDRESS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTeamMember struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_City

	XsdGoPkgHasElem_TeamMemberRefs

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_TeamMember

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Department

	XsdGoPkgHasElem_Fax

	XsdGoPkgHasElem_Email

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Roles

	XsdGoPkgHasElem_Zip

	XsdGoPkgHasElem_Phone

	XsdGoPkgHasElem_Homepage

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Address

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTeamMember function is not nil (ie. was set by outside code), calls it with this TxsdTeamMember instance as the single argument. Then calls the Walk() method on 15/22 embed(s) and 0/0 field(s) belonging to this TxsdTeamMember instance.
func (me *TxsdTeamMember) Walk() (err error) {
	if fn := WalkHandlers.TxsdTeamMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_City.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Department.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Homepage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Roles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Zip.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Phone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TeamMember struct {
	TeamMembers []*TxsdTeamMember `xml:"TEAM-MEMBER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TeamMember function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TeamMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TeamMember instance.
func (me *XsdGoPkgHasElems_TeamMember) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TeamMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TeamMembers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTeamMembers struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_TeamMember

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTeamMembers function is not nil (ie. was set by outside code), calls it with this TxsdTeamMembers instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdTeamMembers instance.
func (me *TxsdTeamMembers) Walk() (err error) {
	if fn := WalkHandlers.TxsdTeamMembers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_TeamMember.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TeamMembers struct {
	TeamMembers *TxsdTeamMembers `xml:"TEAM-MEMBERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TeamMembers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TeamMembers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TeamMembers instance.
func (me *XsdGoPkgHasElem_TeamMembers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TeamMembers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TeamMembers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FChildType_XsdtAnySimpleType_LongNameSelection struct {
	FChildType xsdt.AnySimpleType `xml:"F-CHILD-TYPE,attr"`
}

//	Returns the fixed value for FChildType -- "LONG-NAME:SELECTION"
func (me XsdGoPkgHasAttr_FChildType_XsdtAnySimpleType_LongNameSelection) FChildTypeFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("LONG-NAME:SELECTION")
}

type XsdGoPkgHasAttr_Role_XsdtNmtoken_ struct {
	Role xsdt.Nmtoken `xml:"ROLE,attr"`
}

type TxsdCompany struct {
	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Role_XsdtNmtoken_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Roles

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Company

	XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_TeamMember

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_TeamMembers

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FChildType_XsdtAnySimpleType_LongNameSelection
}

//	If the WalkHandlers.TxsdCompany function is not nil (ie. was set by outside code), calls it with this TxsdCompany instance as the single argument. Then calls the Walk() method on 4/14 embed(s) and 0/0 field(s) belonging to this TxsdCompany instance.
func (me *TxsdCompany) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompany; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMembers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Roles.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Company struct {
	Companies []*TxsdCompany `xml:"COMPANY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Company function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Company instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Company instance.
func (me *XsdGoPkgHasElems_Company) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Company; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Companies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCompanies struct {
	XsdGoPkgHasElems_Company

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdCompanies function is not nil (ie. was set by outside code), calls it with this TxsdCompanies instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdCompanies instance.
func (me *TxsdCompanies) Walk() (err error) {
	if fn := WalkHandlers.TxsdCompanies; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Company.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Companies struct {
	Companies *TxsdCompanies `xml:"COMPANIES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Companies function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Companies instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Companies instance.
func (me *XsdGoPkgHasElem_Companies) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Companies; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Companies.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmHead struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Companies

	XsdGoPkgHasElem_FmTeams

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmHead function is not nil (ie. was set by outside code), calls it with this TxsdFmHead instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmHead instance.
func (me *TxsdFmHead) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmHead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Companies.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTeams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmHead struct {
	FmHead *TxsdFmHead `xml:"FM-HEAD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmHead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmHead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmHead instance.
func (me *XsdGoPkgHasElem_FmHead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmHead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmHead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmIdPrefix struct {
	FmIdPrefix *TxsdSub `xml:"FM-ID-PREFIX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmIdPrefix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmIdPrefix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmIdPrefix instance.
func (me *XsdGoPkgHasElem_FmIdPrefix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmIdPrefix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmIdPrefix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Tool_XsdtNmtoken_ struct {
	Tool xsdt.Nmtoken `xml:"TOOL,attr"`
}

type XsdGoPkgHasAttr_MappedId_XsdtAnySimpleType_ struct {
	MappedId xsdt.AnySimpleType `xml:"MAPPED-ID,attr"`
}

type TxsdIdc struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_MappedId_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdIdc function is not nil (ie. was set by outside code), calls it with this TxsdIdc instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdIdc instance.
func (me *TxsdIdc) Walk() (err error) {
	if fn := WalkHandlers.TxsdIdc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Idc struct {
	Idcs []*TxsdIdc `xml:"IDC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Idc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Idc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Idc instance.
func (me *XsdGoPkgHasElems_Idc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Idc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Idcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmIdtable struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Tool_XsdtNmtoken_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Idc

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmIdtable function is not nil (ie. was set by outside code), calls it with this TxsdFmIdtable instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdFmIdtable instance.
func (me *TxsdFmIdtable) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmIdtable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Idc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmIdtable struct {
	FmIdtable *TxsdFmIdtable `xml:"FM-IDTABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmIdtable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmIdtable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmIdtable instance.
func (me *XsdGoPkgHasElem_FmIdtable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmIdtable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmIdtable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTool struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-TOOL"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTool) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-TOOL")
}

type TxsdFmToolIdAware xsdt.Nmtoken

//	Since TxsdFmToolIdAware is just a simple String type, this merely returns the current string value.
func (me TxsdFmToolIdAware) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdFmToolIdAware's alias type xsdt.Nmtoken.
func (me TxsdFmToolIdAware) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdFmToolIdAware is "ID-AWARE".
func (me TxsdFmToolIdAware) IsIdAware() bool { return me.String() == "ID-AWARE" }

//	Returns true if the value of this enumerated TxsdFmToolIdAware is "NO-ID-AWARE".
func (me TxsdFmToolIdAware) IsNoIdAware() bool { return me.String() == "NO-ID-AWARE" }

//	Since TxsdFmToolIdAware is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFmToolIdAware) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_IdAware_TxsdFmToolIdAware_IdAware struct {
	IdAware TxsdFmToolIdAware `xml:"ID-AWARE,attr"`
}

//	Returns the default value for IdAware -- "ID-AWARE"
func (me XsdGoPkgHasAttr_IdAware_TxsdFmToolIdAware_IdAware) IdAwareDefault() TxsdFmToolIdAware {
	return TxsdFmToolIdAware("ID-AWARE")
}

type TxsdFmTool struct {
	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmIdtable

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTool

	XsdGoPkgHasAttr_IdAware_TxsdFmToolIdAware_IdAware

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmIdPrefix

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTool function is not nil (ie. was set by outside code), calls it with this TxsdFmTool instance as the single argument. Then calls the Walk() method on 7/15 embed(s) and 0/0 field(s) belonging to this TxsdFmTool instance.
func (me *TxsdFmTool) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTool; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmIdPrefix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmIdtable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTool struct {
	FmTools []*TxsdFmTool `xml:"FM-TOOL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTool function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTool instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTool instance.
func (me *XsdGoPkgHasElems_FmTool) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTool; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTools {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmToolData struct {
	XsdGoPkgHasElems_FmTool

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmToolData function is not nil (ie. was set by outside code), calls it with this TxsdFmToolData instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmToolData instance.
func (me *TxsdFmToolData) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmToolData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTool.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmToolData struct {
	FmToolData *TxsdFmToolData `xml:"FM-TOOL-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmToolData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmToolData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmToolData instance.
func (me *XsdGoPkgHasElem_FmToolData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmToolData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmToolData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestSample struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-TEST-SAMPLE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestSample) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-TEST-SAMPLE")
}

type TxsdFmTestSampleRef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestSample

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTestSampleRef function is not nil (ie. was set by outside code), calls it with this TxsdFmTestSampleRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmTestSampleRef instance.
func (me *TxsdFmTestSampleRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestSampleRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestSampleRef struct {
	FmTestSampleRefs []*TxsdFmTestSampleRef `xml:"FM-TEST-SAMPLE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestSampleRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestSampleRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestSampleRef instance.
func (me *XsdGoPkgHasElems_FmTestSampleRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestSampleRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestSampleRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTestSampleRefs struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmTestSampleRef
}

//	If the WalkHandlers.TxsdFmTestSampleRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmTestSampleRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmTestSampleRefs instance.
func (me *TxsdFmTestSampleRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestSampleRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTestSampleRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestSampleRefs struct {
	FmTestSampleRefs *TxsdFmTestSampleRefs `xml:"FM-TEST-SAMPLE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestSampleRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestSampleRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestSampleRefs instance.
func (me *XsdGoPkgHasElem_FmTestSampleRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestSampleRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestSampleRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteRow struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-PALETTE-ROW"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteRow) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-PALETTE-ROW")
}

type TxsdFmPaletteRowRef struct {
	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteRow

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPaletteRowRef function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteRowRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteRowRef instance.
func (me *TxsdFmPaletteRowRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteRowRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteRowRef struct {
	FmPaletteRowRef *TxsdFmPaletteRowRef `xml:"FM-PALETTE-ROW-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteRowRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteRowRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteRowRef instance.
func (me *XsdGoPkgHasElem_FmPaletteRowRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteRowRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteRowRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmClassification struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmPaletteRowRef
}

//	If the WalkHandlers.TxsdFmClassification function is not nil (ie. was set by outside code), calls it with this TxsdFmClassification instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmClassification instance.
func (me *TxsdFmClassification) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmClassification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmPaletteRowRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmClassification struct {
	FmClassification *TxsdFmClassification `xml:"FM-CLASSIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmClassification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmClassification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmClassification instance.
func (me *XsdGoPkgHasElem_FmClassification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmClassification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmXref struct {
	FmXref *TxsdFmXref `xml:"FM-XREF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmXref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmXref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmXref instance.
func (me *XsdGoPkgHasElem_FmXref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmXref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Xdoc struct {
	Xdoc *TxsdXdoc `xml:"XDOC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Xdoc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Xdoc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Xdoc instance.
func (me *XsdGoPkgHasElem_Xdoc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Xdoc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xdoc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MimeContainer struct {
	MimeContainer *TxsdUrl `xml:"MIME-CONTAINER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MimeContainer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MimeContainer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MimeContainer instance.
func (me *XsdGoPkgHasElem_MimeContainer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MimeContainer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MimeContainer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmLinkDestination struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmXref

	XsdGoPkgHasElem_Xdoc

	XsdGoPkgHasElem_MimeContainer

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmLinkDestination function is not nil (ie. was set by outside code), calls it with this TxsdFmLinkDestination instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmLinkDestination instance.
func (me *TxsdFmLinkDestination) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmLinkDestination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Xdoc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MimeContainer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmLinkDestination struct {
	FmLinkDestinations []*TxsdFmLinkDestination `xml:"FM-LINK-DESTINATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmLinkDestination function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmLinkDestination instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmLinkDestination instance.
func (me *XsdGoPkgHasElems_FmLinkDestination) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmLinkDestination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmLinkDestinations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmLinkDestinations struct {
	XsdGoPkgHasElems_FmLinkDestination

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmLinkDestinations function is not nil (ie. was set by outside code), calls it with this TxsdFmLinkDestinations instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmLinkDestinations instance.
func (me *TxsdFmLinkDestinations) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmLinkDestinations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmLinkDestination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmLinkDestinations struct {
	FmLinkDestinations *TxsdFmLinkDestinations `xml:"FM-LINK-DESTINATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmLinkDestinations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmLinkDestinations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmLinkDestinations instance.
func (me *XsdGoPkgHasElem_FmLinkDestinations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmLinkDestinations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdGraphicEditfit xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-90-CW".
func (me TxsdGraphicEditfit) IsRotate90Cw() bool { return me.String() == "ROTATE-90-CW" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-180-LIMIT-TO-TEXT".
func (me TxsdGraphicEditfit) IsRotate180LimitToText() bool {
	return me.String() == "ROTATE-180-LIMIT-TO-TEXT"
}

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-90-CCW-LIMIT-TO-PAGE".
func (me TxsdGraphicEditfit) IsRotate90CcwLimitToPage() bool {
	return me.String() == "ROTATE-90-CCW-LIMIT-TO-PAGE"
}

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "LIMIT-TO-PAGE".
func (me TxsdGraphicEditfit) IsLimitToPage() bool { return me.String() == "LIMIT-TO-PAGE" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "1".
func (me TxsdGraphicEditfit) Is1() bool { return me.String() == "1" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-90-CCW-FIT-TO-TEXT".
func (me TxsdGraphicEditfit) IsRotate90CcwFitToText() bool {
	return me.String() == "ROTATE-90-CCW-FIT-TO-TEXT"
}

//	Since TxsdGraphicEditfit is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdGraphicEditfit) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-90-CCW".
func (me TxsdGraphicEditfit) IsRotate90Ccw() bool { return me.String() == "ROTATE-90-CCW" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "FIT-TO-PAGE".
func (me TxsdGraphicEditfit) IsFitToPage() bool { return me.String() == "FIT-TO-PAGE" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "LIMIT-TO-TEXT".
func (me TxsdGraphicEditfit) IsLimitToText() bool { return me.String() == "LIMIT-TO-TEXT" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-180".
func (me TxsdGraphicEditfit) IsRotate180() bool { return me.String() == "ROTATE-180" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "2".
func (me TxsdGraphicEditfit) Is2() bool { return me.String() == "2" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "3".
func (me TxsdGraphicEditfit) Is3() bool { return me.String() == "3" }

//	Since TxsdGraphicEditfit is just a simple String type, this merely returns the current string value.
func (me TxsdGraphicEditfit) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdGraphicEditfit's alias type xsdt.Nmtoken.
func (me TxsdGraphicEditfit) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-180-LIMIT-TO-PAGE".
func (me TxsdGraphicEditfit) IsRotate180LimitToPage() bool {
	return me.String() == "ROTATE-180-LIMIT-TO-PAGE"
}

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-90-CW-LIMIT-TO-PAGE".
func (me TxsdGraphicEditfit) IsRotate90CwLimitToPage() bool {
	return me.String() == "ROTATE-90-CW-LIMIT-TO-PAGE"
}

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "ROTATE-90-CW-FIT-TO-TEXT".
func (me TxsdGraphicEditfit) IsRotate90CwFitToText() bool {
	return me.String() == "ROTATE-90-CW-FIT-TO-TEXT"
}

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "0".
func (me TxsdGraphicEditfit) Is0() bool { return me.String() == "0" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "AS-IS".
func (me TxsdGraphicEditfit) IsAsIs() bool { return me.String() == "AS-IS" }

//	Returns true if the value of this enumerated TxsdGraphicEditfit is "FIT-TO-TEXT".
func (me TxsdGraphicEditfit) IsFitToText() bool { return me.String() == "FIT-TO-TEXT" }

type XsdGoPkgHasAttr_Editfit_TxsdGraphicEditfit_0 struct {
	Editfit TxsdGraphicEditfit `xml:"EDITFIT,attr"`
}

//	Returns the default value for Editfit -- "0"
func (me XsdGoPkgHasAttr_Editfit_TxsdGraphicEditfit_0) EditfitDefault() TxsdGraphicEditfit {
	return TxsdGraphicEditfit("0")
}

type XsdGoPkgHasAttr_Height_XsdtAnySimpleType_ struct {
	Height xsdt.AnySimpleType `xml:"HEIGHT,attr"`
}

type XsdGoPkgHasAttr_EditHeight_XsdtAnySimpleType_ struct {
	EditHeight xsdt.AnySimpleType `xml:"EDIT-HEIGHT,attr"`
}

type XsdGoPkgHasAttr_HtmlScale_XsdtAnySimpleType_ struct {
	HtmlScale xsdt.AnySimpleType `xml:"HTML-SCALE,attr"`
}

type XsdGoPkgHasAttr_Width_XsdtAnySimpleType_ struct {
	Width xsdt.AnySimpleType `xml:"WIDTH,attr"`
}

type XsdGoPkgHasAttr_HtmlFit_TxsdGraphicHtmlFit_0 struct {
	HtmlFit TxsdGraphicEditfit `xml:"HTML-FIT,attr"`
}

//	Returns the default value for HtmlFit -- "0"
func (me XsdGoPkgHasAttr_HtmlFit_TxsdGraphicHtmlFit_0) HtmlFitDefault() TxsdGraphicEditfit {
	return TxsdGraphicEditfit("0")
}

type XsdGoPkgHasAttr_HtmlWidth_XsdtAnySimpleType_ struct {
	HtmlWidth xsdt.AnySimpleType `xml:"HTML-WIDTH,attr"`
}

type XsdGoPkgHasAttr_HtmlHeight_XsdtAnySimpleType_ struct {
	HtmlHeight xsdt.AnySimpleType `xml:"HTML-HEIGHT,attr"`
}

type TxsdGraphicCategory xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdGraphicCategory is "ENGINEERING".
func (me TxsdGraphicCategory) IsEngineering() bool { return me.String() == "ENGINEERING" }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "LOGO".
func (me TxsdGraphicCategory) IsLogo() bool { return me.String() == "LOGO" }

//	Since TxsdGraphicCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdGraphicCategory) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdGraphicCategory's alias type xsdt.Nmtoken.
func (me TxsdGraphicCategory) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "FLOWCHART".
func (me TxsdGraphicCategory) IsFlowchart() bool { return me.String() == "FLOWCHART" }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "CONCEPTUAL".
func (me TxsdGraphicCategory) IsConceptual() bool { return me.String() == "CONCEPTUAL" }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "SCHEMATIC".
func (me TxsdGraphicCategory) IsSchematic() bool { return me.String() == "SCHEMATIC" }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "GRAPH".
func (me TxsdGraphicCategory) IsGraph() bool { return me.String() == "GRAPH" }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "BARCODE".
func (me TxsdGraphicCategory) IsBarcode() bool { return me.String() == "BARCODE" }

//	Since TxsdGraphicCategory is just a simple String type, this merely returns the current string value.
func (me TxsdGraphicCategory) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdGraphicCategory is "WAVEFORM".
func (me TxsdGraphicCategory) IsWaveform() bool { return me.String() == "WAVEFORM" }

type XsdGoPkgHasAttr_Category_TxsdGraphicCategory_ struct {
	Category TxsdGraphicCategory `xml:"CATEGORY,attr"`
}

type XsdGoPkgHasAttr_Filename_XsdtAnySimpleType_ struct {
	Filename xsdt.AnySimpleType `xml:"FILENAME,attr"`
}

type XsdGoPkgHasAttr_Notation_XsdtAnySimpleType_ struct {
	Notation xsdt.AnySimpleType `xml:"NOTATION,attr"`
}

type XsdGoPkgHasAttr_Scale_XsdtAnySimpleType_ struct {
	Scale xsdt.AnySimpleType `xml:"SCALE,attr"`
}

type XsdGoPkgHasAttr_EditWidth_XsdtAnySimpleType_ struct {
	EditWidth xsdt.AnySimpleType `xml:"EDIT-WIDTH,attr"`
}

type XsdGoPkgHasAttr_Editscale_XsdtAnySimpleType_ struct {
	Editscale xsdt.AnySimpleType `xml:"EDITSCALE,attr"`
}

type XsdGoPkgHasAttr_Fit_TxsdGraphicFit_0 struct {
	Fit TxsdGraphicEditfit `xml:"FIT,attr"`
}

//	Returns the default value for Fit -- "0"
func (me XsdGoPkgHasAttr_Fit_TxsdGraphicFit_0) FitDefault() TxsdGraphicEditfit {
	return TxsdGraphicEditfit("0")
}

type TxsdGraphic struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Editfit_TxsdGraphicEditfit_0

	XsdGoPkgHasAttr_Height_XsdtAnySimpleType_

	XsdGoPkgHasAttr_EditHeight_XsdtAnySimpleType_

	XsdGoPkgHasAttr_HtmlScale_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Width_XsdtAnySimpleType_

	XsdGoPkgHasAttr_HtmlFit_TxsdGraphicHtmlFit_0

	XsdGoPkgHasAttr_HtmlWidth_XsdtAnySimpleType_

	XsdGoPkgHasAttr_HtmlHeight_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Category_TxsdGraphicCategory_

	XsdGoPkgHasAttr_Filename_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Notation_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Fit_TxsdGraphicFit_0

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Scale_XsdtAnySimpleType_

	XsdGoPkgHasAttr_EditWidth_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Editscale_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdGraphic function is not nil (ie. was set by outside code), calls it with this TxsdGraphic instance as the single argument. Then calls the Walk() method on 1/21 embed(s) and 0/0 field(s) belonging to this TxsdGraphic instance.
func (me *TxsdGraphic) Walk() (err error) {
	if fn := WalkHandlers.TxsdGraphic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Graphic struct {
	Graphic *TxsdGraphic `xml:"GRAPHIC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Graphic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Graphic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Graphic instance.
func (me *XsdGoPkgHasElem_Graphic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Graphic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Graphic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Onmouseover_XsdtAnySimpleType_ struct {
	Onmouseover xsdt.AnySimpleType `xml:"ONMOUSEOVER,attr"`
}

type XsdGoPkgHasAttr_Name_XsdtNmtoken_ struct {
	Name xsdt.Nmtoken `xml:"NAME,attr"`
}

type XsdGoPkgHasAttr_Ondblclick_XsdtAnySimpleType_ struct {
	Ondblclick xsdt.AnySimpleType `xml:"ONDBLCLICK,attr"`
}

type XsdGoPkgHasAttr_Onmousemove_XsdtAnySimpleType_ struct {
	Onmousemove xsdt.AnySimpleType `xml:"ONMOUSEMOVE,attr"`
}

type XsdGoPkgHasAttr_Onkeydown_XsdtAnySimpleType_ struct {
	Onkeydown xsdt.AnySimpleType `xml:"ONKEYDOWN,attr"`
}

type XsdGoPkgHasAttr_Title_XsdtAnySimpleType_ struct {
	Title xsdt.AnySimpleType `xml:"TITLE,attr"`
}

type XsdGoPkgHasAttr_Onkeyup_XsdtAnySimpleType_ struct {
	Onkeyup xsdt.AnySimpleType `xml:"ONKEYUP,attr"`
}

type XsdGoPkgHasAttr_Class_XsdtAnySimpleType_ struct {
	Class xsdt.AnySimpleType `xml:"CLASS,attr"`
}

type TxsdAreaShape xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdAreaShape is "DEFAULT".
func (me TxsdAreaShape) IsDefault() bool { return me.String() == "DEFAULT" }

//	Returns true if the value of this enumerated TxsdAreaShape is "POLY".
func (me TxsdAreaShape) IsPoly() bool { return me.String() == "POLY" }

//	Returns true if the value of this enumerated TxsdAreaShape is "CIRCLE".
func (me TxsdAreaShape) IsCircle() bool { return me.String() == "CIRCLE" }

//	Returns true if the value of this enumerated TxsdAreaShape is "RECT".
func (me TxsdAreaShape) IsRect() bool { return me.String() == "RECT" }

//	Since TxsdAreaShape is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAreaShape) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdAreaShape is just a simple String type, this merely returns the current string value.
func (me TxsdAreaShape) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAreaShape's alias type xsdt.Nmtoken.
func (me TxsdAreaShape) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Shape_TxsdAreaShape_Rect struct {
	Shape TxsdAreaShape `xml:"SHAPE,attr"`
}

//	Returns the default value for Shape -- "RECT"
func (me XsdGoPkgHasAttr_Shape_TxsdAreaShape_Rect) ShapeDefault() TxsdAreaShape {
	return TxsdAreaShape("RECT")
}

type XsdGoPkgHasAttr_Tabindex_XsdtAnySimpleType_ struct {
	Tabindex xsdt.AnySimpleType `xml:"TABINDEX,attr"`
}

type XsdGoPkgHasAttr_Style_XsdtAnySimpleType_ struct {
	Style xsdt.AnySimpleType `xml:"STYLE,attr"`
}

type XsdGoPkgHasAttr_Onclick_XsdtAnySimpleType_ struct {
	Onclick xsdt.AnySimpleType `xml:"ONCLICK,attr"`
}

type XsdGoPkgHasAttr_Coords_XsdtAnySimpleType_ struct {
	Coords xsdt.AnySimpleType `xml:"COORDS,attr"`
}

type XsdGoPkgHasAttr_Accesskey_XsdtAnySimpleType_ struct {
	Accesskey xsdt.AnySimpleType `xml:"ACCESSKEY,attr"`
}

type XsdGoPkgHasAttr_Onmousedown_XsdtAnySimpleType_ struct {
	Onmousedown xsdt.AnySimpleType `xml:"ONMOUSEDOWN,attr"`
}

type XsdGoPkgHasAttr_Onmouseout_XsdtAnySimpleType_ struct {
	Onmouseout xsdt.AnySimpleType `xml:"ONMOUSEOUT,attr"`
}

type XsdGoPkgHasAttr_Alt_XsdtAnySimpleType_ struct {
	Alt xsdt.AnySimpleType `xml:"ALT,attr"`
}

type XsdGoPkgHasAttr_Href_XsdtAnySimpleType_ struct {
	Href xsdt.AnySimpleType `xml:"HREF,attr"`
}

type XsdGoPkgHasAttr_Onfocus_XsdtAnySimpleType_ struct {
	Onfocus xsdt.AnySimpleType `xml:"ONFOCUS,attr"`
}

type XsdGoPkgHasAttr_Onkeypress_XsdtAnySimpleType_ struct {
	Onkeypress xsdt.AnySimpleType `xml:"ONKEYPRESS,attr"`
}

type XsdGoPkgHasAttr_Onmouseup_XsdtAnySimpleType_ struct {
	Onmouseup xsdt.AnySimpleType `xml:"ONMOUSEUP,attr"`
}

type XsdGoPkgHasAttr_Onblur_XsdtAnySimpleType_ struct {
	Onblur xsdt.AnySimpleType `xml:"ONBLUR,attr"`
}

type TxsdAreaNohref xsdt.Nmtoken

//	Since TxsdAreaNohref is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAreaNohref) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdAreaNohref is just a simple String type, this merely returns the current string value.
func (me TxsdAreaNohref) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAreaNohref's alias type xsdt.Nmtoken.
func (me TxsdAreaNohref) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdAreaNohref is "NOHREF".
func (me TxsdAreaNohref) IsNohref() bool { return me.String() == "NOHREF" }

type XsdGoPkgHasAttr_Nohref_TxsdAreaNohref_ struct {
	Nohref TxsdAreaNohref `xml:"NOHREF,attr"`
}

type TxsdArea struct {
	XsdGoPkgHasAttr_Onkeypress_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmouseover_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onfocus_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmousemove_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onkeyup_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmouseup_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Ondblclick_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Nohref_TxsdAreaNohref_

	XsdGoPkgHasAttr_Onblur_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Class_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Shape_TxsdAreaShape_Rect

	XsdGoPkgHasAttr_Tabindex_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Style_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onclick_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmouseout_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Coords_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Accesskey_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmousedown_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Title_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Alt_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onkeydown_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Href_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdArea function is not nil (ie. was set by outside code), calls it with this TxsdArea instance as the single argument. Then calls the Walk() method on 0/28 embed(s) and 0/0 field(s) belonging to this TxsdArea instance.
func (me *TxsdArea) Walk() (err error) {
	if fn := WalkHandlers.TxsdArea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Area struct {
	Areas []*TxsdArea `xml:"AREA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Area function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Area instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Area instance.
func (me *XsdGoPkgHasElems_Area) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Area; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Areas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMap struct {
	XsdGoPkgHasAttr_Name_XsdtNmtoken_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Ondblclick_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmousemove_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmouseover_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Title_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onkeyup_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_Area

	XsdGoPkgHasAttr_Onclick_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onkeydown_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onkeypress_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmouseup_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmouseout_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Class_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Style_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Onmousedown_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMap function is not nil (ie. was set by outside code), calls it with this TxsdMap instance as the single argument. Then calls the Walk() method on 1/21 embed(s) and 0/0 field(s) belonging to this TxsdMap instance.
func (me *TxsdMap) Walk() (err error) {
	if fn := WalkHandlers.TxsdMap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Area.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Map struct {
	Map *TxsdMap `xml:"MAP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Map function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Map instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Map instance.
func (me *XsdGoPkgHasElem_Map) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Map; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Map.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLGraphic struct {
	XsdGoPkgHasElem_Graphic

	XsdGoPkgHasElem_Map

	XsdGoPkgHasAttr_L_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdLGraphic function is not nil (ie. was set by outside code), calls it with this TxsdLGraphic instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdLGraphic instance.
func (me *TxsdLGraphic) Walk() (err error) {
	if fn := WalkHandlers.TxsdLGraphic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Graphic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Map.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LGraphic struct {
	LGraphics []*TxsdLGraphic `xml:"L-GRAPHIC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LGraphic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LGraphic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LGraphic instance.
func (me *XsdGoPkgHasElems_LGraphic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LGraphic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LGraphics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TframeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TframeType is "TOPBOT".
func (me TframeType) IsTopbot() bool { return me.String() == "TOPBOT" }

//	Since TframeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TframeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TframeType is just a simple String type, this merely returns the current string value.
func (me TframeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TframeType is "BOTTOM".
func (me TframeType) IsBottom() bool { return me.String() == "BOTTOM" }

//	Returns true if the value of this enumerated TframeType is "NONE".
func (me TframeType) IsNone() bool { return me.String() == "NONE" }

//	Returns true if the value of this enumerated TframeType is "SIDES".
func (me TframeType) IsSides() bool { return me.String() == "SIDES" }

//	This convenience method just performs a simple type conversion to TframeType's alias type xsdt.Nmtoken.
func (me TframeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TframeType is "TOP".
func (me TframeType) IsTop() bool { return me.String() == "TOP" }

//	Returns true if the value of this enumerated TframeType is "ALL".
func (me TframeType) IsAll() bool { return me.String() == "ALL" }

type XsdGoPkgHasAttr_Frame_TframeType_ struct {
	Frame TframeType `xml:"FRAME,attr"`
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Figure struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FIGURE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Figure) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FIGURE")
}

type TxsdFigureCaption struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Figure

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdFigureCaption function is not nil (ie. was set by outside code), calls it with this TxsdFigureCaption instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TxsdFigureCaption instance.
func (me *TxsdFigureCaption) Walk() (err error) {
	if fn := WalkHandlers.TxsdFigureCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FigureCaption struct {
	FigureCaption *TxsdFigureCaption `xml:"FIGURE-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FigureCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FigureCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FigureCaption instance.
func (me *XsdGoPkgHasElem_FigureCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FigureCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FigureCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Verbatim struct {
	Verbatim *TxsdVerbatim `xml:"VERBATIM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Verbatim function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Verbatim instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Verbatim instance.
func (me *XsdGoPkgHasElem_Verbatim) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Verbatim; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFigure struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Float_TfloatType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FigureCaption

	XsdGoPkgHasElem_Map

	XsdGoPkgHasElem_Verbatim

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Pgwide_TpgWideType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Frame_TframeType_

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasElems_LGraphic

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFigure function is not nil (ie. was set by outside code), calls it with this TxsdFigure instance as the single argument. Then calls the Walk() method on 6/16 embed(s) and 0/0 field(s) belonging to this TxsdFigure instance.
func (me *TxsdFigure) Walk() (err error) {
	if fn := WalkHandlers.TxsdFigure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LGraphic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FigureCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Map.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Figure struct {
	Figure *TxsdFigure `xml:"FIGURE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Figure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Figure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Figure instance.
func (me *XsdGoPkgHasElem_Figure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Figure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Xpos_XsdtAnySimpleType_ struct {
	Xpos xsdt.AnySimpleType `xml:"XPOS,attr"`
}

type XsdGoPkgHasAttr_Ypos_XsdtAnySimpleType_ struct {
	Ypos xsdt.AnySimpleType `xml:"YPOS,attr"`
}

type TxsdFmOverlayImage struct {
	XsdGoPkgHasElem_Figure

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Xpos_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Ypos_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmOverlayImage function is not nil (ie. was set by outside code), calls it with this TxsdFmOverlayImage instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TxsdFmOverlayImage instance.
func (me *TxsdFmOverlayImage) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOverlayImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOverlayImage struct {
	FmOverlayImage *TxsdFmOverlayImage `xml:"FM-OVERLAY-IMAGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOverlayImage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOverlayImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOverlayImage instance.
func (me *XsdGoPkgHasElem_FmOverlayImage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOverlayImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristicType struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-CHARACTERISTIC-TYPE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristicType) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-CHARACTERISTIC-TYPE")
}

type TxsdFmCharacteristicTypeRef struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristicType

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCharacteristicTypeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristicTypeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristicTypeRef instance.
func (me *TxsdFmCharacteristicTypeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristicTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristicTypeRef struct {
	FmCharacteristicTypeRef *TxsdFmCharacteristicTypeRef `xml:"FM-CHARACTERISTIC-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristicTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristicTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristicTypeRef instance.
func (me *XsdGoPkgHasElem_FmCharacteristicTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristicTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristicTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunction struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FUNCTION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunction) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FUNCTION")
}

type TxsdFmFunctionRef struct {
	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunction

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFunctionRef function is not nil (ie. was set by outside code), calls it with this TxsdFmFunctionRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmFunctionRef instance.
func (me *TxsdFmFunctionRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunctionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunctionRef struct {
	FmFunctionRefs []*TxsdFmFunctionRef `xml:"FM-FUNCTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunctionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunctionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunctionRef instance.
func (me *XsdGoPkgHasElems_FmFunctionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunctionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctionRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristic struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-CHARACTERISTIC"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristic) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-CHARACTERISTIC")
}

type TxsdFmCharacteristicRef struct {
	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristic

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCharacteristicRef function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristicRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristicRef instance.
func (me *TxsdFmCharacteristicRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristicRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristicRef struct {
	FmCharacteristicRefs []*TxsdFmCharacteristicRef `xml:"FM-CHARACTERISTIC-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristicRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristicRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristicRef instance.
func (me *XsdGoPkgHasElems_FmCharacteristicRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristicRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristicRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPrerequisites struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunctionRef

	XsdGoPkgHasElems_FmCharacteristicRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPrerequisites function is not nil (ie. was set by outside code), calls it with this TxsdFmPrerequisites instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmPrerequisites instance.
func (me *TxsdFmPrerequisites) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPrerequisites; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFunctionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmCharacteristicRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPrerequisites struct {
	FmPrerequisites *TxsdFmPrerequisites `xml:"FM-PREREQUISITES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPrerequisites function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPrerequisites instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPrerequisites instance.
func (me *XsdGoPkgHasElem_FmPrerequisites) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPrerequisites; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPrerequisites.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Prm struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "PRM"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Prm) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("PRM")
}

type TxsdMin struct {
	XsdGoPkgHasElems_Sub

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Sup
}

//	If the WalkHandlers.TxsdMin function is not nil (ie. was set by outside code), calls it with this TxsdMin instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdMin instance.
func (me *TxsdMin) Walk() (err error) {
	if fn := WalkHandlers.TxsdMin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Min struct {
	Min *TxsdMin `xml:"MIN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Min function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Min instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Min instance.
func (me *XsdGoPkgHasElem_Min) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Min; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Min.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Typ struct {
	Typ *TxsdMin `xml:"TYP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Typ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Typ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Typ instance.
func (me *XsdGoPkgHasElem_Typ) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Typ; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Typ.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCond struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdCond function is not nil (ie. was set by outside code), calls it with this TxsdCond instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdCond instance.
func (me *TxsdCond) Walk() (err error) {
	if fn := WalkHandlers.TxsdCond; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Cond struct {
	Cond *TxsdCond `xml:"COND"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cond function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cond instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cond instance.
func (me *XsdGoPkgHasElem_Cond) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Cond; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cond.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Remark struct {
	Remark *TxsdAnnotationText `xml:"REMARK"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Remark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Remark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Remark instance.
func (me *XsdGoPkgHasElem_Remark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Remark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdL3 struct {
	XsdGoPkgHasElems_Sub

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasElems_Sup

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_L_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdL3 function is not nil (ie. was set by outside code), calls it with this TxsdL3 instance as the single argument. Then calls the Walk() method on 3/9 embed(s) and 0/0 field(s) belonging to this TxsdL3 instance.
func (me *TxsdL3) Walk() (err error) {
	if fn := WalkHandlers.TxsdL3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_L3 struct {
	L3s []*TxsdL3 `xml:"L-3"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_L3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_L3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_L3 instance.
func (me *XsdGoPkgHasElems_L3) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_L3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.L3s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdText struct {
	XsdGoPkgHasElems_L3

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdText function is not nil (ie. was set by outside code), calls it with this TxsdText instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdText instance.
func (me *TxsdText) Walk() (err error) {
	if fn := WalkHandlers.TxsdText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Text struct {
	Text *TxsdText `xml:"TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Text function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Text instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Text instance.
func (me *XsdGoPkgHasElem_Text) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Text; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Text.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tol struct {
	Tol *TxsdMin `xml:"TOL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tol instance.
func (me *XsdGoPkgHasElem_Tol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Max struct {
	Max *TxsdMin `xml:"MAX"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Max function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Max instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Max instance.
func (me *XsdGoPkgHasElem_Max) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Max; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Max.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Unit struct {
	Unit *TxsdText `xml:"UNIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Unit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Unit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Unit instance.
func (me *XsdGoPkgHasElem_Unit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Unit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Unit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Abs struct {
	Abs *TxsdMin `xml:"ABS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Abs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Abs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Abs instance.
func (me *XsdGoPkgHasElem_Abs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Abs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Abs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrmChar struct {
	XsdGoPkgHasElem_Unit

	XsdGoPkgHasElem_Abs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Cond

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasElem_Min

	XsdGoPkgHasElem_Typ

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Text

	XsdGoPkgHasElem_Tol

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Max
}

//	If the WalkHandlers.TxsdPrmChar function is not nil (ie. was set by outside code), calls it with this TxsdPrmChar instance as the single argument. Then calls the Walk() method on 9/14 embed(s) and 0/0 field(s) belonging to this TxsdPrmChar instance.
func (me *TxsdPrmChar) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrmChar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Max.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Unit.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Abs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Cond.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Min.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Typ.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Text.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PrmChar struct {
	PrmChars []*TxsdPrmChar `xml:"PRM-CHAR"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrmChar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrmChar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrmChar instance.
func (me *XsdGoPkgHasElems_PrmChar) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrmChar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrmChars {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrm struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElems_PrmChar

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Prm

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName
}

//	If the WalkHandlers.TxsdPrm function is not nil (ie. was set by outside code), calls it with this TxsdPrm instance as the single argument. Then calls the Walk() method on 4/11 embed(s) and 0/0 field(s) belonging to this TxsdPrm instance.
func (me *TxsdPrm) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PrmChar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Prm struct {
	Prms []*TxsdPrm `xml:"PRM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Prm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Prm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Prm instance.
func (me *XsdGoPkgHasElems_Prm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Prm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Prms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdPrms struct {
	XsdGoPkgHasElems_Prm

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasElem_Label
}

//	If the WalkHandlers.TxsdPrms function is not nil (ie. was set by outside code), calls it with this TxsdPrms instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdPrms instance.
func (me *TxsdPrms) Walk() (err error) {
	if fn := WalkHandlers.TxsdPrms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Prms struct {
	Prms *TxsdPrms `xml:"PRMS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Prms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Prms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Prms instance.
func (me *XsdGoPkgHasElem_Prms) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Prms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAction struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-ACTION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAction) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-ACTION")
}

type TxsdFmActionRef struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAction

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmActionRef function is not nil (ie. was set by outside code), calls it with this TxsdFmActionRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmActionRef instance.
func (me *TxsdFmActionRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmActionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActionRef struct {
	FmActionRefs []*TxsdFmActionRef `xml:"FM-ACTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActionRef instance.
func (me *XsdGoPkgHasElems_FmActionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmReactions struct {
	XsdGoPkgHasElems_FmActionRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmReactions function is not nil (ie. was set by outside code), calls it with this TxsdFmReactions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmReactions instance.
func (me *TxsdFmReactions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmReactions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmActionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmReactions struct {
	FmReactions *TxsdFmReactions `xml:"FM-REACTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmReactions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmReactions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmReactions instance.
func (me *XsdGoPkgHasElem_FmReactions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmReactions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmReactions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmParametersIsdrbfmcause xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdFmDrbfmParametersIsdrbfmcause is "FALSE".
func (me TxsdFmDrbfmParametersIsdrbfmcause) IsFalse() bool { return me.String() == "FALSE" }

//	Returns true if the value of this enumerated TxsdFmDrbfmParametersIsdrbfmcause is "TRUE".
func (me TxsdFmDrbfmParametersIsdrbfmcause) IsTrue() bool { return me.String() == "TRUE" }

//	Since TxsdFmDrbfmParametersIsdrbfmcause is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFmDrbfmParametersIsdrbfmcause) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdFmDrbfmParametersIsdrbfmcause is just a simple String type, this merely returns the current string value.
func (me TxsdFmDrbfmParametersIsdrbfmcause) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdFmDrbfmParametersIsdrbfmcause's alias type xsdt.Nmtoken.
func (me TxsdFmDrbfmParametersIsdrbfmcause) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Isdrbfmcause_TxsdFmDrbfmParametersIsdrbfmcause_ struct {
	Isdrbfmcause TxsdFmDrbfmParametersIsdrbfmcause `xml:"ISDRBFMCAUSE,attr"`
}

type XsdGoPkgHasAttr_Isdrbfmrelevant_TxsdFmDrbfmParametersIsdrbfmrelevant_ struct {
	Isdrbfmrelevant TxsdFmDrbfmParametersIsdrbfmcause `xml:"ISDRBFMRELEVANT,attr"`
}

type XsdGoPkgHasAttr_Isdrbfmconcerned_TxsdFmDrbfmParametersIsdrbfmconcerned_ struct {
	Isdrbfmconcerned TxsdFmDrbfmParametersIsdrbfmcause `xml:"ISDRBFMCONCERNED,attr"`
}

type XsdGoPkgHasElem_FmCategoryRefs struct {
	FmCategoryRefs *TxsdFmUserdefinedAttributeRefs `xml:"FM-CATEGORY-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCategoryRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCategoryRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCategoryRefs instance.
func (me *XsdGoPkgHasElem_FmCategoryRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCategoryRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCategoryRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmParameters struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmCategoryRefs

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Isdrbfmcause_TxsdFmDrbfmParametersIsdrbfmcause_

	XsdGoPkgHasAttr_Isdrbfmrelevant_TxsdFmDrbfmParametersIsdrbfmrelevant_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Isdrbfmconcerned_TxsdFmDrbfmParametersIsdrbfmconcerned_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc
}

//	If the WalkHandlers.TxsdFmDrbfmParameters function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmParameters instance as the single argument. Then calls the Walk() method on 8/16 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmParameters instance.
func (me *TxsdFmDrbfmParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmCategoryRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmParameters struct {
	FmDrbfmParameters *TxsdFmDrbfmParameters `xml:"FM-DRBFM-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmParameters instance.
func (me *XsdGoPkgHasElem_FmDrbfmParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFault struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FAULT"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFault) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FAULT")
}

type TxsdFmFaultRef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFault

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFaultRef function is not nil (ie. was set by outside code), calls it with this TxsdFmFaultRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmFaultRef instance.
func (me *TxsdFmFaultRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaultRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaultRef struct {
	FmFaultRefs []*TxsdFmFaultRef `xml:"FM-FAULT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaultRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaultRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaultRef instance.
func (me *XsdGoPkgHasElems_FmFaultRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaultRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFaultRefs struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFaultRef

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFaultRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmFaultRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFaultRefs instance.
func (me *TxsdFmFaultRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaultRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaultRefs struct {
	FmFaultRefs *TxsdFmFaultRefs `xml:"FM-FAULT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaultRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaultRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaultRefs instance.
func (me *XsdGoPkgHasElem_FmFaultRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaultRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaultRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmControlMethods struct {
	FmControlMethods *TxsdFmReactions `xml:"FM-CONTROL-METHODS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmControlMethods function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmControlMethods instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmControlMethods instance.
func (me *XsdGoPkgHasElem_FmControlMethods) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmControlMethods; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmControlMethods.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCharacteristic struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmControlMethods

	XsdGoPkgHasElem_Figure

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmTestSampleRefs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmClassification

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmCharacteristicTypeRef

	XsdGoPkgHasElem_FmPrerequisites

	XsdGoPkgHasElem_Prms

	XsdGoPkgHasElem_FmReactions

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmFaultRefs

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristic

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCharacteristic function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristic instance as the single argument. Then calls the Walk() method on 23/30 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristic instance.
func (me *TxsdFmCharacteristic) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmControlMethods.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTestSampleRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCharacteristicTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPrerequisites.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmReactions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristic struct {
	FmCharacteristics []*TxsdFmCharacteristic `xml:"FM-CHARACTERISTIC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristic instance.
func (me *XsdGoPkgHasElems_FmCharacteristic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCharacteristics struct {
	XsdGoPkgHasElems_FmCharacteristic

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCharacteristics function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristics instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristics instance.
func (me *TxsdFmCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmCharacteristic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristics struct {
	FmCharacteristics *TxsdFmCharacteristics `xml:"FM-CHARACTERISTICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristics instance.
func (me *XsdGoPkgHasElem_FmCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmStructureOwner struct {
	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmStructureOwner function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureOwner instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureOwner instance.
func (me *TxsdFmStructureOwner) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureOwner struct {
	FmStructureOwner *TxsdFmStructureOwner `xml:"FM-STRUCTURE-OWNER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureOwner function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureOwner instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureOwner instance.
func (me *XsdGoPkgHasElem_FmStructureOwner) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmVariant struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-VARIANT"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmVariant) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-VARIANT")
}

type TxsdFmVariantRef struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmVariant

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink
}

//	If the WalkHandlers.TxsdFmVariantRef function is not nil (ie. was set by outside code), calls it with this TxsdFmVariantRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmVariantRef instance.
func (me *TxsdFmVariantRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVariantRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVariantRef struct {
	FmVariantRefs []*TxsdFmVariantRef `xml:"FM-VARIANT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVariantRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVariantRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVariantRef instance.
func (me *XsdGoPkgHasElems_FmVariantRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVariantRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVariantRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmVariantRefs struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmVariantRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmVariantRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmVariantRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmVariantRefs instance.
func (me *TxsdFmVariantRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVariantRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmVariantRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVariantRefs struct {
	FmVariantRefs *TxsdFmVariantRefs `xml:"FM-VARIANT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVariantRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVariantRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVariantRefs instance.
func (me *XsdGoPkgHasElem_FmVariantRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVariantRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVariantRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOrphanHome struct {
	XsdGoPkgHasElem_FmStructureElementRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmOrphanHome function is not nil (ie. was set by outside code), calls it with this TxsdFmOrphanHome instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmOrphanHome instance.
func (me *TxsdFmOrphanHome) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOrphanHome; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOrphanHome struct {
	FmOrphanHome *TxsdFmOrphanHome `xml:"FM-ORPHAN-HOME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOrphanHome function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOrphanHome instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOrphanHome instance.
func (me *XsdGoPkgHasElem_FmOrphanHome) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOrphanHome; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOrphanHome.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdInput struct {
	XsdGoPkgHasElems_FmFaultRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunctionRef
}

//	If the WalkHandlers.TxsdInput function is not nil (ie. was set by outside code), calls it with this TxsdInput instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdInput instance.
func (me *TxsdInput) Walk() (err error) {
	if fn := WalkHandlers.TxsdInput; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFunctionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Input struct {
	Input *TxsdInput `xml:"INPUT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Input function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Input instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Input instance.
func (me *XsdGoPkgHasElem_Input) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Input; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Input.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Output struct {
	Output *TxsdInput `xml:"OUTPUT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Output function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Output instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Output instance.
func (me *XsdGoPkgHasElem_Output) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Output; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Output.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureElementRef struct {
	FmStructureElementRefs []*TxsdFmStructureElementRef `xml:"FM-STRUCTURE-ELEMENT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureElementRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureElementRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureElementRef instance.
func (me *XsdGoPkgHasElems_FmStructureElementRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureElementRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureElementRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVisible struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunctionRef

	XsdGoPkgHasElems_FmFaultRef

	XsdGoPkgHasElems_FmStructureElementRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdVisible function is not nil (ie. was set by outside code), calls it with this TxsdVisible instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdVisible instance.
func (me *TxsdVisible) Walk() (err error) {
	if fn := WalkHandlers.TxsdVisible; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmFunctionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Visible struct {
	Visible *TxsdVisible `xml:"VISIBLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Visible function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Visible instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Visible instance.
func (me *XsdGoPkgHasElem_Visible) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Visible; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Visible.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmInterface struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Input

	XsdGoPkgHasElem_Output

	XsdGoPkgHasElem_Visible

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmInterface function is not nil (ie. was set by outside code), calls it with this TxsdFmInterface instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmInterface instance.
func (me *TxsdFmInterface) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmInterface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Output.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Visible.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Input.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmInterface struct {
	FmInterface *TxsdFmInterface `xml:"FM-INTERFACE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmInterface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmInterface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmInterface instance.
func (me *XsdGoPkgHasElem_FmInterface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmInterface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmInterface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructure struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-STRUCTURE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructure) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-STRUCTURE")
}

type XsdGoPkgHasElem_FmStructureRoot struct {
	FmStructureRoot *TxsdFmOrphanHome `xml:"FM-STRUCTURE-ROOT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureRoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureRoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureRoot instance.
func (me *XsdGoPkgHasElem_FmStructureRoot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureRoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureRoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmStructure struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructure

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmInterface

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_FmStructureRoot

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmOrphanHome

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmStructureOwner

	XsdGoPkgHasElem_FmVariantRefs
}

//	If the WalkHandlers.TxsdFmStructure function is not nil (ie. was set by outside code), calls it with this TxsdFmStructure instance as the single argument. Then calls the Walk() method on 15/22 embed(s) and 0/0 field(s) belonging to this TxsdFmStructure instance.
func (me *TxsdFmStructure) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVariantRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOrphanHome.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmInterface.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureRoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructure struct {
	FmStructures []*TxsdFmStructure `xml:"FM-STRUCTURE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructure instance.
func (me *XsdGoPkgHasElems_FmStructure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmStructures struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmStructure

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmStructures function is not nil (ie. was set by outside code), calls it with this TxsdFmStructures instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmStructures instance.
func (me *TxsdFmStructures) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructures; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmStructure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructures struct {
	FmStructures *TxsdFmStructures `xml:"FM-STRUCTURES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructures function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructures instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructures instance.
func (me *XsdGoPkgHasElem_FmStructures) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructures; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructures.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMachine struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-MACHINE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMachine) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-MACHINE")
}

type TxsdFmMachine struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMachine

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMachine function is not nil (ie. was set by outside code), calls it with this TxsdFmMachine instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdFmMachine instance.
func (me *TxsdFmMachine) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMachine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMachine struct {
	FmMachines []*TxsdFmMachine `xml:"FM-MACHINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMachine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMachine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMachine instance.
func (me *XsdGoPkgHasElems_FmMachine) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMachine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMachines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmMachines struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmMachine

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMachines function is not nil (ie. was set by outside code), calls it with this TxsdFmMachines instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmMachines instance.
func (me *TxsdFmMachines) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMachines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmMachine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMachines struct {
	FmMachines *TxsdFmMachines `xml:"FM-MACHINES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMachines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMachines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMachines instance.
func (me *XsdGoPkgHasElem_FmMachines) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMachines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMachines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FDtdVersion_XsdtAnySimpleType_222Apis struct {
	FDtdVersion xsdt.AnySimpleType `xml:"F-DTD-VERSION,attr"`
}

//	Returns the fixed value for FDtdVersion -- "2.2.2-APIS"
func (me XsdGoPkgHasAttr_FDtdVersion_XsdtAnySimpleType_222Apis) FDtdVersionFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("2.2.2-APIS")
}

type XsdGoPkgHasAttr_InSymbol_XsdtAnySimpleType_ struct {
	InSymbol xsdt.AnySimpleType `xml:"IN-SYMBOL,attr"`
}

type XsdGoPkgHasAttr_OutSymbol_XsdtAnySimpleType_ struct {
	OutSymbol xsdt.AnySimpleType `xml:"OUT-SYMBOL,attr"`
}

type TxsdFmPdLineDirection xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdFmPdLineDirection is "RIGHT".
func (me TxsdFmPdLineDirection) IsRight() bool { return me.String() == "RIGHT" }

//	Returns true if the value of this enumerated TxsdFmPdLineDirection is "LEFT".
func (me TxsdFmPdLineDirection) IsLeft() bool { return me.String() == "LEFT" }

//	Since TxsdFmPdLineDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFmPdLineDirection) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdFmPdLineDirection is just a simple String type, this merely returns the current string value.
func (me TxsdFmPdLineDirection) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdFmPdLineDirection's alias type xsdt.Nmtoken.
func (me TxsdFmPdLineDirection) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdFmPdLineDirection is "BOTTOM".
func (me TxsdFmPdLineDirection) IsBottom() bool { return me.String() == "BOTTOM" }

//	Returns true if the value of this enumerated TxsdFmPdLineDirection is "TOP".
func (me TxsdFmPdLineDirection) IsTop() bool { return me.String() == "TOP" }

type XsdGoPkgHasAttr_Direction_TxsdFmPdLineDirection_ struct {
	Direction TxsdFmPdLineDirection `xml:"DIRECTION,attr"`
}

type TxsdFmPdLine struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Direction_TxsdFmPdLineDirection_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_InSymbol_XsdtAnySimpleType_

	XsdGoPkgHasAttr_OutSymbol_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPdLine function is not nil (ie. was set by outside code), calls it with this TxsdFmPdLine instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TxsdFmPdLine instance.
func (me *TxsdFmPdLine) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPdLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPdLine struct {
	FmPdLines []*TxsdFmPdLine `xml:"FM-PD-LINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPdLine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPdLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPdLine instance.
func (me *XsdGoPkgHasElems_FmPdLine) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPdLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPdLines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPdEntry struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmPaletteRowRef

	XsdGoPkgHasElem_FmStructureElementRef

	XsdGoPkgHasElems_FmPdLine

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPdEntry function is not nil (ie. was set by outside code), calls it with this TxsdFmPdEntry instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmPdEntry instance.
func (me *TxsdFmPdEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPdEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmPaletteRowRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmPdLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPdEntry struct {
	FmPdEntries []*TxsdFmPdEntry `xml:"FM-PD-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPdEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPdEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPdEntry instance.
func (me *XsdGoPkgHasElems_FmPdEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPdEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPdEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPdRow struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmPdEntry
}

//	If the WalkHandlers.TxsdFmPdRow function is not nil (ie. was set by outside code), calls it with this TxsdFmPdRow instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPdRow instance.
func (me *TxsdFmPdRow) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPdRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPdEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPdRow struct {
	FmPdRows []*TxsdFmPdRow `xml:"FM-PD-ROW"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPdRow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPdRow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPdRow instance.
func (me *XsdGoPkgHasElems_FmPdRow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPdRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPdRows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPdTable struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmPdRow

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPdTable function is not nil (ie. was set by outside code), calls it with this TxsdFmPdTable instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPdTable instance.
func (me *TxsdFmPdTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPdTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPdRow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPdTable struct {
	FmPdTable *TxsdFmPdTable `xml:"FM-PD-TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPdTable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPdTable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPdTable instance.
func (me *XsdGoPkgHasElem_FmPdTable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPdTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPdTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmProcessDiagram struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-PROCESS-DIAGRAM"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmProcessDiagram) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-PROCESS-DIAGRAM")
}

type TxsdFmStructureElementRefs struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmStructureElementRef
}

//	If the WalkHandlers.TxsdFmStructureElementRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureElementRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureElementRefs instance.
func (me *TxsdFmStructureElementRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureElementRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureElementRefs struct {
	FmStructureElementRefs *TxsdFmStructureElementRefs `xml:"FM-STRUCTURE-ELEMENT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureElementRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureElementRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureElementRefs instance.
func (me *XsdGoPkgHasElem_FmStructureElementRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureElementRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureElementRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmProcessDiagram struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmPdTable

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmProcessDiagram

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_FmStructureElementRefs

	XsdGoPkgHasElem_FmFormHeader

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmProcessDiagram function is not nil (ie. was set by outside code), calls it with this TxsdFmProcessDiagram instance as the single argument. Then calls the Walk() method on 13/20 embed(s) and 0/0 field(s) belonging to this TxsdFmProcessDiagram instance.
func (me *TxsdFmProcessDiagram) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmProcessDiagram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPdTable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmProcessDiagram struct {
	FmProcessDiagrams []*TxsdFmProcessDiagram `xml:"FM-PROCESS-DIAGRAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmProcessDiagram function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmProcessDiagram instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmProcessDiagram instance.
func (me *XsdGoPkgHasElems_FmProcessDiagram) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmProcessDiagram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmProcessDiagrams {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmProcessDiagrams struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmProcessDiagram

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmProcessDiagrams function is not nil (ie. was set by outside code), calls it with this TxsdFmProcessDiagrams instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmProcessDiagrams instance.
func (me *TxsdFmProcessDiagrams) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmProcessDiagrams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmProcessDiagram.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmProcessDiagrams struct {
	FmProcessDiagrams *TxsdFmProcessDiagrams `xml:"FM-PROCESS-DIAGRAMS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmProcessDiagrams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmProcessDiagrams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmProcessDiagrams instance.
func (me *XsdGoPkgHasElem_FmProcessDiagrams) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmProcessDiagrams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmProcessDiagrams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmSymbolicDate struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-SYMBOLIC-DATE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmSymbolicDate) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-SYMBOLIC-DATE")
}

type TxsdFmSymbolicDate struct {
	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmSymbolicDate

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Date1

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSymbolicDate function is not nil (ie. was set by outside code), calls it with this TxsdFmSymbolicDate instance as the single argument. Then calls the Walk() method on 10/17 embed(s) and 0/0 field(s) belonging to this TxsdFmSymbolicDate instance.
func (me *TxsdFmSymbolicDate) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSymbolicDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSymbolicDate struct {
	FmSymbolicDates []*TxsdFmSymbolicDate `xml:"FM-SYMBOLIC-DATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSymbolicDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSymbolicDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSymbolicDate instance.
func (me *XsdGoPkgHasElems_FmSymbolicDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSymbolicDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSymbolicDates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmSymbolicDates struct {
	XsdGoPkgHasElems_FmSymbolicDate

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSymbolicDates function is not nil (ie. was set by outside code), calls it with this TxsdFmSymbolicDates instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmSymbolicDates instance.
func (me *TxsdFmSymbolicDates) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSymbolicDates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmSymbolicDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSymbolicDates struct {
	FmSymbolicDates *TxsdFmSymbolicDates `xml:"FM-SYMBOLIC-DATES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSymbolicDates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSymbolicDates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSymbolicDates instance.
func (me *XsdGoPkgHasElem_FmSymbolicDates) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSymbolicDates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSymbolicDates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Docorsub_XsdtEntity_ struct {
	Docorsub xsdt.Entity `xml:"DOCORSUB,attr"`
}

type XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Nmlist struct {
	Hytime xsdt.Nmtoken `xml:"HYTIME,attr"`
}

//	Returns the fixed value for Hytime -- "NMLIST"
func (me XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Nmlist) HytimeFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("NMLIST")
}

type TxsdNmlistNametype xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdNmlistNametype is "ENTITY".
func (me TxsdNmlistNametype) IsEntity() bool { return me.String() == "ENTITY" }

//	Since TxsdNmlistNametype is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdNmlistNametype) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdNmlistNametype is just a simple String type, this merely returns the current string value.
func (me TxsdNmlistNametype) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdNmlistNametype's alias type xsdt.Nmtoken.
func (me TxsdNmlistNametype) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdNmlistNametype is "ELEMENT".
func (me TxsdNmlistNametype) IsElement() bool { return me.String() == "ELEMENT" }

type XsdGoPkgHasAttr_Nametype_TxsdNmlistNametype_Element struct {
	Nametype TxsdNmlistNametype `xml:"NAMETYPE,attr"`
}

//	Returns the default value for Nametype -- "ELEMENT"
func (me XsdGoPkgHasAttr_Nametype_TxsdNmlistNametype_Element) NametypeDefault() TxsdNmlistNametype {
	return TxsdNmlistNametype("ELEMENT")
}

type TxsdNmlist struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Docorsub_XsdtEntity_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Nmlist

	XsdGoPkgHasAttr_Nametype_TxsdNmlistNametype_Element
}

//	If the WalkHandlers.TxsdNmlist function is not nil (ie. was set by outside code), calls it with this TxsdNmlist instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TxsdNmlist instance.
func (me *TxsdNmlist) Walk() (err error) {
	if fn := WalkHandlers.TxsdNmlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Nmlist struct {
	Nmlist *TxsdNmlist `xml:"NMLIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Nmlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Nmlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Nmlist instance.
func (me *XsdGoPkgHasElem_Nmlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Nmlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Nmlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Nameloc struct {
	Hytime xsdt.Nmtoken `xml:"HYTIME,attr"`
}

//	Returns the fixed value for Hytime -- "NAMELOC"
func (me XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Nameloc) HytimeFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("NAMELOC")
}

type XsdGoPkgHasAttr_ExtIdClass_XsdtNmtoken_ struct {
	ExtIdClass xsdt.Nmtoken `xml:"EXT-ID-CLASS,attr"`
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_External struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "EXTERNAL"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_External) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("EXTERNAL")
}

type TxsdNameloc struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Nameloc

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Nmlist

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_ExtIdClass_XsdtNmtoken_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_External

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName
}

//	If the WalkHandlers.TxsdNameloc function is not nil (ie. was set by outside code), calls it with this TxsdNameloc instance as the single argument. Then calls the Walk() method on 3/12 embed(s) and 0/0 field(s) belonging to this TxsdNameloc instance.
func (me *TxsdNameloc) Walk() (err error) {
	if fn := WalkHandlers.TxsdNameloc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Nmlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Nameloc struct {
	Namelocs []*TxsdNameloc `xml:"NAMELOC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Nameloc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Nameloc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Nameloc instance.
func (me *XsdGoPkgHasElems_Nameloc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Nameloc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Namelocs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLocs struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_Nameloc

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdLocs function is not nil (ie. was set by outside code), calls it with this TxsdLocs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdLocs instance.
func (me *TxsdLocs) Walk() (err error) {
	if fn := WalkHandlers.TxsdLocs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Nameloc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Locs struct {
	Locs *TxsdLocs `xml:"LOCS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Locs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Locs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Locs instance.
func (me *XsdGoPkgHasElem_Locs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Locs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Locs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmControlPlan struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-CONTROL-PLAN"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmControlPlan) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-CONTROL-PLAN")
}

type TxsdFmControlPlan struct {
	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmControlPlan

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmFormHeader

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmStructureElementRefs

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_LongName
}

//	If the WalkHandlers.TxsdFmControlPlan function is not nil (ie. was set by outside code), calls it with this TxsdFmControlPlan instance as the single argument. Then calls the Walk() method on 12/19 embed(s) and 0/0 field(s) belonging to this TxsdFmControlPlan instance.
func (me *TxsdFmControlPlan) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmControlPlan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmControlPlan struct {
	FmControlPlans []*TxsdFmControlPlan `xml:"FM-CONTROL-PLAN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmControlPlan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmControlPlan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmControlPlan instance.
func (me *XsdGoPkgHasElems_FmControlPlan) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmControlPlan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmControlPlans {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmControlPlans struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmControlPlan

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmControlPlans function is not nil (ie. was set by outside code), calls it with this TxsdFmControlPlans instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmControlPlans instance.
func (me *TxsdFmControlPlans) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmControlPlans; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmControlPlan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmControlPlans struct {
	FmControlPlans *TxsdFmControlPlans `xml:"FM-CONTROL-PLANS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmControlPlans function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmControlPlans instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmControlPlans instance.
func (me *XsdGoPkgHasElem_FmControlPlans) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmControlPlans; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmControlPlans.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SpecialData struct {
	SpecialData *TxsdSdgs `xml:"SPECIAL-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SpecialData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SpecialData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SpecialData instance.
func (me *XsdGoPkgHasElem_SpecialData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SpecialData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SpecialData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FPubid_XsdtAnySimpleType_MsrDtdMsrFmeaDtdV220ApisLaiIaiXmlMlMsrfmeaDtdEn struct {
	FPubid xsdt.AnySimpleType `xml:"F-PUBID,attr"`
}

//	Returns the fixed value for FPubid -- "-//MSR//DTD MSR FMEA DTD:V2.2.0-APIS:LAI:IAI:XML:ML:MSRFMEA.DTD//EN"
func (me XsdGoPkgHasAttr_FPubid_XsdtAnySimpleType_MsrDtdMsrFmeaDtdV220ApisLaiIaiXmlMlMsrfmeaDtdEn) FPubidFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("-//MSR//DTD MSR FMEA DTD:V2.2.0-APIS:LAI:IAI:XML:ML:MSRFMEA.DTD//EN")
}

type XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmTaskSetFmTaskSets struct {
	FNamespace xsdt.Nmtokens `xml:"F-NAMESPACE,attr"`
}

//	Returns the fixed value for FNamespace -- "FM-TASK-SET FM-TASK-SETS"
func (me XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmTaskSetFmTaskSets) FNamespaceFixed() xsdt.Nmtokens {
	return xsdt.Nmtokens("FM-TASK-SET FM-TASK-SETS")
}

type TxsdFmSignificance struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_RiskPriorityFactor

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations
}

//	If the WalkHandlers.TxsdFmSignificance function is not nil (ie. was set by outside code), calls it with this TxsdFmSignificance instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmSignificance instance.
func (me *TxsdFmSignificance) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSignificance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RiskPriorityFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSignificance struct {
	FmSignificance *TxsdFmSignificance `xml:"FM-SIGNIFICANCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSignificance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSignificance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSignificance instance.
func (me *XsdGoPkgHasElem_FmSignificance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSignificance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSignificance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmRsmParameters struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmRsmParameters function is not nil (ie. was set by outside code), calls it with this TxsdFmRsmParameters instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdFmRsmParameters instance.
func (me *TxsdFmRsmParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmRsmParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmRsmParameters struct {
	FmRsmParameters *TxsdFmRsmParameters `xml:"FM-RSM-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmRsmParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmRsmParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmRsmParameters instance.
func (me *XsdGoPkgHasElem_FmRsmParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmRsmParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmRsmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFaultType struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FAULT-TYPE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFaultType) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FAULT-TYPE")
}

type TxsdFmFaultTypeRef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFaultType

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFaultTypeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmFaultTypeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmFaultTypeRef instance.
func (me *TxsdFmFaultTypeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaultTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaultTypeRef struct {
	FmFaultTypeRef *TxsdFmFaultTypeRef `xml:"FM-FAULT-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaultTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaultTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaultTypeRef instance.
func (me *XsdGoPkgHasElem_FmFaultTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaultTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaultTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorResponse struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-ERROR-RESPONSE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorResponse) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-ERROR-RESPONSE")
}

type TxsdFmErrorResponseRef struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorResponse

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmErrorResponseRef function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorResponseRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorResponseRef instance.
func (me *TxsdFmErrorResponseRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorResponseRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorResponseRef struct {
	FmErrorResponseRefs []*TxsdFmErrorResponseRef `xml:"FM-ERROR-RESPONSE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorResponseRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorResponseRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorResponseRef instance.
func (me *XsdGoPkgHasElems_FmErrorResponseRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorResponseRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorResponseRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingCondition struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-OPERATING-CONDITION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingCondition) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-OPERATING-CONDITION")
}

type TxsdFmOperatingConditionRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingCondition

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TxsdFmOperatingConditionRef function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingConditionRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingConditionRef instance.
func (me *TxsdFmOperatingConditionRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingConditionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingConditionRef struct {
	FmOperatingConditionRefs []*TxsdFmOperatingConditionRef `xml:"FM-OPERATING-CONDITION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingConditionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingConditionRef instance.
func (me *XsdGoPkgHasElems_FmOperatingConditionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditionRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorDetection struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-ERROR-DETECTION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorDetection) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-ERROR-DETECTION")
}

type TxsdFmErrorDetectionRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorDetection

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef
}

//	If the WalkHandlers.TxsdFmErrorDetectionRef function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorDetectionRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorDetectionRef instance.
func (me *TxsdFmErrorDetectionRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorDetectionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorDetectionRef struct {
	FmErrorDetectionRefs []*TxsdFmErrorDetectionRef `xml:"FM-ERROR-DETECTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorDetectionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorDetectionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorDetectionRef instance.
func (me *XsdGoPkgHasElems_FmErrorDetectionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorDetectionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorDetectionRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCauses struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFaultRef

	XsdGoPkgHasElems_FmErrorDetectionRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmErrorResponseRef

	XsdGoPkgHasElems_FmOperatingConditionRef
}

//	If the WalkHandlers.TxsdFmCauses function is not nil (ie. was set by outside code), calls it with this TxsdFmCauses instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdFmCauses instance.
func (me *TxsdFmCauses) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCauses; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmErrorDetectionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmOperatingConditionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmErrorResponseRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCauses struct {
	FmCauses *TxsdFmCauses `xml:"FM-CAUSES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCauses function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCauses instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCauses instance.
func (me *XsdGoPkgHasElem_FmCauses) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCauses; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCauses.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFtaParameters struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmCollectionConts

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category
}

//	If the WalkHandlers.TxsdFmFtaParameters function is not nil (ie. was set by outside code), calls it with this TxsdFmFtaParameters instance as the single argument. Then calls the Walk() method on 8/13 embed(s) and 0/0 field(s) belonging to this TxsdFmFtaParameters instance.
func (me *TxsdFmFtaParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFtaParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollectionConts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFtaParameters struct {
	FmFtaParameters *TxsdFmFtaParameters `xml:"FM-FTA-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFtaParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFtaParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFtaParameters instance.
func (me *XsdGoPkgHasElem_FmFtaParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFtaParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFtaParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmIecParameters struct {
	FmIecParameters *TxsdFmRsmParameters `xml:"FM-IEC-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmIecParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmIecParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmIecParameters instance.
func (me *XsdGoPkgHasElem_FmIecParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmIecParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmIecParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTaskSets struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-TASK-SETS"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTaskSets) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-TASK-SETS")
}

type XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmTaskSet struct {
	FNamespace xsdt.Nmtokens `xml:"F-NAMESPACE,attr"`
}

//	Returns the fixed value for FNamespace -- "FM-TASK-SET"
func (me XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmTaskSet) FNamespaceFixed() xsdt.Nmtokens {
	return xsdt.Nmtokens("FM-TASK-SET")
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTaskSet struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-TASK-SET"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTaskSet) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-TASK-SET")
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMeasureSequence struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-MEASURE-SEQUENCE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMeasureSequence) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-MEASURE-SEQUENCE")
}

type TxsdFmMeasureSequenceRef struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMeasureSequence

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMeasureSequenceRef function is not nil (ie. was set by outside code), calls it with this TxsdFmMeasureSequenceRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmMeasureSequenceRef instance.
func (me *TxsdFmMeasureSequenceRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMeasureSequenceRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMeasureSequenceRef struct {
	FmMeasureSequenceRefs []*TxsdFmMeasureSequenceRef `xml:"FM-MEASURE-SEQUENCE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMeasureSequenceRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMeasureSequenceRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMeasureSequenceRef instance.
func (me *XsdGoPkgHasElems_FmMeasureSequenceRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMeasureSequenceRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMeasureSequenceRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmMeasureSequenceRefs struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmMeasureSequenceRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMeasureSequenceRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmMeasureSequenceRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmMeasureSequenceRefs instance.
func (me *TxsdFmMeasureSequenceRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMeasureSequenceRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmMeasureSequenceRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMeasureSequenceRefs struct {
	FmMeasureSequenceRefs *TxsdFmMeasureSequenceRefs `xml:"FM-MEASURE-SEQUENCE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMeasureSequenceRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMeasureSequenceRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMeasureSequenceRefs instance.
func (me *XsdGoPkgHasElem_FmMeasureSequenceRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMeasureSequenceRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMeasureSequenceRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmAnalysisdesktopParameters struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmMeasureSequenceRefs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmAnalysisdesktopParameters function is not nil (ie. was set by outside code), calls it with this TxsdFmAnalysisdesktopParameters instance as the single argument. Then calls the Walk() method on 8/13 embed(s) and 0/0 field(s) belonging to this TxsdFmAnalysisdesktopParameters instance.
func (me *TxsdFmAnalysisdesktopParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAnalysisdesktopParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmMeasureSequenceRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAnalysisdesktopParameters struct {
	FmAnalysisdesktopParameters *TxsdFmAnalysisdesktopParameters `xml:"FM-ANALYSISDESKTOP-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAnalysisdesktopParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAnalysisdesktopParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAnalysisdesktopParameters instance.
func (me *XsdGoPkgHasElem_FmAnalysisdesktopParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAnalysisdesktopParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAnalysisdesktopParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOccurrenceTasks struct {
	XsdGoPkgHasElem_RiskPriorityFactor

	XsdGoPkgHasElems_FmActionRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmOccurrenceTasks function is not nil (ie. was set by outside code), calls it with this TxsdFmOccurrenceTasks instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmOccurrenceTasks instance.
func (me *TxsdFmOccurrenceTasks) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOccurrenceTasks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RiskPriorityFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmActionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOccurrenceTasks struct {
	FmOccurrenceTasks *TxsdFmOccurrenceTasks `xml:"FM-OCCURRENCE-TASKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOccurrenceTasks function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOccurrenceTasks instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOccurrenceTasks instance.
func (me *XsdGoPkgHasElem_FmOccurrenceTasks) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOccurrenceTasks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOccurrenceTasks.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmActionRef struct {
	FmActionRef *TxsdFmActionRef `xml:"FM-ACTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActionRef instance.
func (me *XsdGoPkgHasElem_FmActionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaultRef struct {
	FmFaultRef *TxsdFmFaultRef `xml:"FM-FAULT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaultRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaultRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaultRef instance.
func (me *XsdGoPkgHasElem_FmFaultRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaultRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmExternalAction struct {
	XsdGoPkgHasElem_RiskPriorityFactor

	XsdGoPkgHasElem_FmActionRef

	XsdGoPkgHasElem_FmFaultRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmExternalAction function is not nil (ie. was set by outside code), calls it with this TxsdFmExternalAction instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmExternalAction instance.
func (me *TxsdFmExternalAction) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmExternalAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RiskPriorityFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmExternalAction struct {
	FmExternalActions []*TxsdFmExternalAction `xml:"FM-EXTERNAL-ACTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmExternalAction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmExternalAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmExternalAction instance.
func (me *XsdGoPkgHasElems_FmExternalAction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmExternalAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmExternalActions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmExternalActionsOccurrence struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmExternalAction
}

//	If the WalkHandlers.TxsdFmExternalActionsOccurrence function is not nil (ie. was set by outside code), calls it with this TxsdFmExternalActionsOccurrence instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmExternalActionsOccurrence instance.
func (me *TxsdFmExternalActionsOccurrence) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmExternalActionsOccurrence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmExternalAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmExternalActionsOccurrence struct {
	FmExternalActionsOccurrence *TxsdFmExternalActionsOccurrence `xml:"FM-EXTERNAL-ACTIONS-OCCURRENCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmExternalActionsOccurrence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmExternalActionsOccurrence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmExternalActionsOccurrence instance.
func (me *XsdGoPkgHasElem_FmExternalActionsOccurrence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmExternalActionsOccurrence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmExternalActionsOccurrence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDetectionTasks struct {
	FmDetectionTasks *TxsdFmOccurrenceTasks `xml:"FM-DETECTION-TASKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDetectionTasks function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDetectionTasks instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDetectionTasks instance.
func (me *XsdGoPkgHasElem_FmDetectionTasks) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDetectionTasks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDetectionTasks.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmExternalActionsDetect struct {
	FmExternalActionsDetect *TxsdFmExternalActionsOccurrence `xml:"FM-EXTERNAL-ACTIONS-DETECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmExternalActionsDetect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmExternalActionsDetect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmExternalActionsDetect instance.
func (me *XsdGoPkgHasElem_FmExternalActionsDetect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmExternalActionsDetect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmExternalActionsDetect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTaskSet struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmRsmParameters

	XsdGoPkgHasElem_FmAnalysisdesktopParameters

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTaskSet

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmOccurrenceTasks

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmDetectionTasks

	XsdGoPkgHasElem_FmExternalActionsOccurrence

	XsdGoPkgHasElem_FmExternalActionsDetect

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations
}

//	If the WalkHandlers.TxsdFmTaskSet function is not nil (ie. was set by outside code), calls it with this TxsdFmTaskSet instance as the single argument. Then calls the Walk() method on 18/25 embed(s) and 0/0 field(s) belonging to this TxsdFmTaskSet instance.
func (me *TxsdFmTaskSet) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTaskSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmExternalActionsDetect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmRsmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAnalysisdesktopParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOccurrenceTasks.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDetectionTasks.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmExternalActionsOccurrence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTaskSet struct {
	FmTaskSets []*TxsdFmTaskSet `xml:"FM-TASK-SET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTaskSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTaskSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTaskSet instance.
func (me *XsdGoPkgHasElems_FmTaskSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTaskSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTaskSets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTaskSets struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTaskSets

	XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmTaskSet

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Date1

	XsdGoPkgHasElems_FmTaskSet

	XsdGoPkgHasElem_FmCategoryRefs

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTaskSets function is not nil (ie. was set by outside code), calls it with this TxsdFmTaskSets instance as the single argument. Then calls the Walk() method on 15/23 embed(s) and 0/0 field(s) belonging to this TxsdFmTaskSets instance.
func (me *TxsdFmTaskSets) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTaskSets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FmTaskSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCategoryRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTaskSets struct {
	FmTaskSetses []*TxsdFmTaskSets `xml:"FM-TASK-SETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTaskSets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTaskSets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTaskSets instance.
func (me *XsdGoPkgHasElems_FmTaskSets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTaskSets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTaskSetses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTaskHistory struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmTaskSets

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTaskHistory function is not nil (ie. was set by outside code), calls it with this TxsdFmTaskHistory instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmTaskHistory instance.
func (me *TxsdFmTaskHistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTaskHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTaskSets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTaskHistory struct {
	FmTaskHistory *TxsdFmTaskHistory `xml:"FM-TASK-HISTORY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTaskHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTaskHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTaskHistory instance.
func (me *XsdGoPkgHasElem_FmTaskHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTaskHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTaskHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFault struct {
	XsdGoPkgHasElem_FmCauses

	XsdGoPkgHasElem_FmFtaParameters

	XsdGoPkgHasElem_FmIecParameters

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmTaskHistory

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmSignificance

	XsdGoPkgHasElem_FmRsmParameters

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmTaskSetFmTaskSets

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmFaultTypeRef

	XsdGoPkgHasElem_FmClassification

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFault
}

//	If the WalkHandlers.TxsdFmFault function is not nil (ie. was set by outside code), calls it with this TxsdFmFault instance as the single argument. Then calls the Walk() method on 21/29 embed(s) and 0/0 field(s) belonging to this TxsdFmFault instance.
func (me *TxsdFmFault) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmTaskHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSignificance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmRsmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCauses.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFtaParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmIecParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFault struct {
	FmFaults []*TxsdFmFault `xml:"FM-FAULT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFault function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFault instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFault instance.
func (me *XsdGoPkgHasElems_FmFault) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFaults struct {
	XsdGoPkgHasElems_FmFault

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFaults function is not nil (ie. was set by outside code), calls it with this TxsdFmFaults instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFaults instance.
func (me *TxsdFmFaults) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaults; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFault.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaults struct {
	FmFaults *TxsdFmFaults `xml:"FM-FAULTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaults function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaults instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaults instance.
func (me *XsdGoPkgHasElem_FmFaults) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaults; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaults.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingConditionType struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-OPERATING-CONDITION-TYPE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingConditionType) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-OPERATING-CONDITION-TYPE")
}

type TxsdFmOperatingConditionTypeRef struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingConditionType

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink
}

//	If the WalkHandlers.TxsdFmOperatingConditionTypeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingConditionTypeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingConditionTypeRef instance.
func (me *TxsdFmOperatingConditionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingConditionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingConditionTypeRef struct {
	FmOperatingConditionTypeRefs []*TxsdFmOperatingConditionTypeRef `xml:"FM-OPERATING-CONDITION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingConditionTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingConditionTypeRef instance.
func (me *XsdGoPkgHasElems_FmOperatingConditionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditionTypeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOperatingConditionTypeDecomposition struct {
	XsdGoPkgHasElems_FmOperatingConditionTypeRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmOperatingConditionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingConditionTypeDecomposition instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingConditionTypeDecomposition instance.
func (me *TxsdFmOperatingConditionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingConditionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmOperatingConditionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition struct {
	FmOperatingConditionTypeDecomposition *TxsdFmOperatingConditionTypeDecomposition `xml:"FM-OPERATING-CONDITION-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition instance.
func (me *XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingConditionTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOperatingConditionType struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingConditionType

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmOperatingConditionType function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingConditionType instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingConditionType instance.
func (me *TxsdFmOperatingConditionType) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingConditionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingConditionType struct {
	FmOperatingConditionTypes []*TxsdFmOperatingConditionType `xml:"FM-OPERATING-CONDITION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingConditionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingConditionType instance.
func (me *XsdGoPkgHasElems_FmOperatingConditionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditionTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOperatingConditionTypes struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmOperatingConditionType

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmOperatingConditionTypes function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingConditionTypes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingConditionTypes instance.
func (me *TxsdFmOperatingConditionTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingConditionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmOperatingConditionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingConditionTypes struct {
	FmOperatingConditionTypes *TxsdFmOperatingConditionTypes `xml:"FM-OPERATING-CONDITION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingConditionTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingConditionTypes instance.
func (me *XsdGoPkgHasElem_FmOperatingConditionTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingConditionTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ShortLabel struct {
	ShortLabel *TxsdSub `xml:"SHORT-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ShortLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ShortLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ShortLabel instance.
func (me *XsdGoPkgHasElem_ShortLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ShortLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ShortLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMatchingDci struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortLabel

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Label

	XsdGoPkgHasElem_Url
}

//	If the WalkHandlers.TxsdMatchingDci function is not nil (ie. was set by outside code), calls it with this TxsdMatchingDci instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdMatchingDci instance.
func (me *TxsdMatchingDci) Walk() (err error) {
	if fn := WalkHandlers.TxsdMatchingDci; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MatchingDci struct {
	MatchingDcis []*TxsdMatchingDci `xml:"MATCHING-DCI"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MatchingDci function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MatchingDci instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MatchingDci instance.
func (me *XsdGoPkgHasElems_MatchingDci) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MatchingDci; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MatchingDcis {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMatchingDcis struct {
	XsdGoPkgHasElems_MatchingDci

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMatchingDcis function is not nil (ie. was set by outside code), calls it with this TxsdMatchingDcis instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdMatchingDcis instance.
func (me *TxsdMatchingDcis) Walk() (err error) {
	if fn := WalkHandlers.TxsdMatchingDcis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MatchingDci.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MatchingDcis struct {
	MatchingDcis *TxsdMatchingDcis `xml:"MATCHING-DCIS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MatchingDcis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MatchingDcis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MatchingDcis instance.
func (me *XsdGoPkgHasElem_MatchingDcis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MatchingDcis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MatchingDcis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmSeFunctions struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunctionRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSeFunctions function is not nil (ie. was set by outside code), calls it with this TxsdFmSeFunctions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmSeFunctions instance.
func (me *TxsdFmSeFunctions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSeFunctions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFunctionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSeFunctions struct {
	FmSeFunctions *TxsdFmSeFunctions `xml:"FM-SE-FUNCTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSeFunctions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSeFunctions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSeFunctions instance.
func (me *XsdGoPkgHasElem_FmSeFunctions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSeFunctions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSeFunctions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmMachineRef struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMachine

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMachineRef function is not nil (ie. was set by outside code), calls it with this TxsdFmMachineRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmMachineRef instance.
func (me *TxsdFmMachineRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMachineRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMachineRef struct {
	FmMachineRefs []*TxsdFmMachineRef `xml:"FM-MACHINE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMachineRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMachineRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMachineRef instance.
func (me *XsdGoPkgHasElems_FmMachineRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMachineRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMachineRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmMachineRefs struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmMachineRef

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMachineRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmMachineRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmMachineRefs instance.
func (me *TxsdFmMachineRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMachineRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmMachineRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMachineRefs struct {
	FmMachineRefs *TxsdFmMachineRefs `xml:"FM-MACHINE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMachineRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMachineRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMachineRefs instance.
func (me *XsdGoPkgHasElem_FmMachineRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMachineRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMachineRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmSeCharacteristics struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmCharacteristicRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSeCharacteristics function is not nil (ie. was set by outside code), calls it with this TxsdFmSeCharacteristics instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmSeCharacteristics instance.
func (me *TxsdFmSeCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSeCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmCharacteristicRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSeCharacteristics struct {
	FmSeCharacteristics *TxsdFmSeCharacteristics `xml:"FM-SE-CHARACTERISTICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSeCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSeCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSeCharacteristics instance.
func (me *XsdGoPkgHasElem_FmSeCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSeCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSeCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PartNumber struct {
	PartNumber *TxsdSub `xml:"PART-NUMBER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PartNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PartNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PartNumber instance.
func (me *XsdGoPkgHasElem_PartNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PartNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PartNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSeDecomposition struct {
	FmSeDecomposition *TxsdFmStructureElementRefs `xml:"FM-SE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSeDecomposition instance.
func (me *XsdGoPkgHasElem_FmSeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmModuleRef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_External

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmModuleRef function is not nil (ie. was set by outside code), calls it with this TxsdFmModuleRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmModuleRef instance.
func (me *TxsdFmModuleRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmModuleRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmModuleRef struct {
	FmModuleRef *TxsdFmModuleRef `xml:"FM-MODULE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmModuleRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmModuleRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmModuleRef instance.
func (me *XsdGoPkgHasElem_FmModuleRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmModuleRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmModuleRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmStructureElement struct {
	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmSeFunctions

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmMachineRefs

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmFtaParameters

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_FmSeCharacteristics

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_PartNumber

	XsdGoPkgHasElem_FmSeDecomposition

	XsdGoPkgHasElem_FmModuleRef

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructureElement

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmStructureElement function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureElement instance as the single argument. Then calls the Walk() method on 21/28 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureElement instance.
func (me *TxsdFmStructureElement) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFtaParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSeCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PartNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmModuleRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSeFunctions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmMachineRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureElement struct {
	FmStructureElements []*TxsdFmStructureElement `xml:"FM-STRUCTURE-ELEMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureElement instance.
func (me *XsdGoPkgHasElems_FmStructureElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureElements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmStructureElements struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmStructureElement
}

//	If the WalkHandlers.TxsdFmStructureElements function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureElements instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureElements instance.
func (me *TxsdFmStructureElements) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmStructureElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureElements struct {
	FmStructureElements *TxsdFmStructureElements `xml:"FM-STRUCTURE-ELEMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureElements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureElements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureElements instance.
func (me *XsdGoPkgHasElem_FmStructureElements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureElements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFormSheet struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FORM-SHEET"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFormSheet) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FORM-SHEET")
}

type TxsdTexMath struct {
	xml.XsdGoPkgHasAttr_Space

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_L10

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTexMath function is not nil (ie. was set by outside code), calls it with this TxsdTexMath instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdTexMath instance.
func (me *TxsdTexMath) Walk() (err error) {
	if fn := WalkHandlers.TxsdTexMath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TexMath struct {
	TexMath *TxsdTexMath `xml:"TEX-MATH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TexMath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TexMath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TexMath instance.
func (me *XsdGoPkgHasElem_TexMath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TexMath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TexMath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GenericMath struct {
	GenericMath *TxsdRevisionLabel `xml:"GENERIC-MATH"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GenericMath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GenericMath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_GenericMath instance.
func (me *XsdGoPkgHasElem_GenericMath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GenericMath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GenericMath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CCode struct {
	CCode *TxsdRevisionLabel `xml:"C-CODE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CCode instance.
func (me *XsdGoPkgHasElem_CCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Formula struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FORMULA"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Formula) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FORMULA")
}

type TxsdFormulaCaption struct {
	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Formula

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFormulaCaption function is not nil (ie. was set by outside code), calls it with this TxsdFormulaCaption instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TxsdFormulaCaption instance.
func (me *TxsdFormulaCaption) Walk() (err error) {
	if fn := WalkHandlers.TxsdFormulaCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormulaCaption struct {
	FormulaCaption *TxsdFormulaCaption `xml:"FORMULA-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormulaCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormulaCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FormulaCaption instance.
func (me *XsdGoPkgHasElem_FormulaCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormulaCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FormulaCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFormula struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FormulaCaption

	XsdGoPkgHasElem_Verbatim

	XsdGoPkgHasElem_CCode

	XsdGoPkgHasElem_GenericMath

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_LGraphic

	XsdGoPkgHasElem_Map

	XsdGoPkgHasElem_TexMath
}

//	If the WalkHandlers.TxsdFormula function is not nil (ie. was set by outside code), calls it with this TxsdFormula instance as the single argument. Then calls the Walk() method on 7/13 embed(s) and 0/0 field(s) belonging to this TxsdFormula instance.
func (me *TxsdFormula) Walk() (err error) {
	if fn := WalkHandlers.TxsdFormula; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LGraphic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Map.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TexMath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GenericMath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FormulaCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Formula struct {
	Formulas []*TxsdFormula `xml:"FORMULA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Formula function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Formula instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Formula instance.
func (me *XsdGoPkgHasElems_Formula) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Formula; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Formulas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Def struct {
	Def *TxsdCond `xml:"DEF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Def function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Def instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Def instance.
func (me *XsdGoPkgHasElem_Def) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Def; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Def.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_DefItem struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "DEF-ITEM"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_DefItem) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("DEF-ITEM")
}

type TxsdDefItem struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Def

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_DefItem

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdDefItem function is not nil (ie. was set by outside code), calls it with this TxsdDefItem instance as the single argument. Then calls the Walk() method on 3/12 embed(s) and 0/0 field(s) belonging to this TxsdDefItem instance.
func (me *TxsdDefItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdDefItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Def.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DefItem struct {
	DefItems []*TxsdDefItem `xml:"DEF-ITEM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DefItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DefItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DefItem instance.
func (me *XsdGoPkgHasElems_DefItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DefItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DefItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDefList struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_DefItem

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdDefList function is not nil (ie. was set by outside code), calls it with this TxsdDefList instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdDefList instance.
func (me *TxsdDefList) Walk() (err error) {
	if fn := WalkHandlers.TxsdDefList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DefItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DefList struct {
	DefLists []*TxsdDefList `xml:"DEF-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DefList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DefList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DefList instance.
func (me *XsdGoPkgHasElems_DefList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DefList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DefLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Figure struct {
	Figures []*TxsdFigure `xml:"FIGURE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Figure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Figure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Figure instance.
func (me *XsdGoPkgHasElems_Figure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Figure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Figures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNoteNoteType xsdt.Nmtoken

//	Since TxsdNoteNoteType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdNoteNoteType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdNoteNoteType is just a simple String type, this merely returns the current string value.
func (me TxsdNoteNoteType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdNoteNoteType is "CAUTION".
func (me TxsdNoteNoteType) IsCaution() bool { return me.String() == "CAUTION" }

//	Returns true if the value of this enumerated TxsdNoteNoteType is "HINT".
func (me TxsdNoteNoteType) IsHint() bool { return me.String() == "HINT" }

//	Returns true if the value of this enumerated TxsdNoteNoteType is "OTHER".
func (me TxsdNoteNoteType) IsOther() bool { return me.String() == "OTHER" }

//	Returns true if the value of this enumerated TxsdNoteNoteType is "INSTRUCTION".
func (me TxsdNoteNoteType) IsInstruction() bool { return me.String() == "INSTRUCTION" }

//	This convenience method just performs a simple type conversion to TxsdNoteNoteType's alias type xsdt.Nmtoken.
func (me TxsdNoteNoteType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdNoteNoteType is "TIP".
func (me TxsdNoteNoteType) IsTip() bool { return me.String() == "TIP" }

//	Returns true if the value of this enumerated TxsdNoteNoteType is "EXERCISE".
func (me TxsdNoteNoteType) IsExercise() bool { return me.String() == "EXERCISE" }

type XsdGoPkgHasAttr_NoteType_TxsdNoteNoteType_Hint struct {
	NoteType TxsdNoteNoteType `xml:"NOTE-TYPE,attr"`
}

//	Returns the default value for NoteType -- "HINT"
func (me XsdGoPkgHasAttr_NoteType_TxsdNoteNoteType_Hint) NoteTypeDefault() TxsdNoteNoteType {
	return TxsdNoteNoteType("HINT")
}

type TxsdNote struct {
	XsdGoPkgHasAttr_UserDefinedType_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_NoteType_TxsdNoteNoteType_Hint

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Label

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdNote function is not nil (ie. was set by outside code), calls it with this TxsdNote instance as the single argument. Then calls the Walk() method on 2/10 embed(s) and 0/0 field(s) belonging to this TxsdNote instance.
func (me *TxsdNote) Walk() (err error) {
	if fn := WalkHandlers.TxsdNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Note struct {
	Notes []*TxsdNote `xml:"NOTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Note instance.
func (me *XsdGoPkgHasElems_Note) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Notes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ItemLabel struct {
	ItemLabel *TxsdMsrQueryResultText `xml:"ITEM-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ItemLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ItemLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ItemLabel instance.
func (me *XsdGoPkgHasElem_ItemLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ItemLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ItemLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLabeledItem struct {
	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_List

	XsdGoPkgHasElem_ItemLabel

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_
}

//	If the WalkHandlers.TxsdLabeledItem function is not nil (ie. was set by outside code), calls it with this TxsdLabeledItem instance as the single argument. Then calls the Walk() method on 7/16 embed(s) and 0/0 field(s) belonging to this TxsdLabeledItem instance.
func (me *TxsdLabeledItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdLabeledItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ItemLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LabeledItem struct {
	LabeledItems []*TxsdLabeledItem `xml:"LABELED-ITEM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabeledItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabeledItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabeledItem instance.
func (me *XsdGoPkgHasElems_LabeledItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LabeledItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LabeledItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndentSampleItemLabelPos xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdIndentSampleItemLabelPos is "NO-NEWLINE".
func (me TxsdIndentSampleItemLabelPos) IsNoNewline() bool { return me.String() == "NO-NEWLINE" }

//	Returns true if the value of this enumerated TxsdIndentSampleItemLabelPos is "NEWLINE".
func (me TxsdIndentSampleItemLabelPos) IsNewline() bool { return me.String() == "NEWLINE" }

//	Returns true if the value of this enumerated TxsdIndentSampleItemLabelPos is "NEWLINE-IF-NECESSARY".
func (me TxsdIndentSampleItemLabelPos) IsNewlineIfNecessary() bool {
	return me.String() == "NEWLINE-IF-NECESSARY"
}

//	Since TxsdIndentSampleItemLabelPos is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIndentSampleItemLabelPos) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdIndentSampleItemLabelPos is just a simple String type, this merely returns the current string value.
func (me TxsdIndentSampleItemLabelPos) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdIndentSampleItemLabelPos's alias type xsdt.Nmtoken.
func (me TxsdIndentSampleItemLabelPos) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_ItemLabelPos_TxsdIndentSampleItemLabelPos_NoNewline struct {
	ItemLabelPos TxsdIndentSampleItemLabelPos `xml:"ITEM-LABEL-POS,attr"`
}

//	Returns the default value for ItemLabelPos -- "NO-NEWLINE"
func (me XsdGoPkgHasAttr_ItemLabelPos_TxsdIndentSampleItemLabelPos_NoNewline) ItemLabelPosDefault() TxsdIndentSampleItemLabelPos {
	return TxsdIndentSampleItemLabelPos("NO-NEWLINE")
}

type TxsdIndentSample struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_L2

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_ItemLabelPos_TxsdIndentSampleItemLabelPos_NoNewline

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdIndentSample function is not nil (ie. was set by outside code), calls it with this TxsdIndentSample instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdIndentSample instance.
func (me *TxsdIndentSample) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndentSample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_L2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IndentSample struct {
	IndentSample *TxsdIndentSample `xml:"INDENT-SAMPLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndentSample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndentSample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IndentSample instance.
func (me *XsdGoPkgHasElem_IndentSample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndentSample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndentSample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdLabeledList struct {
	XsdGoPkgHasElems_LabeledItem

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_IndentSample
}

//	If the WalkHandlers.TxsdLabeledList function is not nil (ie. was set by outside code), calls it with this TxsdLabeledList instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdLabeledList instance.
func (me *TxsdLabeledList) Walk() (err error) {
	if fn := WalkHandlers.TxsdLabeledList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IndentSample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LabeledList struct {
	LabeledLists []*TxsdLabeledList `xml:"LABELED-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LabeledList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LabeledList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LabeledList instance.
func (me *XsdGoPkgHasElems_LabeledList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LabeledList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LabeledLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdItem struct {
	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdItem function is not nil (ie. was set by outside code), calls it with this TxsdItem instance as the single argument. Then calls the Walk() method on 7/14 embed(s) and 0/0 field(s) belonging to this TxsdItem instance.
func (me *TxsdItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Item struct {
	Items []*TxsdItem `xml:"ITEM"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Item function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Item instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Item instance.
func (me *XsdGoPkgHasElems_Item) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Item; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Items {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdListType xsdt.Nmtoken

//	Since TxsdListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdListType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdListType is just a simple String type, this merely returns the current string value.
func (me TxsdListType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdListType's alias type xsdt.Nmtoken.
func (me TxsdListType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdListType is "UNNUMBER".
func (me TxsdListType) IsUnnumber() bool { return me.String() == "UNNUMBER" }

//	Returns true if the value of this enumerated TxsdListType is "NUMBER".
func (me TxsdListType) IsNumber() bool { return me.String() == "NUMBER" }

type XsdGoPkgHasAttr_Type_TxsdListType_Unnumber struct {
	Type TxsdListType `xml:"TYPE,attr"`
}

//	Returns the default value for Type -- "UNNUMBER"
func (me XsdGoPkgHasAttr_Type_TxsdListType_Unnumber) TypeDefault() TxsdListType {
	return TxsdListType("UNNUMBER")
}

type TxsdList struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Type_TxsdListType_Unnumber

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Item

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdList function is not nil (ie. was set by outside code), calls it with this TxsdList instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdList instance.
func (me *TxsdList) Walk() (err error) {
	if fn := WalkHandlers.TxsdList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Item.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_List struct {
	Lists []*TxsdList `xml:"LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_List function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_List instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_List instance.
func (me *XsdGoPkgHasElems_List) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_List; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Table struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "TABLE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Table) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("TABLE")
}

type TxsdTableCaption struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Table

	XsdGoPkgHasElem_LongName
}

//	If the WalkHandlers.TxsdTableCaption function is not nil (ie. was set by outside code), calls it with this TxsdTableCaption instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TxsdTableCaption instance.
func (me *TxsdTableCaption) Walk() (err error) {
	if fn := WalkHandlers.TxsdTableCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TableCaption struct {
	TableCaption *TxsdTableCaption `xml:"TABLE-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TableCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TableCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TableCaption instance.
func (me *XsdGoPkgHasElem_TableCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TableCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TableCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Cols_XsdtNmtoken_ struct {
	Cols xsdt.Nmtoken `xml:"COLS,attr"`
}

type TalignType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TalignType's alias type xsdt.Nmtoken.
func (me TalignType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TalignType is "CHAR".
func (me TalignType) IsChar() bool { return me.String() == "CHAR" }

//	Returns true if the value of this enumerated TalignType is "JUSTIFY".
func (me TalignType) IsJustify() bool { return me.String() == "JUSTIFY" }

//	Returns true if the value of this enumerated TalignType is "RIGHT".
func (me TalignType) IsRight() bool { return me.String() == "RIGHT" }

//	Returns true if the value of this enumerated TalignType is "CENTER".
func (me TalignType) IsCenter() bool { return me.String() == "CENTER" }

//	Returns true if the value of this enumerated TalignType is "LEFT".
func (me TalignType) IsLeft() bool { return me.String() == "LEFT" }

//	Since TalignType is just a simple String type, this merely sets the current value from the specified string.
func (me *TalignType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TalignType is just a simple String type, this merely returns the current string value.
func (me TalignType) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_Align_TalignType_Left struct {
	Align TalignType `xml:"ALIGN,attr"`
}

//	Returns the default value for Align -- "LEFT"
func (me XsdGoPkgHasAttr_Align_TalignType_Left) AlignDefault() TalignType { return TalignType("LEFT") }

type XsdGoPkgHasAttr_Char_XsdtAnySimpleType_ struct {
	Char xsdt.AnySimpleType `xml:"CHAR,attr"`
}

type XsdGoPkgHasAttr_Charoff_XsdtNmtoken_ struct {
	Charoff xsdt.Nmtoken `xml:"CHAROFF,attr"`
}

type XsdGoPkgHasAttr_Colnum_XsdtNmtoken_ struct {
	Colnum xsdt.Nmtoken `xml:"COLNUM,attr"`
}

type XsdGoPkgHasAttr_Align_TalignType_ struct {
	Align TalignType `xml:"ALIGN,attr"`
}

type XsdGoPkgHasAttr_Colsep_XsdtNmtoken_ struct {
	Colsep xsdt.Nmtoken `xml:"COLSEP,attr"`
}

type XsdGoPkgHasAttr_Colname_XsdtNmtoken_ struct {
	Colname xsdt.Nmtoken `xml:"COLNAME,attr"`
}

type XsdGoPkgHasAttr_Colwidth_XsdtAnySimpleType_ struct {
	Colwidth xsdt.AnySimpleType `xml:"COLWIDTH,attr"`
}

type XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_ struct {
	Rowsep xsdt.Nmtoken `xml:"ROWSEP,attr"`
}

type TxsdColspec struct {
	XsdGoPkgHasAttr_Align_TalignType_

	XsdGoPkgHasAttr_Colsep_XsdtNmtoken_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Charoff_XsdtNmtoken_

	XsdGoPkgHasAttr_Colnum_XsdtNmtoken_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Char_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Colname_XsdtNmtoken_

	XsdGoPkgHasAttr_Colwidth_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdColspec function is not nil (ie. was set by outside code), calls it with this TxsdColspec instance as the single argument. Then calls the Walk() method on 0/13 embed(s) and 0/0 field(s) belonging to this TxsdColspec instance.
func (me *TxsdColspec) Walk() (err error) {
	if fn := WalkHandlers.TxsdColspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Colspec struct {
	Colspecs []*TxsdColspec `xml:"COLSPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Colspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Colspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Colspec instance.
func (me *XsdGoPkgHasElems_Colspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Colspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Colspecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TvalignType xsdt.Nmtoken

//	Returns true if the value of this enumerated TvalignType is "BOTTOM".
func (me TvalignType) IsBottom() bool { return me.String() == "BOTTOM" }

//	Returns true if the value of this enumerated TvalignType is "TOP".
func (me TvalignType) IsTop() bool { return me.String() == "TOP" }

//	Returns true if the value of this enumerated TvalignType is "MIDDLE".
func (me TvalignType) IsMiddle() bool { return me.String() == "MIDDLE" }

//	Since TvalignType is just a simple String type, this merely sets the current value from the specified string.
func (me *TvalignType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TvalignType is just a simple String type, this merely returns the current string value.
func (me TvalignType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TvalignType's alias type xsdt.Nmtoken.
func (me TvalignType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Valign_TvalignType_Top struct {
	Valign TvalignType `xml:"VALIGN,attr"`
}

//	Returns the default value for Valign -- "TOP"
func (me XsdGoPkgHasAttr_Valign_TvalignType_Top) ValignDefault() TvalignType {
	return TvalignType("TOP")
}

type XsdGoPkgHasAttr_Spanname_XsdtNmtoken_ struct {
	Spanname xsdt.Nmtoken `xml:"SPANNAME,attr"`
}

type XsdGoPkgHasAttr_Rotate_XsdtNmtoken_0 struct {
	Rotate xsdt.Nmtoken `xml:"ROTATE,attr"`
}

//	Returns the default value for Rotate -- "0"
func (me XsdGoPkgHasAttr_Rotate_XsdtNmtoken_0) RotateDefault() xsdt.Nmtoken { return xsdt.Nmtoken("0") }

type XsdGoPkgHasAttr_Namest_XsdtNmtoken_ struct {
	Namest xsdt.Nmtoken `xml:"NAMEST,attr"`
}

type XsdGoPkgHasAttr_Nameend_XsdtNmtoken_ struct {
	Nameend xsdt.Nmtoken `xml:"NAMEEND,attr"`
}

type XsdGoPkgHasAttr_Morerows_XsdtNmtoken_0 struct {
	Morerows xsdt.Nmtoken `xml:"MOREROWS,attr"`
}

//	Returns the default value for Morerows -- "0"
func (me XsdGoPkgHasAttr_Morerows_XsdtNmtoken_0) MorerowsDefault() xsdt.Nmtoken {
	return xsdt.Nmtoken("0")
}

type TxsdEntry struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Rotate_XsdtNmtoken_0

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Namest_XsdtNmtoken_

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Nameend_XsdtNmtoken_

	XsdGoPkgHasAttr_Morerows_XsdtNmtoken_0

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Valign_TvalignType_Top

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasAttr_Colname_XsdtNmtoken_

	XsdGoPkgHasAttr_Char_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_List

	XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_

	XsdGoPkgHasAttr_Align_TalignType_

	XsdGoPkgHasAttr_Colsep_XsdtNmtoken_

	XsdGoPkgHasAttr_Charoff_XsdtNmtoken_

	XsdGoPkgHasAttr_Spanname_XsdtNmtoken_

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_Figure
}

//	If the WalkHandlers.TxsdEntry function is not nil (ie. was set by outside code), calls it with this TxsdEntry instance as the single argument. Then calls the Walk() method on 8/25 embed(s) and 0/0 field(s) belonging to this TxsdEntry instance.
func (me *TxsdEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Entry struct {
	Entries []*TxsdEntry `xml:"ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Entry instance.
func (me *XsdGoPkgHasElems_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Entries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRow struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Valign_TvalignType_Top

	XsdGoPkgHasElems_Entry

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdRow function is not nil (ie. was set by outside code), calls it with this TxsdRow instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdRow instance.
func (me *TxsdRow) Walk() (err error) {
	if fn := WalkHandlers.TxsdRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Row struct {
	Rows []*TxsdRow `xml:"ROW"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Row function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Row instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Row instance.
func (me *XsdGoPkgHasElems_Row) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Row; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Valign_TvalignType_Bottom struct {
	Valign TvalignType `xml:"VALIGN,attr"`
}

//	Returns the default value for Valign -- "BOTTOM"
func (me XsdGoPkgHasAttr_Valign_TvalignType_Bottom) ValignDefault() TvalignType {
	return TvalignType("BOTTOM")
}

type TxsdThead struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Valign_TvalignType_Bottom

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdThead function is not nil (ie. was set by outside code), calls it with this TxsdThead instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdThead instance.
func (me *TxsdThead) Walk() (err error) {
	if fn := WalkHandlers.TxsdThead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Row.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Thead struct {
	Thead *TxsdThead `xml:"THEAD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Thead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Thead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Thead instance.
func (me *XsdGoPkgHasElem_Thead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Thead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Thead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTfoot struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Valign_TvalignType_Top

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTfoot function is not nil (ie. was set by outside code), calls it with this TxsdTfoot instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdTfoot instance.
func (me *TxsdTfoot) Walk() (err error) {
	if fn := WalkHandlers.TxsdTfoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Row.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tfoot struct {
	Tfoot *TxsdTfoot `xml:"TFOOT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tfoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tfoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tfoot instance.
func (me *XsdGoPkgHasElem_Tfoot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tfoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tfoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdTbody struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Valign_TvalignType_Top

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Row

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTbody function is not nil (ie. was set by outside code), calls it with this TxsdTbody instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdTbody instance.
func (me *TxsdTbody) Walk() (err error) {
	if fn := WalkHandlers.TxsdTbody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Row.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tbody struct {
	Tbody *TxsdTbody `xml:"TBODY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tbody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tbody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tbody instance.
func (me *XsdGoPkgHasElem_Tbody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tbody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Align_TalignType_Center struct {
	Align TalignType `xml:"ALIGN,attr"`
}

//	Returns the default value for Align -- "CENTER"
func (me XsdGoPkgHasAttr_Align_TalignType_Center) AlignDefault() TalignType {
	return TalignType("CENTER")
}

type TxsdSpanspec struct {
	XsdGoPkgHasAttr_Colsep_XsdtNmtoken_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Nameend_XsdtNmtoken_

	XsdGoPkgHasAttr_Namest_XsdtNmtoken_

	XsdGoPkgHasAttr_Align_TalignType_Center

	XsdGoPkgHasAttr_Char_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Charoff_XsdtNmtoken_

	XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_

	XsdGoPkgHasAttr_Spanname_XsdtNmtoken_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSpanspec function is not nil (ie. was set by outside code), calls it with this TxsdSpanspec instance as the single argument. Then calls the Walk() method on 0/13 embed(s) and 0/0 field(s) belonging to this TxsdSpanspec instance.
func (me *TxsdSpanspec) Walk() (err error) {
	if fn := WalkHandlers.TxsdSpanspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Spanspec struct {
	Spanspecs []*TxsdSpanspec `xml:"SPANSPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Spanspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Spanspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Spanspec instance.
func (me *XsdGoPkgHasElems_Spanspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Spanspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Spanspecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Tgroupstyle_XsdtNmtoken_ struct {
	Tgroupstyle xsdt.Nmtoken `xml:"TGROUPSTYLE,attr"`
}

type XsdGoPkgHasAttr_Charoff_XsdtNmtoken_50 struct {
	Charoff xsdt.Nmtoken `xml:"CHAROFF,attr"`
}

//	Returns the default value for Charoff -- "50"
func (me XsdGoPkgHasAttr_Charoff_XsdtNmtoken_50) CharoffDefault() xsdt.Nmtoken {
	return xsdt.Nmtoken("50")
}

type TxsdTgroup struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Char_XsdtAnySimpleType_

	XsdGoPkgHasElems_Colspec

	XsdGoPkgHasElem_Thead

	XsdGoPkgHasElem_Tfoot

	XsdGoPkgHasElem_Tbody

	XsdGoPkgHasElems_Spanspec

	XsdGoPkgHasAttr_Tgroupstyle_XsdtNmtoken_

	XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Charoff_XsdtNmtoken_50

	XsdGoPkgHasAttr_Colsep_XsdtNmtoken_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Cols_XsdtNmtoken_

	XsdGoPkgHasAttr_Align_TalignType_Left
}

//	If the WalkHandlers.TxsdTgroup function is not nil (ie. was set by outside code), calls it with this TxsdTgroup instance as the single argument. Then calls the Walk() method on 5/17 embed(s) and 0/0 field(s) belonging to this TxsdTgroup instance.
func (me *TxsdTgroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdTgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Spanspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Thead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tfoot.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Tbody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tgroup struct {
	Tgroups []*TxsdTgroup `xml:"TGROUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tgroup instance.
func (me *XsdGoPkgHasElems_Tgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tgroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pgwide_XsdtNmtoken_ struct {
	Pgwide xsdt.Nmtoken `xml:"PGWIDE,attr"`
}

type TxsdTableOrient xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdTableOrient is "PORT".
func (me TxsdTableOrient) IsPort() bool { return me.String() == "PORT" }

//	Since TxsdTableOrient is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTableOrient) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdTableOrient is just a simple String type, this merely returns the current string value.
func (me TxsdTableOrient) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdTableOrient's alias type xsdt.Nmtoken.
func (me TxsdTableOrient) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdTableOrient is "LAND".
func (me TxsdTableOrient) IsLand() bool { return me.String() == "LAND" }

type XsdGoPkgHasAttr_Orient_TxsdTableOrient_ struct {
	Orient TxsdTableOrient `xml:"ORIENT,attr"`
}

type XsdGoPkgHasAttr_Tabstyle_XsdtNmtoken_ struct {
	Tabstyle xsdt.Nmtoken `xml:"TABSTYLE,attr"`
}

type XsdGoPkgHasAttr_Tocentry_XsdtNmtoken_1 struct {
	Tocentry xsdt.Nmtoken `xml:"TOCENTRY,attr"`
}

//	Returns the default value for Tocentry -- "1"
func (me XsdGoPkgHasAttr_Tocentry_XsdtNmtoken_1) TocentryDefault() xsdt.Nmtoken {
	return xsdt.Nmtoken("1")
}

type XsdGoPkgHasAttr_Shortentry_XsdtNmtoken_ struct {
	Shortentry xsdt.Nmtoken `xml:"SHORTENTRY,attr"`
}

type TxsdTable struct {
	XsdGoPkgHasAttr_Tocentry_XsdtNmtoken_1

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Rowsep_XsdtNmtoken_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Tabstyle_XsdtNmtoken_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Colsep_XsdtNmtoken_

	XsdGoPkgHasAttr_Shortentry_XsdtNmtoken_

	XsdGoPkgHasElem_TableCaption

	XsdGoPkgHasElems_Tgroup

	XsdGoPkgHasAttr_Frame_TframeType_

	XsdGoPkgHasAttr_Pgwide_XsdtNmtoken_

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Orient_TxsdTableOrient_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Float_TfloatType_
}

//	If the WalkHandlers.TxsdTable function is not nil (ie. was set by outside code), calls it with this TxsdTable instance as the single argument. Then calls the Walk() method on 2/18 embed(s) and 0/0 field(s) belonging to this TxsdTable instance.
func (me *TxsdTable) Walk() (err error) {
	if fn := WalkHandlers.TxsdTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_TableCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Tgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Table struct {
	Tables []*TxsdTable `xml:"TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Table function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Table instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Table instance.
func (me *XsdGoPkgHasElems_Table) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Table; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryResultP2 struct {
	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryResultP2 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryResultP2 instance as the single argument. Then calls the Walk() method on 9/14 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryResultP2 instance.
func (me *TxsdMsrQueryResultP2) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryResultP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryResultP2 struct {
	MsrQueryResultP2 *TxsdMsrQueryResultP2 `xml:"MSR-QUERY-RESULT-P-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryResultP2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryResultP2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryResultP2 instance.
func (me *XsdGoPkgHasElem_MsrQueryResultP2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryResultP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryResultP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryP2 struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_MsrQueryProps

	XsdGoPkgHasElem_MsrQueryResultP2

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryP2 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryP2 instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryP2 instance.
func (me *TxsdMsrQueryP2) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrQueryResultP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryP2 struct {
	MsrQueryP2s []*TxsdMsrQueryP2 `xml:"MSR-QUERY-P-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryP2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryP2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryP2 instance.
func (me *XsdGoPkgHasElems_MsrQueryP2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryP2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Topic struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "TOPIC"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Topic) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("TOPIC")
}

type TxsdTopic2 struct {
	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_List

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_P

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Topic

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasElems_MsrQueryP2

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTopic2 function is not nil (ie. was set by outside code), calls it with this TxsdTopic2 instance as the single argument. Then calls the Walk() method on 12/21 embed(s) and 0/0 field(s) belonging to this TxsdTopic2 instance.
func (me *TxsdTopic2) Walk() (err error) {
	if fn := WalkHandlers.TxsdTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Topic2 struct {
	Topic2s []*TxsdTopic2 `xml:"TOPIC-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Topic2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Topic2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Topic2 instance.
func (me *XsdGoPkgHasElems_Topic2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Topic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Topic2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryResultTopic2 struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Topic2

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryResultTopic2 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryResultTopic2 instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryResultTopic2 instance.
func (me *TxsdMsrQueryResultTopic2) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryResultTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Topic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryResultTopic2 struct {
	MsrQueryResultTopic2 *TxsdMsrQueryResultTopic2 `xml:"MSR-QUERY-RESULT-TOPIC-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryResultTopic2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryResultTopic2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryResultTopic2 instance.
func (me *XsdGoPkgHasElem_MsrQueryResultTopic2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryResultTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryResultTopic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryTopic2 struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_MsrQueryProps

	XsdGoPkgHasElem_MsrQueryResultTopic2

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryTopic2 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryTopic2 instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryTopic2 instance.
func (me *TxsdMsrQueryTopic2) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryResultTopic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryTopic2 struct {
	MsrQueryTopic2s []*TxsdMsrQueryTopic2 `xml:"MSR-QUERY-TOPIC-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryTopic2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryTopic2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryTopic2 instance.
func (me *XsdGoPkgHasElems_MsrQueryTopic2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryTopic2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFormSheetPresentation struct {
	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_MsrQueryP2

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_List

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_MsrQueryTopic2

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Topic2
}

//	If the WalkHandlers.TxsdFmFormSheetPresentation function is not nil (ie. was set by outside code), calls it with this TxsdFmFormSheetPresentation instance as the single argument. Then calls the Walk() method on 13/18 embed(s) and 0/0 field(s) belonging to this TxsdFmFormSheetPresentation instance.
func (me *TxsdFmFormSheetPresentation) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFormSheetPresentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryTopic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Topic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFormSheetPresentation struct {
	FmFormSheetPresentation *TxsdFmFormSheetPresentation `xml:"FM-FORM-SHEET-PRESENTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFormSheetPresentation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFormSheetPresentation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFormSheetPresentation instance.
func (me *XsdGoPkgHasElem_FmFormSheetPresentation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFormSheetPresentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFormSheetPresentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFormSheetPresentationVersion struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FORM-SHEET-PRESENTATION-VERSION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFormSheetPresentationVersion) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FORM-SHEET-PRESENTATION-VERSION")
}

type TxsdFmFormSheetPresentationVersion struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmFormSheetPresentation

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFormSheetPresentationVersion

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFormSheetPresentationVersion function is not nil (ie. was set by outside code), calls it with this TxsdFmFormSheetPresentationVersion instance as the single argument. Then calls the Walk() method on 10/17 embed(s) and 0/0 field(s) belonging to this TxsdFmFormSheetPresentationVersion instance.
func (me *TxsdFmFormSheetPresentationVersion) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFormSheetPresentationVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormSheetPresentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFormSheetPresentationVersion struct {
	FmFormSheetPresentationVersions []*TxsdFmFormSheetPresentationVersion `xml:"FM-FORM-SHEET-PRESENTATION-VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFormSheetPresentationVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFormSheetPresentationVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFormSheetPresentationVersion instance.
func (me *XsdGoPkgHasElems_FmFormSheetPresentationVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFormSheetPresentationVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFormSheetPresentationVersions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFormSheetPresentationVersions struct {
	XsdGoPkgHasElems_FmFormSheetPresentationVersion

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFormSheetPresentationVersions function is not nil (ie. was set by outside code), calls it with this TxsdFmFormSheetPresentationVersions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFormSheetPresentationVersions instance.
func (me *TxsdFmFormSheetPresentationVersions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFormSheetPresentationVersions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFormSheetPresentationVersion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFormSheetPresentationVersions struct {
	FmFormSheetPresentationVersions *TxsdFmFormSheetPresentationVersions `xml:"FM-FORM-SHEET-PRESENTATION-VERSIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFormSheetPresentationVersions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFormSheetPresentationVersions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFormSheetPresentationVersions instance.
func (me *XsdGoPkgHasElem_FmFormSheetPresentationVersions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFormSheetPresentationVersions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFormSheetPresentationVersions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFormSheet struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFormSheet

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_FmFormSheetPresentation

	XsdGoPkgHasElem_FmFormSheetPresentationVersions

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmStructureElementRefs

	XsdGoPkgHasElem_FmFormHeader

	XsdGoPkgHasElem_MiscData
}

//	If the WalkHandlers.TxsdFmFormSheet function is not nil (ie. was set by outside code), calls it with this TxsdFmFormSheet instance as the single argument. Then calls the Walk() method on 14/21 embed(s) and 0/0 field(s) belonging to this TxsdFmFormSheet instance.
func (me *TxsdFmFormSheet) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFormSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormSheetPresentation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormSheetPresentationVersions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFormSheet struct {
	FmFormSheets []*TxsdFmFormSheet `xml:"FM-FORM-SHEET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFormSheet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFormSheet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFormSheet instance.
func (me *XsdGoPkgHasElems_FmFormSheet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFormSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFormSheets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFormSheets struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFormSheet

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFormSheets function is not nil (ie. was set by outside code), calls it with this TxsdFmFormSheets instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFormSheets instance.
func (me *TxsdFmFormSheets) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFormSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFormSheet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFormSheets struct {
	FmFormSheets *TxsdFmFormSheets `xml:"FM-FORM-SHEETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFormSheets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFormSheets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFormSheets instance.
func (me *XsdGoPkgHasElem_FmFormSheets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFormSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFormSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmNetConnectionSource struct {
	XsdGoPkgHasElem_FmXref

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmNetConnectionSource function is not nil (ie. was set by outside code), calls it with this TxsdFmNetConnectionSource instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmNetConnectionSource instance.
func (me *TxsdFmNetConnectionSource) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmNetConnectionSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmNetConnectionSource struct {
	FmNetConnectionSource *TxsdFmNetConnectionSource `xml:"FM-NET-CONNECTION-SOURCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmNetConnectionSource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmNetConnectionSource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmNetConnectionSource instance.
func (me *XsdGoPkgHasElem_FmNetConnectionSource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmNetConnectionSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmNetConnectionSource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmNetConnectionTarget struct {
	FmNetConnectionTarget *TxsdFmNetConnectionSource `xml:"FM-NET-CONNECTION-TARGET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmNetConnectionTarget function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmNetConnectionTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmNetConnectionTarget instance.
func (me *XsdGoPkgHasElem_FmNetConnectionTarget) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmNetConnectionTarget; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmNetConnectionTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmNetConnection struct {
	XsdGoPkgHasElem_FmNetConnectionSource

	XsdGoPkgHasElem_FmNetConnectionTarget

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmNetConnection function is not nil (ie. was set by outside code), calls it with this TxsdFmNetConnection instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmNetConnection instance.
func (me *TxsdFmNetConnection) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmNetConnection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmNetConnectionSource.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmNetConnectionTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmNetConnection struct {
	FmNetConnections []*TxsdFmNetConnection `xml:"FM-NET-CONNECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmNetConnection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmNetConnection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmNetConnection instance.
func (me *XsdGoPkgHasElems_FmNetConnection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmNetConnection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmNetConnections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmNetConnections struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmNetConnection

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmNetConnections function is not nil (ie. was set by outside code), calls it with this TxsdFmNetConnections instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmNetConnections instance.
func (me *TxsdFmNetConnections) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmNetConnections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmNetConnection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmNetConnections struct {
	FmNetConnections *TxsdFmNetConnections `xml:"FM-NET-CONNECTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmNetConnections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmNetConnections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmNetConnections instance.
func (me *XsdGoPkgHasElem_FmNetConnections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmNetConnections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmNetConnections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmVariantMiscData struct {
	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmXref

	XsdGoPkgHasElem_FmFormHeader

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmVariantMiscData function is not nil (ie. was set by outside code), calls it with this TxsdFmVariantMiscData instance as the single argument. Then calls the Walk() method on 4/9 embed(s) and 0/0 field(s) belonging to this TxsdFmVariantMiscData instance.
func (me *TxsdFmVariantMiscData) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVariantMiscData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmXref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVariantMiscData struct {
	FmVariantMiscDatas []*TxsdFmVariantMiscData `xml:"FM-VARIANT-MISC-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVariantMiscData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVariantMiscData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVariantMiscData instance.
func (me *XsdGoPkgHasElems_FmVariantMiscData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVariantMiscData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVariantMiscDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmVariantMiscDatas struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmVariantMiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmVariantMiscDatas function is not nil (ie. was set by outside code), calls it with this TxsdFmVariantMiscDatas instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmVariantMiscDatas instance.
func (me *TxsdFmVariantMiscDatas) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVariantMiscDatas; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmVariantMiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVariantMiscDatas struct {
	FmVariantMiscDatas *TxsdFmVariantMiscDatas `xml:"FM-VARIANT-MISC-DATAS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVariantMiscDatas function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVariantMiscDatas instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVariantMiscDatas instance.
func (me *XsdGoPkgHasElem_FmVariantMiscDatas) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVariantMiscDatas; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVariantMiscDatas.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmVariant struct {
	XsdGoPkgHasElem_FmVariantRefs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmNetConnections

	XsdGoPkgHasElem_FmVariantMiscDatas

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmVariant

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmCollectionConts

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmVariant function is not nil (ie. was set by outside code), calls it with this TxsdFmVariant instance as the single argument. Then calls the Walk() method on 13/20 embed(s) and 0/0 field(s) belonging to this TxsdFmVariant instance.
func (me *TxsdFmVariant) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVariant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVariantRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmNetConnections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVariantMiscDatas.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollectionConts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVariant struct {
	FmVariants []*TxsdFmVariant `xml:"FM-VARIANT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVariant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVariant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVariant instance.
func (me *XsdGoPkgHasElems_FmVariant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVariant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVariants {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmVariants struct {
	XsdGoPkgHasElems_FmVariant

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmVariants function is not nil (ie. was set by outside code), calls it with this TxsdFmVariants instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmVariants instance.
func (me *TxsdFmVariants) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmVariants; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmVariant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVariants struct {
	FmVariants *TxsdFmVariants `xml:"FM-VARIANTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVariants function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVariants instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVariants instance.
func (me *XsdGoPkgHasElem_FmVariants) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVariants; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVariants.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristicTypeRef struct {
	FmCharacteristicTypeRefs []*TxsdFmCharacteristicTypeRef `xml:"FM-CHARACTERISTIC-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristicTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristicTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristicTypeRef instance.
func (me *XsdGoPkgHasElems_FmCharacteristicTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristicTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristicTypeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCharacteristicTypeDecomposition struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmCharacteristicTypeRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCharacteristicTypeDecomposition function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristicTypeDecomposition instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristicTypeDecomposition instance.
func (me *TxsdFmCharacteristicTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristicTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmCharacteristicTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristicTypeDecomposition struct {
	FmCharacteristicTypeDecomposition *TxsdFmCharacteristicTypeDecomposition `xml:"FM-CHARACTERISTIC-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristicTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristicTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristicTypeDecomposition instance.
func (me *XsdGoPkgHasElem_FmCharacteristicTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristicTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristicTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCharacteristicType struct {
	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmCharacteristicTypeDecomposition

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCharacteristicType
}

//	If the WalkHandlers.TxsdFmCharacteristicType function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristicType instance as the single argument. Then calls the Walk() method on 10/17 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristicType instance.
func (me *TxsdFmCharacteristicType) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristicType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCharacteristicTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristicType struct {
	FmCharacteristicTypes []*TxsdFmCharacteristicType `xml:"FM-CHARACTERISTIC-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristicType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristicType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristicType instance.
func (me *XsdGoPkgHasElems_FmCharacteristicType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristicType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristicTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCharacteristicTypes struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmCharacteristicType

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCharacteristicTypes function is not nil (ie. was set by outside code), calls it with this TxsdFmCharacteristicTypes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmCharacteristicTypes instance.
func (me *TxsdFmCharacteristicTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCharacteristicTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmCharacteristicType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristicTypes struct {
	FmCharacteristicTypes *TxsdFmCharacteristicTypes `xml:"FM-CHARACTERISTIC-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristicTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristicTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristicTypes instance.
func (me *XsdGoPkgHasElem_FmCharacteristicTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristicTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristicTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmErrorDetection struct {
	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmCauses

	XsdGoPkgHasElem_FmTaskHistory

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmSignificance

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmClassification

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorDetection
}

//	If the WalkHandlers.TxsdFmErrorDetection function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorDetection instance as the single argument. Then calls the Walk() method on 14/21 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorDetection instance.
func (me *TxsdFmErrorDetection) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorDetection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCauses.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTaskHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSignificance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorDetection struct {
	FmErrorDetections []*TxsdFmErrorDetection `xml:"FM-ERROR-DETECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorDetection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorDetection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorDetection instance.
func (me *XsdGoPkgHasElems_FmErrorDetection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorDetection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorDetections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmErrorDetections struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmErrorDetection

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmErrorDetections function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorDetections instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorDetections instance.
func (me *TxsdFmErrorDetections) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorDetections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmErrorDetection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorDetections struct {
	FmErrorDetections *TxsdFmErrorDetections `xml:"FM-ERROR-DETECTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorDetections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorDetections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorDetections instance.
func (me *XsdGoPkgHasElem_FmErrorDetections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorDetections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorDetections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmSymbols struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSymbols function is not nil (ie. was set by outside code), calls it with this TxsdFmSymbols instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmSymbols instance.
func (me *TxsdFmSymbols) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSymbols; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSymbols struct {
	FmSymbols *TxsdFmSymbols `xml:"FM-SYMBOLS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSymbols function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSymbols instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSymbols instance.
func (me *XsdGoPkgHasElem_FmSymbols) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSymbols; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSymbols.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteColumn struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-PALETTE-COLUMN"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteColumn) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-PALETTE-COLUMN")
}

type TxsdFmPaletteColumnRef struct {
	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteColumn

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPaletteColumnRef function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteColumnRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteColumnRef instance.
func (me *TxsdFmPaletteColumnRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteColumnRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteColumnRef struct {
	FmPaletteColumnRef *TxsdFmPaletteColumnRef `xml:"FM-PALETTE-COLUMN-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteColumnRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteColumnRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteColumnRef instance.
func (me *XsdGoPkgHasElem_FmPaletteColumnRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteColumnRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteColumnRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFigureRef struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Figure
}

//	If the WalkHandlers.TxsdFigureRef function is not nil (ie. was set by outside code), calls it with this TxsdFigureRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFigureRef instance.
func (me *TxsdFigureRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFigureRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FigureRef struct {
	FigureRef *TxsdFigureRef `xml:"FIGURE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FigureRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FigureRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FigureRef instance.
func (me *XsdGoPkgHasElem_FigureRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FigureRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FigureRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPaletteEntry struct {
	XsdGoPkgHasElem_FigureRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmPaletteColumnRef
}

//	If the WalkHandlers.TxsdFmPaletteEntry function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteEntry instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteEntry instance.
func (me *TxsdFmPaletteEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmPaletteColumnRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FigureRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteEntry struct {
	FmPaletteEntries []*TxsdFmPaletteEntry `xml:"FM-PALETTE-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteEntry instance.
func (me *XsdGoPkgHasElems_FmPaletteEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPaletteRow struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElems_FmPaletteEntry

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteRow

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc
}

//	If the WalkHandlers.TxsdFmPaletteRow function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteRow instance as the single argument. Then calls the Walk() method on 7/14 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteRow instance.
func (me *TxsdFmPaletteRow) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPaletteEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteRow struct {
	FmPaletteRows []*TxsdFmPaletteRow `xml:"FM-PALETTE-ROW"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteRow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteRow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteRow instance.
func (me *XsdGoPkgHasElems_FmPaletteRow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteRows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPaletteRows struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmPaletteRow

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPaletteRows function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteRows instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteRows instance.
func (me *TxsdFmPaletteRows) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteRows; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPaletteRow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteRows struct {
	FmPaletteRows *TxsdFmPaletteRows `xml:"FM-PALETTE-ROWS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteRows function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteRows instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteRows instance.
func (me *XsdGoPkgHasElem_FmPaletteRows) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteRows; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteRows.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPaletteColumn struct {
	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPaletteColumn

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdFmPaletteColumn function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteColumn instance as the single argument. Then calls the Walk() method on 6/13 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteColumn instance.
func (me *TxsdFmPaletteColumn) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteColumn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteColumn struct {
	FmPaletteColumns []*TxsdFmPaletteColumn `xml:"FM-PALETTE-COLUMN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteColumn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteColumn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteColumn instance.
func (me *XsdGoPkgHasElems_FmPaletteColumn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteColumn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteColumns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPaletteColumns struct {
	XsdGoPkgHasElems_FmPaletteColumn

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPaletteColumns function is not nil (ie. was set by outside code), calls it with this TxsdFmPaletteColumns instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPaletteColumns instance.
func (me *TxsdFmPaletteColumns) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPaletteColumns; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPaletteColumn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteColumns struct {
	FmPaletteColumns *TxsdFmPaletteColumns `xml:"FM-PALETTE-COLUMNS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteColumns function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteColumns instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteColumns instance.
func (me *XsdGoPkgHasElem_FmPaletteColumns) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteColumns; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteColumns.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPalette struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-PALETTE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPalette) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-PALETTE")
}

type XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmPaletteRowFmPaletteColumn struct {
	FNamespace xsdt.Nmtokens `xml:"F-NAMESPACE,attr"`
}

//	Returns the fixed value for FNamespace -- "FM-PALETTE-ROW FM-PALETTE-COLUMN"
func (me XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmPaletteRowFmPaletteColumn) FNamespaceFixed() xsdt.Nmtokens {
	return xsdt.Nmtokens("FM-PALETTE-ROW FM-PALETTE-COLUMN")
}

type TxsdFmPalette struct {
	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPalette

	XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_FmPaletteRowFmPaletteColumn

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_FmPaletteRows

	XsdGoPkgHasElem_FmPaletteColumns

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations
}

//	If the WalkHandlers.TxsdFmPalette function is not nil (ie. was set by outside code), calls it with this TxsdFmPalette instance as the single argument. Then calls the Walk() method on 11/19 embed(s) and 0/0 field(s) belonging to this TxsdFmPalette instance.
func (me *TxsdFmPalette) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPalette; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPaletteRows.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPaletteColumns.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPalette struct {
	FmPalettes []*TxsdFmPalette `xml:"FM-PALETTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPalette function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPalette instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPalette instance.
func (me *XsdGoPkgHasElems_FmPalette) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPalette; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPalettes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPalettes struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmPalette

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPalettes function is not nil (ie. was set by outside code), calls it with this TxsdFmPalettes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPalettes instance.
func (me *TxsdFmPalettes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPalettes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPalette.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPalettes struct {
	FmPalettes *TxsdFmPalettes `xml:"FM-PALETTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPalettes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPalettes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPalettes instance.
func (me *XsdGoPkgHasElem_FmPalettes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPalettes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPalettes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmSymbolSpec struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmSymbols

	XsdGoPkgHasElem_FmPalettes

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSymbolSpec function is not nil (ie. was set by outside code), calls it with this TxsdFmSymbolSpec instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmSymbolSpec instance.
func (me *TxsdFmSymbolSpec) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSymbolSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmSymbols.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPalettes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSymbolSpec struct {
	FmSymbolSpec *TxsdFmSymbolSpec `xml:"FM-SYMBOL-SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSymbolSpec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSymbolSpec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSymbolSpec instance.
func (me *XsdGoPkgHasElem_FmSymbolSpec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSymbolSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSymbolSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmProjectOwner struct {
	FmProjectOwner *TxsdTeamMemberRefs `xml:"FM-PROJECT-OWNER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmProjectOwner function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmProjectOwner instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmProjectOwner instance.
func (me *XsdGoPkgHasElem_FmProjectOwner) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmProjectOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmProjectOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPartListEntry struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-PART-LIST-ENTRY"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPartListEntry) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-PART-LIST-ENTRY")
}

type TxsdFmPartListEntry struct {
	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_PartNumber

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmPartListEntry

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdFmPartListEntry function is not nil (ie. was set by outside code), calls it with this TxsdFmPartListEntry instance as the single argument. Then calls the Walk() method on 8/15 embed(s) and 0/0 field(s) belonging to this TxsdFmPartListEntry instance.
func (me *TxsdFmPartListEntry) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPartListEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PartNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPartListEntry struct {
	FmPartListEntries []*TxsdFmPartListEntry `xml:"FM-PART-LIST-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPartListEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPartListEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPartListEntry instance.
func (me *XsdGoPkgHasElems_FmPartListEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPartListEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPartListEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPartList struct {
	XsdGoPkgHasElems_FmPartListEntry

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPartList function is not nil (ie. was set by outside code), calls it with this TxsdFmPartList instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPartList instance.
func (me *TxsdFmPartList) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPartList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmPartListEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPartList struct {
	FmPartList *TxsdFmPartList `xml:"FM-PART-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPartList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPartList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPartList instance.
func (me *XsdGoPkgHasElem_FmPartList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPartList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPartList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmProject struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-PROJECT"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmProject) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-PROJECT")
}

type TxsdFmStructureRef struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmStructure

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmStructureRef function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureRef instance.
func (me *TxsdFmStructureRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureRef struct {
	FmStructureRefs []*TxsdFmStructureRef `xml:"FM-STRUCTURE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureRef instance.
func (me *XsdGoPkgHasElems_FmStructureRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmStructureRefs struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmStructureRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmStructureRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmStructureRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmStructureRefs instance.
func (me *TxsdFmStructureRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmStructureRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmStructureRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureRefs struct {
	FmStructureRefs *TxsdFmStructureRefs `xml:"FM-STRUCTURE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureRefs instance.
func (me *XsdGoPkgHasElem_FmStructureRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmProject struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmProjectOwner

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmProject

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmPartList

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmStructureRefs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData
}

//	If the WalkHandlers.TxsdFmProject function is not nil (ie. was set by outside code), calls it with this TxsdFmProject instance as the single argument. Then calls the Walk() method on 11/18 embed(s) and 0/0 field(s) belonging to this TxsdFmProject instance.
func (me *TxsdFmProject) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmProject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmProjectOwner.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPartList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmProject struct {
	FmProjects []*TxsdFmProject `xml:"FM-PROJECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmProject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmProject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmProject instance.
func (me *XsdGoPkgHasElems_FmProject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmProject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmProjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmProjects struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmProject
}

//	If the WalkHandlers.TxsdFmProjects function is not nil (ie. was set by outside code), calls it with this TxsdFmProjects instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmProjects instance.
func (me *TxsdFmProjects) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmProjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmProject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmProjects struct {
	FmProjects *TxsdFmProjects `xml:"FM-PROJECTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmProjects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmProjects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmProjects instance.
func (me *XsdGoPkgHasElem_FmProjects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmProjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmProjects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCollectionRefInvert xsdt.Nmtoken

//	Since TxsdFmCollectionRefInvert is just a simple String type, this merely returns the current string value.
func (me TxsdFmCollectionRefInvert) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdFmCollectionRefInvert's alias type xsdt.Nmtoken.
func (me TxsdFmCollectionRefInvert) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdFmCollectionRefInvert is "INVERT".
func (me TxsdFmCollectionRefInvert) IsInvert() bool { return me.String() == "INVERT" }

//	Returns true if the value of this enumerated TxsdFmCollectionRefInvert is "NO-INVERT".
func (me TxsdFmCollectionRefInvert) IsNoInvert() bool { return me.String() == "NO-INVERT" }

//	Since TxsdFmCollectionRefInvert is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFmCollectionRefInvert) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_Invert_TxsdFmCollectionRefInvert_NoInvert struct {
	Invert TxsdFmCollectionRefInvert `xml:"INVERT,attr"`
}

//	Returns the default value for Invert -- "NO-INVERT"
func (me XsdGoPkgHasAttr_Invert_TxsdFmCollectionRefInvert_NoInvert) InvertDefault() TxsdFmCollectionRefInvert {
	return TxsdFmCollectionRefInvert("NO-INVERT")
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCollection struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-COLLECTION"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCollection) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-COLLECTION")
}

type TxsdFmCollectionRef struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Invert_TxsdFmCollectionRefInvert_NoInvert

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCollection

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_IdRef_XsdtIdref_
}

//	If the WalkHandlers.TxsdFmCollectionRef function is not nil (ie. was set by outside code), calls it with this TxsdFmCollectionRef instance as the single argument. Then calls the Walk() method on 1/11 embed(s) and 0/0 field(s) belonging to this TxsdFmCollectionRef instance.
func (me *TxsdFmCollectionRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCollectionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCollectionRef struct {
	FmCollectionRefs []*TxsdFmCollectionRef `xml:"FM-COLLECTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCollectionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCollectionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCollectionRef instance.
func (me *XsdGoPkgHasElems_FmCollectionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCollectionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCollectionRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCollectionRefs struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmCollectionRef
}

//	If the WalkHandlers.TxsdFmCollectionRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmCollectionRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmCollectionRefs instance.
func (me *TxsdFmCollectionRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCollectionRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmCollectionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCollectionRefs struct {
	FmCollectionRefs *TxsdFmCollectionRefs `xml:"FM-COLLECTION-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCollectionRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCollectionRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCollectionRefs instance.
func (me *XsdGoPkgHasElem_FmCollectionRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCollectionRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCollectionRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCollectionRoot xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TxsdFmCollectionRoot's alias type xsdt.Nmtoken.
func (me TxsdFmCollectionRoot) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdFmCollectionRoot is "NO-ROOT".
func (me TxsdFmCollectionRoot) IsNoRoot() bool { return me.String() == "NO-ROOT" }

//	Returns true if the value of this enumerated TxsdFmCollectionRoot is "ROOT".
func (me TxsdFmCollectionRoot) IsRoot() bool { return me.String() == "ROOT" }

//	Since TxsdFmCollectionRoot is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFmCollectionRoot) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdFmCollectionRoot is just a simple String type, this merely returns the current string value.
func (me TxsdFmCollectionRoot) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_Root_TxsdFmCollectionRoot_NoRoot struct {
	Root TxsdFmCollectionRoot `xml:"ROOT,attr"`
}

//	Returns the default value for Root -- "NO-ROOT"
func (me XsdGoPkgHasAttr_Root_TxsdFmCollectionRoot_NoRoot) RootDefault() TxsdFmCollectionRoot {
	return TxsdFmCollectionRoot("NO-ROOT")
}

type TxsdFmCollection struct {
	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmCollectionConts

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmCollection

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmCollectionRefs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Root_TxsdFmCollectionRoot_NoRoot
}

//	If the WalkHandlers.TxsdFmCollection function is not nil (ie. was set by outside code), calls it with this TxsdFmCollection instance as the single argument. Then calls the Walk() method on 7/15 embed(s) and 0/0 field(s) belonging to this TxsdFmCollection instance.
func (me *TxsdFmCollection) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCollection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollectionRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollectionConts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCollection struct {
	FmCollections []*TxsdFmCollection `xml:"FM-COLLECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCollection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCollection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCollection instance.
func (me *XsdGoPkgHasElems_FmCollection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCollection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCollections {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmCollections struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmCollection

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmCollections function is not nil (ie. was set by outside code), calls it with this TxsdFmCollections instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmCollections instance.
func (me *TxsdFmCollections) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmCollections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmCollection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCollections struct {
	FmCollections *TxsdFmCollections `xml:"FM-COLLECTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCollections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCollections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCollections instance.
func (me *XsdGoPkgHasElem_FmCollections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCollections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCollections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_ChapterCompanyDefItemExternalFigureFmActionFmActionTypeFmAssessmentCatalogFmCharacteristicFmCharacteristicTypeFmCollectionFmControlPlanFmFaultFmFaultTypeFmFormSheetFmFormSheetPresentationVersionFmFunctionFmFunctionTypeFmPaletteFmPaletteColumnFmPaletteRowFmPartListEntryFmProcessDiagramFmProjectFmStructureFmStructureElementFmTaskSetFmTaskSetsFmTeamFmToolFmUserGroupFmVariantFormulaPrmSampleSdgStdSwUserAccessCaseTableTeamMemberTopicXdocXfileXrefTarget struct {
	FNamespace xsdt.Nmtokens `xml:"F-NAMESPACE,attr"`
}

//	Returns the fixed value for FNamespace -- "CHAPTER COMPANY DEF-ITEM EXTERNAL FIGURE FM-ACTION FM-ACTION-TYPE FM-ASSESSMENT-CATALOG FM-CHARACTERISTIC FM-CHARACTERISTIC-TYPE FM-COLLECTION FM-CONTROL-PLAN FM-FAULT FM-FAULT-TYPE FM-FORM-SHEET FM-FORM-SHEET-PRESENTATION-VERSION FM-FUNCTION FM-FUNCTION-TYPE FM-PALETTE FM-PALETTE-COLUMN FM-PALETTE-ROW FM-PART-LIST-ENTRY FM-PROCESS-DIAGRAM FM-PROJECT FM-STRUCTURE FM-STRUCTURE-ELEMENT FM-TASK-SET FM-TASK-SETS FM-TEAM FM-TOOL FM-USER-GROUP FM-VARIANT FORMULA PRM SAMPLE SDG STD SW-USER-ACCESS-CASE TABLE TEAM-MEMBER TOPIC XDOC XFILE XREF-TARGET"
func (me XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_ChapterCompanyDefItemExternalFigureFmActionFmActionTypeFmAssessmentCatalogFmCharacteristicFmCharacteristicTypeFmCollectionFmControlPlanFmFaultFmFaultTypeFmFormSheetFmFormSheetPresentationVersionFmFunctionFmFunctionTypeFmPaletteFmPaletteColumnFmPaletteRowFmPartListEntryFmProcessDiagramFmProjectFmStructureFmStructureElementFmTaskSetFmTaskSetsFmTeamFmToolFmUserGroupFmVariantFormulaPrmSampleSdgStdSwUserAccessCaseTableTeamMemberTopicXdocXfileXrefTarget) FNamespaceFixed() xsdt.Nmtokens {
	return xsdt.Nmtokens("CHAPTER COMPANY DEF-ITEM EXTERNAL FIGURE FM-ACTION FM-ACTION-TYPE FM-ASSESSMENT-CATALOG FM-CHARACTERISTIC FM-CHARACTERISTIC-TYPE FM-COLLECTION FM-CONTROL-PLAN FM-FAULT FM-FAULT-TYPE FM-FORM-SHEET FM-FORM-SHEET-PRESENTATION-VERSION FM-FUNCTION FM-FUNCTION-TYPE FM-PALETTE FM-PALETTE-COLUMN FM-PALETTE-ROW FM-PART-LIST-ENTRY FM-PROCESS-DIAGRAM FM-PROJECT FM-STRUCTURE FM-STRUCTURE-ELEMENT FM-TASK-SET FM-TASK-SETS FM-TEAM FM-TOOL FM-USER-GROUP FM-VARIANT FORMULA PRM SAMPLE SDG STD SW-USER-ACCESS-CASE TABLE TEAM-MEMBER TOPIC XDOC XFILE XREF-TARGET")
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunctionType struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FUNCTION-TYPE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunctionType) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FUNCTION-TYPE")
}

type TxsdFmFunctionTypeRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunctionType
}

//	If the WalkHandlers.TxsdFmFunctionTypeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmFunctionTypeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmFunctionTypeRef instance.
func (me *TxsdFmFunctionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunctionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunctionTypeRef struct {
	FmFunctionTypeRefs []*TxsdFmFunctionTypeRef `xml:"FM-FUNCTION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunctionTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunctionTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunctionTypeRef instance.
func (me *XsdGoPkgHasElems_FmFunctionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunctionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctionTypeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFunctionTypeDecomposition struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunctionTypeRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFunctionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this TxsdFmFunctionTypeDecomposition instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFunctionTypeDecomposition instance.
func (me *TxsdFmFunctionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunctionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFunctionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunctionTypeDecomposition struct {
	FmFunctionTypeDecomposition *TxsdFmFunctionTypeDecomposition `xml:"FM-FUNCTION-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunctionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunctionTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunctionTypeDecomposition instance.
func (me *XsdGoPkgHasElem_FmFunctionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunctionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunctionTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFunctionType struct {
	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunctionType

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmFunctionTypeDecomposition

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFunctionType function is not nil (ie. was set by outside code), calls it with this TxsdFmFunctionType instance as the single argument. Then calls the Walk() method on 10/17 embed(s) and 0/0 field(s) belonging to this TxsdFmFunctionType instance.
func (me *TxsdFmFunctionType) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunctionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFunctionTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunctionType struct {
	FmFunctionTypes []*TxsdFmFunctionType `xml:"FM-FUNCTION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunctionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunctionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunctionType instance.
func (me *XsdGoPkgHasElems_FmFunctionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunctionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctionTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFunctionTypes struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunctionType

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFunctionTypes function is not nil (ie. was set by outside code), calls it with this TxsdFmFunctionTypes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFunctionTypes instance.
func (me *TxsdFmFunctionTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunctionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFunctionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunctionTypes struct {
	FmFunctionTypes *TxsdFmFunctionTypes `xml:"FM-FUNCTION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunctionTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunctionTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunctionTypes instance.
func (me *XsdGoPkgHasElem_FmFunctionTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunctionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunctionTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaultTypeRef struct {
	FmFaultTypeRefs []*TxsdFmFaultTypeRef `xml:"FM-FAULT-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaultTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaultTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaultTypeRef instance.
func (me *XsdGoPkgHasElems_FmFaultTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaultTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultTypeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFaultTypeDecomposition struct {
	XsdGoPkgHasElems_FmFaultTypeRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFaultTypeDecomposition function is not nil (ie. was set by outside code), calls it with this TxsdFmFaultTypeDecomposition instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFaultTypeDecomposition instance.
func (me *TxsdFmFaultTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaultTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFaultTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaultTypeDecomposition struct {
	FmFaultTypeDecomposition *TxsdFmFaultTypeDecomposition `xml:"FM-FAULT-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaultTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaultTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaultTypeDecomposition instance.
func (me *XsdGoPkgHasElem_FmFaultTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaultTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaultTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFaultType struct {
	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_FmFaultTypeDecomposition

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFaultType

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs
}

//	If the WalkHandlers.TxsdFmFaultType function is not nil (ie. was set by outside code), calls it with this TxsdFmFaultType instance as the single argument. Then calls the Walk() method on 10/17 embed(s) and 0/0 field(s) belonging to this TxsdFmFaultType instance.
func (me *TxsdFmFaultType) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaultType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaultType struct {
	FmFaultTypes []*TxsdFmFaultType `xml:"FM-FAULT-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaultType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaultType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaultType instance.
func (me *XsdGoPkgHasElems_FmFaultType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaultType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFaultTypes struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFaultType

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFaultTypes function is not nil (ie. was set by outside code), calls it with this TxsdFmFaultTypes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFaultTypes instance.
func (me *TxsdFmFaultTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFaultTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFaultType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaultTypes struct {
	FmFaultTypes *TxsdFmFaultTypes `xml:"FM-FAULT-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaultTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaultTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaultTypes instance.
func (me *XsdGoPkgHasElem_FmFaultTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaultTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaultTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmPlannedSpecification struct {
	XsdGoPkgHasElem_Label

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmPlannedSpecification function is not nil (ie. was set by outside code), calls it with this TxsdFmPlannedSpecification instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmPlannedSpecification instance.
func (me *TxsdFmPlannedSpecification) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmPlannedSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPlannedSpecification struct {
	FmPlannedSpecification *TxsdFmPlannedSpecification `xml:"FM-PLANNED-SPECIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPlannedSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPlannedSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPlannedSpecification instance.
func (me *XsdGoPkgHasElem_FmPlannedSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPlannedSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPlannedSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Label struct {
	Labels []*TxsdLongName `xml:"LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Label function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Label instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Label instance.
func (me *XsdGoPkgHasElems_Label) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Label; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Labels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmExcludedFailures struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFaultRef

	XsdGoPkgHasElems_Label

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmExcludedFailures function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmExcludedFailures instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmExcludedFailures instance.
func (me *TxsdFmDrbfmExcludedFailures) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmExcludedFailures; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFaultRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Label.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmExcludedFailures struct {
	FmDrbfmExcludedFailures *TxsdFmDrbfmExcludedFailures `xml:"FM-DRBFM-EXCLUDED-FAILURES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmExcludedFailures function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmExcludedFailures instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmExcludedFailures instance.
func (me *XsdGoPkgHasElem_FmDrbfmExcludedFailures) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmExcludedFailures; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmExcludedFailures.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCurrentSpecification struct {
	FmCurrentSpecification *TxsdFmPlannedSpecification `xml:"FM-CURRENT-SPECIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCurrentSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCurrentSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCurrentSpecification instance.
func (me *XsdGoPkgHasElem_FmCurrentSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCurrentSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCurrentSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmReason struct {
	FmDrbfmReason *TxsdFmPlannedSpecification `xml:"FM-DRBFM-REASON"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmReason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmReason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmReason instance.
func (me *XsdGoPkgHasElem_FmDrbfmReason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmReason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmReason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModification struct {
	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmPlannedSpecification

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmDrbfmExcludedFailures

	XsdGoPkgHasElem_FmCurrentSpecification

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModification

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmDrbfmModificationTypeRef

	XsdGoPkgHasElem_FmStructureElementRef

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmFaultRefs

	XsdGoPkgHasElem_FmDrbfmReason

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmModification function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModification instance as the single argument. Then calls the Walk() method on 18/25 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModification instance.
func (me *TxsdFmDrbfmModification) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmReason.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPlannedSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmExcludedFailures.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCurrentSpecification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmModificationTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModification struct {
	FmDrbfmModifications []*TxsdFmDrbfmModification `xml:"FM-DRBFM-MODIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModification instance.
func (me *XsdGoPkgHasElems_FmDrbfmModification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModifications struct {
	XsdGoPkgHasElems_FmDrbfmModification

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmModifications function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModifications instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModifications instance.
func (me *TxsdFmDrbfmModifications) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmModification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModifications struct {
	FmDrbfmModifications *TxsdFmDrbfmModifications `xml:"FM-DRBFM-MODIFICATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModifications function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModifications instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModifications instance.
func (me *XsdGoPkgHasElem_FmDrbfmModifications) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserdefinedAttribute struct {
	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserdefinedAttribute

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName
}

//	If the WalkHandlers.TxsdFmUserdefinedAttribute function is not nil (ie. was set by outside code), calls it with this TxsdFmUserdefinedAttribute instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdFmUserdefinedAttribute instance.
func (me *TxsdFmUserdefinedAttribute) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserdefinedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserdefinedAttribute struct {
	FmUserdefinedAttributes []*TxsdFmUserdefinedAttribute `xml:"FM-USERDEFINED-ATTRIBUTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserdefinedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserdefinedAttribute instance.
func (me *XsdGoPkgHasElems_FmUserdefinedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserdefinedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserdefinedAttributes struct {
	XsdGoPkgHasElems_FmUserdefinedAttribute

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmUserdefinedAttributes function is not nil (ie. was set by outside code), calls it with this TxsdFmUserdefinedAttributes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmUserdefinedAttributes instance.
func (me *TxsdFmUserdefinedAttributes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserdefinedAttributes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmUserdefinedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserdefinedAttributes struct {
	FmUserdefinedAttributes *TxsdFmUserdefinedAttributes `xml:"FM-USERDEFINED-ATTRIBUTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttributes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserdefinedAttributes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserdefinedAttributes instance.
func (me *XsdGoPkgHasElem_FmUserdefinedAttributes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttributes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserdefinedAttributes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FDtdBuild_XsdtAnySimpleType_16 struct {
	FDtdBuild xsdt.AnySimpleType `xml:"F-DTD-BUILD,attr"`
}

//	Returns the fixed value for FDtdBuild -- "16"
func (me XsdGoPkgHasAttr_FDtdBuild_XsdtAnySimpleType_16) FDtdBuildFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("16")
}

type TxsdFmErrorDetectionRefs struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmErrorDetectionRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmErrorDetectionRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorDetectionRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorDetectionRefs instance.
func (me *TxsdFmErrorDetectionRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorDetectionRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmErrorDetectionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorDetectionRefs struct {
	FmErrorDetectionRefs *TxsdFmErrorDetectionRefs `xml:"FM-ERROR-DETECTION-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorDetectionRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorDetectionRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorDetectionRefs instance.
func (me *XsdGoPkgHasElem_FmErrorDetectionRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorDetectionRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorDetectionRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmErrorResponseRefs struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmErrorResponseRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmErrorResponseRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorResponseRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorResponseRefs instance.
func (me *TxsdFmErrorResponseRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorResponseRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmErrorResponseRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorResponseRefs struct {
	FmErrorResponseRefs *TxsdFmErrorResponseRefs `xml:"FM-ERROR-RESPONSE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorResponseRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorResponseRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorResponseRefs instance.
func (me *XsdGoPkgHasElem_FmErrorResponseRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorResponseRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorResponseRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmRequirements struct {
	FmRequirements *TxsdFmSeCharacteristics `xml:"FM-REQUIREMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmRequirements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmRequirements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmRequirements instance.
func (me *XsdGoPkgHasElem_FmRequirements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmRequirements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmRequirements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunctionTypeRef struct {
	FmFunctionTypeRef *TxsdFmFunctionTypeRef `xml:"FM-FUNCTION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunctionTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunctionTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunctionTypeRef instance.
func (me *XsdGoPkgHasElem_FmFunctionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunctionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunctionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFunction struct {
	XsdGoPkgHasElem_FmClassification

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmErrorDetectionRefs

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmFaultRefs

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFunction

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmPrerequisites

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasElem_FmRequirements

	XsdGoPkgHasElem_FmErrorResponseRefs

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmFunctionTypeRef

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFunction function is not nil (ie. was set by outside code), calls it with this TxsdFmFunction instance as the single argument. Then calls the Walk() method on 21/28 embed(s) and 0/0 field(s) belonging to this TxsdFmFunction instance.
func (me *TxsdFmFunction) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmPrerequisites.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmRequirements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmErrorResponseRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFunctionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmErrorDetectionRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunction struct {
	FmFunctions []*TxsdFmFunction `xml:"FM-FUNCTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunction instance.
func (me *XsdGoPkgHasElems_FmFunction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFunctions struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmFunction

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFunctions function is not nil (ie. was set by outside code), calls it with this TxsdFmFunctions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFunctions instance.
func (me *TxsdFmFunctions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFunctions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFunction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunctions struct {
	FmFunctions *TxsdFmFunctions `xml:"FM-FUNCTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunctions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunctions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunctions instance.
func (me *XsdGoPkgHasElem_FmFunctions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunctions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunctions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmErrorResponse struct {
	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmSignificance

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmErrorResponse

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmTaskHistory

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmClassification

	XsdGoPkgHasElem_FmCauses

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc
}

//	If the WalkHandlers.TxsdFmErrorResponse function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorResponse instance as the single argument. Then calls the Walk() method on 14/21 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorResponse instance.
func (me *TxsdFmErrorResponse) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCauses.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSignificance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTaskHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorResponse struct {
	FmErrorResponses []*TxsdFmErrorResponse `xml:"FM-ERROR-RESPONSE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorResponse instance.
func (me *XsdGoPkgHasElems_FmErrorResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmErrorResponss struct {
	XsdGoPkgHasElems_FmErrorResponse

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmErrorResponss function is not nil (ie. was set by outside code), calls it with this TxsdFmErrorResponss instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmErrorResponss instance.
func (me *TxsdFmErrorResponss) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmErrorResponss; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmErrorResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorResponss struct {
	FmErrorResponss *TxsdFmErrorResponss `xml:"FM-ERROR-RESPONSS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorResponss function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorResponss instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorResponss instance.
func (me *XsdGoPkgHasElem_FmErrorResponss) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorResponss; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorResponss.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmSheet struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-DRBFM-SHEET"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmSheet) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-DRBFM-SHEET")
}

type TxsdFmDrbfmSheet struct {
	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmStructureElementRefs

	XsdGoPkgHasElem_FmFormHeader

	XsdGoPkgHasElem_UserCoverSheets

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmSheet

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmSheet function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmSheet instance as the single argument. Then calls the Walk() method on 12/19 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmSheet instance.
func (me *TxsdFmDrbfmSheet) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElementRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_UserCoverSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmSheet struct {
	FmDrbfmSheets []*TxsdFmDrbfmSheet `xml:"FM-DRBFM-SHEET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmSheet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmSheet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmSheet instance.
func (me *XsdGoPkgHasElems_FmDrbfmSheet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmSheets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmSheets struct {
	XsdGoPkgHasElems_FmDrbfmSheet

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmSheets function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmSheets instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmSheets instance.
func (me *TxsdFmDrbfmSheets) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmSheet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmSheets struct {
	FmDrbfmSheets *TxsdFmDrbfmSheets `xml:"FM-DRBFM-SHEETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmSheets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmSheets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmSheets instance.
func (me *XsdGoPkgHasElem_FmDrbfmSheets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemUserGroup struct {
	SystemUserGroups []*TxsdSub `xml:"SYSTEM-USER-GROUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemUserGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemUserGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemUserGroup instance.
func (me *XsdGoPkgHasElems_SystemUserGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemUserGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SystemUserGroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSystemUserGroups struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_SystemUserGroup

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSystemUserGroups function is not nil (ie. was set by outside code), calls it with this TxsdSystemUserGroups instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSystemUserGroups instance.
func (me *TxsdSystemUserGroups) Walk() (err error) {
	if fn := WalkHandlers.TxsdSystemUserGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SystemUserGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SystemUserGroups struct {
	SystemUserGroups *TxsdSystemUserGroups `xml:"SYSTEM-USER-GROUPS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemUserGroups function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemUserGroups instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SystemUserGroups instance.
func (me *XsdGoPkgHasElem_SystemUserGroups) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemUserGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SystemUserGroups.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemUser struct {
	SystemUsers []*TxsdSub `xml:"SYSTEM-USER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemUser function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemUser instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemUser instance.
func (me *XsdGoPkgHasElems_SystemUser) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemUser; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SystemUsers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSystemUsers struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_SystemUser

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSystemUsers function is not nil (ie. was set by outside code), calls it with this TxsdSystemUsers instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSystemUsers instance.
func (me *TxsdSystemUsers) Walk() (err error) {
	if fn := WalkHandlers.TxsdSystemUsers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SystemUser.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SystemUsers struct {
	SystemUsers *TxsdSystemUsers `xml:"SYSTEM-USERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemUsers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemUsers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SystemUsers instance.
func (me *XsdGoPkgHasElem_SystemUsers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemUsers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SystemUsers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserGroup struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-USER-GROUP"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserGroup) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-USER-GROUP")
}

type TxsdFmUserGroupRef struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserGroup

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmUserGroupRef function is not nil (ie. was set by outside code), calls it with this TxsdFmUserGroupRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmUserGroupRef instance.
func (me *TxsdFmUserGroupRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserGroupRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserGroupRef struct {
	FmUserGroupRefs []*TxsdFmUserGroupRef `xml:"FM-USER-GROUP-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserGroupRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserGroupRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserGroupRef instance.
func (me *XsdGoPkgHasElems_FmUserGroupRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserGroupRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserGroupRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserGroupRefs struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmUserGroupRef
}

//	If the WalkHandlers.TxsdFmUserGroupRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmUserGroupRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmUserGroupRefs instance.
func (me *TxsdFmUserGroupRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserGroupRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmUserGroupRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserGroupRefs struct {
	FmUserGroupRefs *TxsdFmUserGroupRefs `xml:"FM-USER-GROUP-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserGroupRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserGroupRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserGroupRefs instance.
func (me *XsdGoPkgHasElem_FmUserGroupRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserGroupRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserGroupRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserGroup struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_TeamMemberRefs

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_SystemUserGroups

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmUserGroup

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_SystemUsers

	XsdGoPkgHasElem_FmUserGroupRefs
}

//	If the WalkHandlers.TxsdFmUserGroup function is not nil (ie. was set by outside code), calls it with this TxsdFmUserGroup instance as the single argument. Then calls the Walk() method on 8/15 embed(s) and 0/0 field(s) belonging to this TxsdFmUserGroup instance.
func (me *TxsdFmUserGroup) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemUserGroups.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SystemUsers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserGroupRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserGroup struct {
	FmUserGroups []*TxsdFmUserGroup `xml:"FM-USER-GROUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserGroup instance.
func (me *XsdGoPkgHasElems_FmUserGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserGroups {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserGroups struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmUserGroup

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmUserGroups function is not nil (ie. was set by outside code), calls it with this TxsdFmUserGroups instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmUserGroups instance.
func (me *TxsdFmUserGroups) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmUserGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserGroups struct {
	FmUserGroups *TxsdFmUserGroups `xml:"FM-USER-GROUPS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserGroups function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserGroups instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserGroups instance.
func (me *XsdGoPkgHasElem_FmUserGroups) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserGroups.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_SwUserAccessCase struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "SW-USER-ACCESS-CASE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_SwUserAccessCase) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("SW-USER-ACCESS-CASE")
}

type TxsdSwUserAccessCaseRef struct {
	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_SwUserAccessCase

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSwUserAccessCaseRef function is not nil (ie. was set by outside code), calls it with this TxsdSwUserAccessCaseRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdSwUserAccessCaseRef instance.
func (me *TxsdSwUserAccessCaseRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdSwUserAccessCaseRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SwUserAccessCaseRef struct {
	SwUserAccessCaseRefs []*TxsdSwUserAccessCaseRef `xml:"SW-USER-ACCESS-CASE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SwUserAccessCaseRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SwUserAccessCaseRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SwUserAccessCaseRef instance.
func (me *XsdGoPkgHasElems_SwUserAccessCaseRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SwUserAccessCaseRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SwUserAccessCaseRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSwUserAccessCaseRefs struct {
	XsdGoPkgHasElems_SwUserAccessCaseRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSwUserAccessCaseRefs function is not nil (ie. was set by outside code), calls it with this TxsdSwUserAccessCaseRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSwUserAccessCaseRefs instance.
func (me *TxsdSwUserAccessCaseRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdSwUserAccessCaseRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SwUserAccessCaseRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SwUserAccessCaseRefs struct {
	SwUserAccessCaseRefs *TxsdSwUserAccessCaseRefs `xml:"SW-USER-ACCESS-CASE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SwUserAccessCaseRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SwUserAccessCaseRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SwUserAccessCaseRefs instance.
func (me *XsdGoPkgHasElem_SwUserAccessCaseRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SwUserAccessCaseRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwUserAccessCaseRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtAnySimpleType_SwUserAccessCase struct {
	FIdClass xsdt.AnySimpleType `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "SW-USER-ACCESS-CASE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtAnySimpleType_SwUserAccessCase) FIdClassFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("SW-USER-ACCESS-CASE")
}

type TxsdSwUserAccessCase struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtAnySimpleType_SwUserAccessCase

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_SwUserAccessCaseRefs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Id_XsdtId_
}

//	If the WalkHandlers.TxsdSwUserAccessCase function is not nil (ie. was set by outside code), calls it with this TxsdSwUserAccessCase instance as the single argument. Then calls the Walk() method on 6/13 embed(s) and 0/0 field(s) belonging to this TxsdSwUserAccessCase instance.
func (me *TxsdSwUserAccessCase) Walk() (err error) {
	if fn := WalkHandlers.TxsdSwUserAccessCase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SwUserAccessCaseRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SwUserAccessCase struct {
	SwUserAccessCases []*TxsdSwUserAccessCase `xml:"SW-USER-ACCESS-CASE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SwUserAccessCase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SwUserAccessCase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SwUserAccessCase instance.
func (me *XsdGoPkgHasElems_SwUserAccessCase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SwUserAccessCase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SwUserAccessCases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSwUserAccessCases struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_SwUserAccessCase

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSwUserAccessCases function is not nil (ie. was set by outside code), calls it with this TxsdSwUserAccessCases instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSwUserAccessCases instance.
func (me *TxsdSwUserAccessCases) Walk() (err error) {
	if fn := WalkHandlers.TxsdSwUserAccessCases; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SwUserAccessCase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SwUserAccessCases struct {
	SwUserAccessCases *TxsdSwUserAccessCases `xml:"SW-USER-ACCESS-CASES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SwUserAccessCases function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SwUserAccessCases instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SwUserAccessCases instance.
func (me *XsdGoPkgHasElem_SwUserAccessCases) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SwUserAccessCases; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwUserAccessCases.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserGroupRef struct {
	FmUserGroupRef *TxsdFmUserGroupRef `xml:"FM-USER-GROUP-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserGroupRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserGroupRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserGroupRef instance.
func (me *XsdGoPkgHasElem_FmUserGroupRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserGroupRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserGroupRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SwUserAccessCaseRef struct {
	SwUserAccessCaseRef *TxsdSwUserAccessCaseRef `xml:"SW-USER-ACCESS-CASE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SwUserAccessCaseRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SwUserAccessCaseRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SwUserAccessCaseRef instance.
func (me *XsdGoPkgHasElem_SwUserAccessCaseRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SwUserAccessCaseRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwUserAccessCaseRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCollectionRef struct {
	FmCollectionRef *TxsdFmCollectionRef `xml:"FM-COLLECTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCollectionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCollectionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCollectionRef instance.
func (me *XsdGoPkgHasElem_FmCollectionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCollectionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCollectionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmAccessDef struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmUserGroupRef

	XsdGoPkgHasElem_SwUserAccessCaseRef

	XsdGoPkgHasElem_FmCollectionRef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmAccessDef function is not nil (ie. was set by outside code), calls it with this TxsdFmAccessDef instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmAccessDef instance.
func (me *TxsdFmAccessDef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAccessDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmUserGroupRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SwUserAccessCaseRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollectionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAccessDef struct {
	FmAccessDefs []*TxsdFmAccessDef `xml:"FM-ACCESS-DEF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAccessDef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAccessDef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAccessDef instance.
func (me *XsdGoPkgHasElems_FmAccessDef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAccessDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAccessDefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserAccessDefinitions struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmAccessDef

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmUserAccessDefinitions function is not nil (ie. was set by outside code), calls it with this TxsdFmUserAccessDefinitions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmUserAccessDefinitions instance.
func (me *TxsdFmUserAccessDefinitions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserAccessDefinitions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmAccessDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserAccessDefinitions struct {
	FmUserAccessDefinitions *TxsdFmUserAccessDefinitions `xml:"FM-USER-ACCESS-DEFINITIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserAccessDefinitions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserAccessDefinitions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserAccessDefinitions instance.
func (me *XsdGoPkgHasElem_FmUserAccessDefinitions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserAccessDefinitions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserAccessDefinitions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmUserRightSpec struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmUserGroups

	XsdGoPkgHasElem_SwUserAccessCases

	XsdGoPkgHasElem_FmUserAccessDefinitions

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmUserRightSpec function is not nil (ie. was set by outside code), calls it with this TxsdFmUserRightSpec instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdFmUserRightSpec instance.
func (me *TxsdFmUserRightSpec) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmUserRightSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SwUserAccessCases.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserAccessDefinitions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserGroups.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserRightSpec struct {
	FmUserRightSpec *TxsdFmUserRightSpec `xml:"FM-USER-RIGHT-SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserRightSpec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserRightSpec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserRightSpec instance.
func (me *XsdGoPkgHasElem_FmUserRightSpec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserRightSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserRightSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestEquipment struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-TEST-EQUIPMENT"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestEquipment) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-TEST-EQUIPMENT")
}

type TxsdFmTestEquipmentRef struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestEquipment

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_IdRef_XsdtIdref_
}

//	If the WalkHandlers.TxsdFmTestEquipmentRef function is not nil (ie. was set by outside code), calls it with this TxsdFmTestEquipmentRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmTestEquipmentRef instance.
func (me *TxsdFmTestEquipmentRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestEquipmentRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestEquipmentRef struct {
	FmTestEquipmentRefs []*TxsdFmTestEquipmentRef `xml:"FM-TEST-EQUIPMENT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestEquipmentRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestEquipmentRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestEquipmentRef instance.
func (me *XsdGoPkgHasElems_FmTestEquipmentRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestEquipmentRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestEquipmentRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTestEquipmentRefs struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmTestEquipmentRef
}

//	If the WalkHandlers.TxsdFmTestEquipmentRefs function is not nil (ie. was set by outside code), calls it with this TxsdFmTestEquipmentRefs instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmTestEquipmentRefs instance.
func (me *TxsdFmTestEquipmentRefs) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestEquipmentRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTestEquipmentRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestEquipmentRefs struct {
	FmTestEquipmentRefs *TxsdFmTestEquipmentRefs `xml:"FM-TEST-EQUIPMENT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestEquipmentRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestEquipmentRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestEquipmentRefs instance.
func (me *XsdGoPkgHasElem_FmTestEquipmentRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestEquipmentRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestEquipmentRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTestSample struct {
	XsdGoPkgHasElem_Prms

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmTestEquipmentRefs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestSample

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmVersionInfo
}

//	If the WalkHandlers.TxsdFmTestSample function is not nil (ie. was set by outside code), calls it with this TxsdFmTestSample instance as the single argument. Then calls the Walk() method on 11/18 embed(s) and 0/0 field(s) belonging to this TxsdFmTestSample instance.
func (me *TxsdFmTestSample) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestSample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTestEquipmentRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestSample struct {
	FmTestSamples []*TxsdFmTestSample `xml:"FM-TEST-SAMPLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestSample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestSample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestSample instance.
func (me *XsdGoPkgHasElems_FmTestSample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestSample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestSamples {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTestSamples struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmTestSample

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTestSamples function is not nil (ie. was set by outside code), calls it with this TxsdFmTestSamples instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmTestSamples instance.
func (me *TxsdFmTestSamples) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestSamples; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTestSample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestSamples struct {
	FmTestSamples *TxsdFmTestSamples `xml:"FM-TEST-SAMPLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestSamples function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestSamples instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestSamples instance.
func (me *XsdGoPkgHasElem_FmTestSamples) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestSamples; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestSamples.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmSymbolicDateRef struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmSymbolicDate

	XsdGoPkgHasAttr_IdRef_XsdtIdref_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmSymbolicDateRef function is not nil (ie. was set by outside code), calls it with this TxsdFmSymbolicDateRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmSymbolicDateRef instance.
func (me *TxsdFmSymbolicDateRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmSymbolicDateRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSymbolicDateRef struct {
	FmSymbolicDateRef *TxsdFmSymbolicDateRef `xml:"FM-SYMBOLIC-DATE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSymbolicDateRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSymbolicDateRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSymbolicDateRef instance.
func (me *XsdGoPkgHasElem_FmSymbolicDateRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSymbolicDateRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSymbolicDateRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NotificationState struct {
	NotificationState *TxsdSub `xml:"NOTIFICATION-STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NotificationState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NotificationState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NotificationState instance.
func (me *XsdGoPkgHasElem_NotificationState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NotificationState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NotificationState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTaskSchedule struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Date1

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmSymbolicDateRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_NotificationState

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTaskSchedule function is not nil (ie. was set by outside code), calls it with this TxsdFmTaskSchedule instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdFmTaskSchedule instance.
func (me *TxsdFmTaskSchedule) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTaskSchedule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_NotificationState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSymbolicDateRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Date1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTaskSchedule struct {
	FmTaskSchedule *TxsdFmTaskSchedule `xml:"FM-TASK-SCHEDULE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTaskSchedule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTaskSchedule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTaskSchedule instance.
func (me *XsdGoPkgHasElem_FmTaskSchedule) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTaskSchedule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTaskSchedule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmActionState struct {
	FmActionState *TxsdSub `xml:"FM-ACTION-STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActionState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActionState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActionState instance.
func (me *XsdGoPkgHasElem_FmActionState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActionState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActionState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmResponsibleName struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmResponsibleName function is not nil (ie. was set by outside code), calls it with this TxsdFmResponsibleName instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdFmResponsibleName instance.
func (me *TxsdFmResponsibleName) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmResponsibleName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmResponsibleName struct {
	FmResponsibleName *TxsdFmResponsibleName `xml:"FM-RESPONSIBLE-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmResponsibleName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmResponsibleName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmResponsibleName instance.
func (me *XsdGoPkgHasElem_FmResponsibleName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmResponsibleName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmResponsibleName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmMeasureSequence struct {
	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmTaskSchedule

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmMeasureSequence

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmResponsibleName

	XsdGoPkgHasElem_FmActionState

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmVersionInfo
}

//	If the WalkHandlers.TxsdFmMeasureSequence function is not nil (ie. was set by outside code), calls it with this TxsdFmMeasureSequence instance as the single argument. Then calls the Walk() method on 14/21 embed(s) and 0/0 field(s) belonging to this TxsdFmMeasureSequence instance.
func (me *TxsdFmMeasureSequence) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMeasureSequence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTaskSchedule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmResponsibleName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActionState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMeasureSequence struct {
	FmMeasureSequences []*TxsdFmMeasureSequence `xml:"FM-MEASURE-SEQUENCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMeasureSequence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMeasureSequence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMeasureSequence instance.
func (me *XsdGoPkgHasElems_FmMeasureSequence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMeasureSequence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMeasureSequences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmMeasureSequences struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmMeasureSequence

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmMeasureSequences function is not nil (ie. was set by outside code), calls it with this TxsdFmMeasureSequences instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmMeasureSequences instance.
func (me *TxsdFmMeasureSequences) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmMeasureSequences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmMeasureSequence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMeasureSequences struct {
	FmMeasureSequences *TxsdFmMeasureSequences `xml:"FM-MEASURE-SEQUENCES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMeasureSequences function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMeasureSequences instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMeasureSequences instance.
func (me *XsdGoPkgHasElem_FmMeasureSequences) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMeasureSequences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMeasureSequences.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTestEquipment struct {
	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmTestEquipment

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Sdgs
}

//	If the WalkHandlers.TxsdFmTestEquipment function is not nil (ie. was set by outside code), calls it with this TxsdFmTestEquipment instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdFmTestEquipment instance.
func (me *TxsdFmTestEquipment) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestEquipment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestEquipment struct {
	FmTestEquipments []*TxsdFmTestEquipment `xml:"FM-TEST-EQUIPMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestEquipment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestEquipment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestEquipment instance.
func (me *XsdGoPkgHasElems_FmTestEquipment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestEquipment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestEquipments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmTestEquipments struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmTestEquipment

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmTestEquipments function is not nil (ie. was set by outside code), calls it with this TxsdFmTestEquipments instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmTestEquipments instance.
func (me *TxsdFmTestEquipments) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmTestEquipments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmTestEquipment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestEquipments struct {
	FmTestEquipments *TxsdFmTestEquipments `xml:"FM-TEST-EQUIPMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestEquipments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestEquipments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestEquipments instance.
func (me *XsdGoPkgHasElem_FmTestEquipments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestEquipments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestEquipments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Pubid_XsdtAnySimpleType_MsrDtdMsrFmeaDtdV220ApisLaiIaiXmlMlMsrfmeaDtdEn struct {
	Pubid xsdt.AnySimpleType `xml:"PUBID,attr"`
}

//	Returns the default value for Pubid -- "-//MSR//DTD MSR FMEA DTD:V2.2.0-APIS:LAI:IAI:XML:ML:MSRFMEA.DTD//EN"
func (me XsdGoPkgHasAttr_Pubid_XsdtAnySimpleType_MsrDtdMsrFmeaDtdV220ApisLaiIaiXmlMlMsrfmeaDtdEn) PubidDefault() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("-//MSR//DTD MSR FMEA DTD:V2.2.0-APIS:LAI:IAI:XML:ML:MSRFMEA.DTD//EN")
}

type XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Hydoc struct {
	Hytime xsdt.Nmtoken `xml:"HYTIME,attr"`
}

//	Returns the fixed value for Hytime -- "HYDOC"
func (me XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Hydoc) HytimeFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("HYDOC")
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmActionType struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-ACTION-TYPE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmActionType) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-ACTION-TYPE")
}

type TxsdFmActionTypeRef struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmActionType

	XsdGoPkgHasAttr_Hynames_XsdtNmtokens_LinkendIdRef

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Clink

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_IdRef_XsdtIdref_
}

//	If the WalkHandlers.TxsdFmActionTypeRef function is not nil (ie. was set by outside code), calls it with this TxsdFmActionTypeRef instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TxsdFmActionTypeRef instance.
func (me *TxsdFmActionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmActionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActionTypeRef struct {
	FmActionTypeRefs []*TxsdFmActionTypeRef `xml:"FM-ACTION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActionTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActionTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActionTypeRef instance.
func (me *XsdGoPkgHasElems_FmActionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionTypeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmActionTypeDecomposition struct {
	XsdGoPkgHasElems_FmActionTypeRef

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmActionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this TxsdFmActionTypeDecomposition instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmActionTypeDecomposition instance.
func (me *TxsdFmActionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmActionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmActionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmActionTypeDecomposition struct {
	FmActionTypeDecomposition *TxsdFmActionTypeDecomposition `xml:"FM-ACTION-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActionTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActionTypeDecomposition instance.
func (me *XsdGoPkgHasElem_FmActionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActionTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmActionType struct {
	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmTaskSchedule

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmActionType

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmActionTypeDecomposition

	XsdGoPkgHasElem_FmActionState

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmActionType function is not nil (ie. was set by outside code), calls it with this TxsdFmActionType instance as the single argument. Then calls the Walk() method on 14/21 embed(s) and 0/0 field(s) belonging to this TxsdFmActionType instance.
func (me *TxsdFmActionType) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmActionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTaskSchedule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActionTypeDecomposition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActionState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActionType struct {
	FmActionTypes []*TxsdFmActionType `xml:"FM-ACTION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActionType instance.
func (me *XsdGoPkgHasElems_FmActionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmActionTypes struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmActionType

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmActionTypes function is not nil (ie. was set by outside code), calls it with this TxsdFmActionTypes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmActionTypes instance.
func (me *TxsdFmActionTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmActionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmActionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmActionTypes struct {
	FmActionTypes *TxsdFmActionTypes `xml:"FM-ACTION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActionTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActionTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActionTypes instance.
func (me *XsdGoPkgHasElem_FmActionTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActionTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingConditionTypeRef struct {
	FmOperatingConditionTypeRef *TxsdFmOperatingConditionTypeRef `xml:"FM-OPERATING-CONDITION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingConditionTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingConditionTypeRef instance.
func (me *XsdGoPkgHasElem_FmOperatingConditionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingConditionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOperatingCondition struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmTaskHistory

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_FmOperatingConditionTypeRef

	XsdGoPkgHasElem_FmSignificance

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmClassification

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmOperatingCondition

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmCauses

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations
}

//	If the WalkHandlers.TxsdFmOperatingCondition function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingCondition instance as the single argument. Then calls the Walk() method on 15/22 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingCondition instance.
func (me *TxsdFmOperatingCondition) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmTaskHistory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOperatingConditionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSignificance.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmClassification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCauses.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingCondition struct {
	FmOperatingConditions []*TxsdFmOperatingCondition `xml:"FM-OPERATING-CONDITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingCondition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingCondition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingCondition instance.
func (me *XsdGoPkgHasElems_FmOperatingCondition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmOperatingConditions struct {
	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmOperatingCondition
}

//	If the WalkHandlers.TxsdFmOperatingConditions function is not nil (ie. was set by outside code), calls it with this TxsdFmOperatingConditions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmOperatingConditions instance.
func (me *TxsdFmOperatingConditions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmOperatingConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmOperatingCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingConditions struct {
	FmOperatingConditions *TxsdFmOperatingConditions `xml:"FM-OPERATING-CONDITIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingConditions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingConditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingConditions instance.
func (me *XsdGoPkgHasElem_FmOperatingConditions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingConditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModificationType struct {
	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmDrbfmModificationType

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Annotations
}

//	If the WalkHandlers.TxsdFmDrbfmModificationType function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationType instance as the single argument. Then calls the Walk() method on 8/15 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationType instance.
func (me *TxsdFmDrbfmModificationType) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationType struct {
	FmDrbfmModificationTypes []*TxsdFmDrbfmModificationType `xml:"FM-DRBFM-MODIFICATION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationType instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationTypes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmDrbfmModificationTypes struct {
	XsdGoPkgHasElems_FmDrbfmModificationType

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmDrbfmModificationTypes function is not nil (ie. was set by outside code), calls it with this TxsdFmDrbfmModificationTypes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmDrbfmModificationTypes instance.
func (me *TxsdFmDrbfmModificationTypes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmDrbfmModificationTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmDrbfmModificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationTypes struct {
	FmDrbfmModificationTypes *TxsdFmDrbfmModificationTypes `xml:"FM-DRBFM-MODIFICATION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationTypes instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFtaNode struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "FM-FTA-NODE"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFtaNode) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("FM-FTA-NODE")
}

type TxsdFmFtaNode struct {
	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmFtaParameters

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmFtaNode

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFtaNode function is not nil (ie. was set by outside code), calls it with this TxsdFmFtaNode instance as the single argument. Then calls the Walk() method on 8/15 embed(s) and 0/0 field(s) belonging to this TxsdFmFtaNode instance.
func (me *TxsdFmFtaNode) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFtaNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFtaParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFtaNode struct {
	FmFtaNodes []*TxsdFmFtaNode `xml:"FM-FTA-NODE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFtaNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFtaNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFtaNode instance.
func (me *XsdGoPkgHasElems_FmFtaNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFtaNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFtaNodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmFtaNodes struct {
	XsdGoPkgHasElems_FmFtaNode

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmFtaNodes function is not nil (ie. was set by outside code), calls it with this TxsdFmFtaNodes instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmFtaNodes instance.
func (me *TxsdFmFtaNodes) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmFtaNodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmFtaNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFtaNodes struct {
	FmFtaNodes *TxsdFmFtaNodes `xml:"FM-FTA-NODES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFtaNodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFtaNodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFtaNodes instance.
func (me *XsdGoPkgHasElem_FmFtaNodes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFtaNodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFtaNodes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdChapterBreak xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdChapterBreak is "BREAK".
func (me TxsdChapterBreak) IsBreak() bool { return me.String() == "BREAK" }

//	Returns true if the value of this enumerated TxsdChapterBreak is "NO-BREAK".
func (me TxsdChapterBreak) IsNoBreak() bool { return me.String() == "NO-BREAK" }

//	Since TxsdChapterBreak is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdChapterBreak) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdChapterBreak is just a simple String type, this merely returns the current string value.
func (me TxsdChapterBreak) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdChapterBreak's alias type xsdt.Nmtoken.
func (me TxsdChapterBreak) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Break_TxsdChapterBreak_ struct {
	Break TxsdChapterBreak `xml:"BREAK,attr"`
}

type XsdGoPkgHasElem_SynInclude struct {
	SynInclude *TxsdCond `xml:"SYN-INCLUDE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynInclude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynInclude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynInclude instance.
func (me *XsdGoPkgHasElem_SynInclude) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynInclude; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynInclude.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynObject struct {
	XsdGoPkgHasElem_ItemLabel

	XsdGoPkgHasElems_P

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSynObject function is not nil (ie. was set by outside code), calls it with this TxsdSynObject instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdSynObject instance.
func (me *TxsdSynObject) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ItemLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynObject struct {
	SynObjects []*TxsdSynObject `xml:"SYN-OBJECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynObject instance.
func (me *XsdGoPkgHasElems_SynObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynObjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynObjects struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_SynObject

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSynObjects function is not nil (ie. was set by outside code), calls it with this TxsdSynObjects instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSynObjects instance.
func (me *TxsdSynObjects) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynObjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SynObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynObjects struct {
	SynObjects *TxsdSynObjects `xml:"SYN-OBJECTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynObjects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynObjects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynObjects instance.
func (me *XsdGoPkgHasElem_SynObjects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynObjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynObjects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Prms struct {
	Prmses []*TxsdPrms `xml:"PRMS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Prms function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Prms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Prms instance.
func (me *XsdGoPkgHasElems_Prms) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Prms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Prmses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryResultP1 struct {
	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Prms

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_SynSynopsis

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryResultP1 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryResultP1 instance as the single argument. Then calls the Walk() method on 10/16 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryResultP1 instance.
func (me *TxsdMsrQueryResultP1) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryResultP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryResultP1 struct {
	MsrQueryResultP1 *TxsdMsrQueryResultP1 `xml:"MSR-QUERY-RESULT-P-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryResultP1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryResultP1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryResultP1 instance.
func (me *XsdGoPkgHasElem_MsrQueryResultP1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryResultP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryResultP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryP1 struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_MsrQueryProps

	XsdGoPkgHasElem_MsrQueryResultP1

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryP1 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryP1 instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryP1 instance.
func (me *TxsdMsrQueryP1) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrQueryResultP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryP1 struct {
	MsrQueryP1s []*TxsdMsrQueryP1 `xml:"MSR-QUERY-P-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryP1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryP1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryP1 instance.
func (me *XsdGoPkgHasElems_MsrQueryP1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryP1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAddInfo5 struct {
	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_SynSynopsis

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_MsrQueryP1

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdAddInfo5 function is not nil (ie. was set by outside code), calls it with this TxsdAddInfo5 instance as the single argument. Then calls the Walk() method on 10/16 embed(s) and 0/0 field(s) belonging to this TxsdAddInfo5 instance.
func (me *TxsdAddInfo5) Walk() (err error) {
	if fn := WalkHandlers.TxsdAddInfo5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AddInfo5 struct {
	AddInfo5 *TxsdAddInfo5 `xml:"ADD-INFO-5"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AddInfo5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AddInfo5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AddInfo5 instance.
func (me *XsdGoPkgHasElem_AddInfo5) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AddInfo5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AddInfo5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynReturnValue struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AddInfo5

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSynReturnValue function is not nil (ie. was set by outside code), calls it with this TxsdSynReturnValue instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdSynReturnValue instance.
func (me *TxsdSynReturnValue) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynReturnValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AddInfo5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynReturnValue struct {
	SynReturnValue *TxsdSynReturnValue `xml:"SYN-RETURN-VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynReturnValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynReturnValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynReturnValue instance.
func (me *XsdGoPkgHasElem_SynReturnValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynReturnValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynReturnValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynExample struct {
	SynExample *TxsdSynReturnValue `xml:"SYN-EXAMPLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynExample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynExample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynExample instance.
func (me *XsdGoPkgHasElem_SynExample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynExample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynExample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynSeeAlso struct {
	SynSeeAlso *TxsdCond `xml:"SYN-SEE-ALSO"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynSeeAlso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynSeeAlso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynSeeAlso instance.
func (me *XsdGoPkgHasElem_SynSeeAlso) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynSeeAlso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynSeeAlso.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynArgument struct {
	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_ItemLabel

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_AddInfo5

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSynArgument function is not nil (ie. was set by outside code), calls it with this TxsdSynArgument instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdSynArgument instance.
func (me *TxsdSynArgument) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynArgument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ItemLabel.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AddInfo5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynArgument struct {
	SynArguments []*TxsdSynArgument `xml:"SYN-ARGUMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynArgument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynArgument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynArgument instance.
func (me *XsdGoPkgHasElems_SynArgument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynArgument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynArguments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynArguments struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_SynArgument

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSynArguments function is not nil (ie. was set by outside code), calls it with this TxsdSynArguments instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSynArguments instance.
func (me *TxsdSynArguments) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynArguments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SynArgument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynArguments struct {
	SynArguments *TxsdSynArguments `xml:"SYN-ARGUMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynArguments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynArguments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynArguments instance.
func (me *XsdGoPkgHasElem_SynArguments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynArguments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynArguments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynSemantics struct {
	SynSemantics *TxsdSynReturnValue `xml:"SYN-SEMANTICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynSemantics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynSemantics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynSemantics instance.
func (me *XsdGoPkgHasElem_SynSemantics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynSemantics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynSemantics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FNamespace_XsdtNmtoken_Synopsis struct {
	FNamespace xsdt.Nmtoken `xml:"F-NAMESPACE,attr"`
}

//	Returns the fixed value for FNamespace -- "SYNOPSIS"
func (me XsdGoPkgHasAttr_FNamespace_XsdtNmtoken_Synopsis) FNamespaceFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("SYNOPSIS")
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Synopsis struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "SYNOPSIS"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Synopsis) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("SYNOPSIS")
}

type TxsdSynCaption struct {
	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_FNamespace_XsdtNmtoken_Synopsis

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Synopsis
}

//	If the WalkHandlers.TxsdSynCaption function is not nil (ie. was set by outside code), calls it with this TxsdSynCaption instance as the single argument. Then calls the Walk() method on 4/12 embed(s) and 0/0 field(s) belonging to this TxsdSynCaption instance.
func (me *TxsdSynCaption) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynCaption struct {
	SynCaption *TxsdSynCaption `xml:"SYN-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynCaption instance.
func (me *XsdGoPkgHasElem_SynCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynFormat struct {
	SynFormats []*TxsdAnnotationText `xml:"SYN-FORMAT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynFormat instance.
func (me *XsdGoPkgHasElems_SynFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynFormats {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynFormats struct {
	XsdGoPkgHasElems_SynFormat

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdSynFormats function is not nil (ie. was set by outside code), calls it with this TxsdSynFormats instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdSynFormats instance.
func (me *TxsdSynFormats) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynFormats; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_SynFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynFormats struct {
	SynFormats *TxsdSynFormats `xml:"SYN-FORMATS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynFormats function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynFormats instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynFormats instance.
func (me *XsdGoPkgHasElem_SynFormats) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynFormats; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynFormats.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSynSynopsis struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_SynCaption

	XsdGoPkgHasElem_SynFormats

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_SynInclude

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_SynObjects

	XsdGoPkgHasElem_SynReturnValue

	XsdGoPkgHasElem_SynExample

	XsdGoPkgHasElem_SynSeeAlso

	XsdGoPkgHasElem_SynArguments

	XsdGoPkgHasElem_SynSemantics
}

//	If the WalkHandlers.TxsdSynSynopsis function is not nil (ie. was set by outside code), calls it with this TxsdSynSynopsis instance as the single argument. Then calls the Walk() method on 9/14 embed(s) and 0/0 field(s) belonging to this TxsdSynSynopsis instance.
func (me *TxsdSynSynopsis) Walk() (err error) {
	if fn := WalkHandlers.TxsdSynSynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_SynInclude.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynReturnValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynObjects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynSemantics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynExample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynSeeAlso.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynArguments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynFormats.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SynCaption.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynSynopsis struct {
	SynSynopsises []*TxsdSynSynopsis `xml:"SYN-SYNOPSIS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynSynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynSynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynSynopsis instance.
func (me *XsdGoPkgHasElems_SynSynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynSynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynSynopsises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Chapter struct {
	FIdClass xsdt.Nmtoken `xml:"F-ID-CLASS,attr"`
}

//	Returns the fixed value for FIdClass -- "CHAPTER"
func (me XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Chapter) FIdClassFixed() xsdt.Nmtoken {
	return xsdt.Nmtoken("CHAPTER")
}

type TxsdTopic1 struct {
	XsdGoPkgHasElems_Prms

	XsdGoPkgHasElems_P

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_MsrQueryP1

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_SynSynopsis

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Topic

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdTopic1 function is not nil (ie. was set by outside code), calls it with this TxsdTopic1 instance as the single argument. Then calls the Walk() method on 14/23 embed(s) and 0/0 field(s) belonging to this TxsdTopic1 instance.
func (me *TxsdTopic1) Walk() (err error) {
	if fn := WalkHandlers.TxsdTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SynSynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Topic1 struct {
	Topic1s []*TxsdTopic1 `xml:"TOPIC-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Topic1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Topic1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Topic1 instance.
func (me *XsdGoPkgHasElems_Topic1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Topic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Topic1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryResultTopic1 struct {
	XsdGoPkgHasElems_Topic1

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryResultTopic1 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryResultTopic1 instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryResultTopic1 instance.
func (me *TxsdMsrQueryResultTopic1) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryResultTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Topic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryResultTopic1 struct {
	MsrQueryResultTopic1 *TxsdMsrQueryResultTopic1 `xml:"MSR-QUERY-RESULT-TOPIC-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryResultTopic1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryResultTopic1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryResultTopic1 instance.
func (me *XsdGoPkgHasElem_MsrQueryResultTopic1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryResultTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryResultTopic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryTopic1 struct {
	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_MsrQueryProps

	XsdGoPkgHasElem_MsrQueryResultTopic1

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryTopic1 function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryTopic1 instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryTopic1 instance.
func (me *TxsdMsrQueryTopic1) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrQueryResultTopic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryTopic1 struct {
	MsrQueryTopic1s []*TxsdMsrQueryTopic1 `xml:"MSR-QUERY-TOPIC-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryTopic1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryTopic1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryTopic1 instance.
func (me *XsdGoPkgHasElems_MsrQueryTopic1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryTopic1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIntroduction struct {
	XsdGoPkgHasElems_P

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Topic2

	XsdGoPkgHasElems_MsrQueryTopic2

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_MsrQueryP2

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElems_Note
}

//	If the WalkHandlers.TxsdIntroduction function is not nil (ie. was set by outside code), calls it with this TxsdIntroduction instance as the single argument. Then calls the Walk() method on 12/17 embed(s) and 0/0 field(s) belonging to this TxsdIntroduction instance.
func (me *TxsdIntroduction) Walk() (err error) {
	if fn := WalkHandlers.TxsdIntroduction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Topic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryTopic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Introduction struct {
	Introduction *TxsdIntroduction `xml:"INTRODUCTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Introduction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Introduction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Introduction instance.
func (me *XsdGoPkgHasElem_Introduction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Introduction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Introduction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryResultChapter struct {
	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryResultChapter function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryResultChapter instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryResultChapter instance.
func (me *TxsdMsrQueryResultChapter) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryResultChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryResultChapter struct {
	MsrQueryResultChapter *TxsdMsrQueryResultChapter `xml:"MSR-QUERY-RESULT-CHAPTER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryResultChapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryResultChapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryResultChapter instance.
func (me *XsdGoPkgHasElem_MsrQueryResultChapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryResultChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryResultChapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrQueryChapter struct {
	XsdGoPkgHasElem_MsrQueryProps

	XsdGoPkgHasElem_MsrQueryResultChapter

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrQueryChapter function is not nil (ie. was set by outside code), calls it with this TxsdMsrQueryChapter instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TxsdMsrQueryChapter instance.
func (me *TxsdMsrQueryChapter) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrQueryChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_MsrQueryProps.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrQueryResultChapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryChapter struct {
	MsrQueryChapters []*TxsdMsrQueryChapter `xml:"MSR-QUERY-CHAPTER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryChapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryChapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryChapter instance.
func (me *XsdGoPkgHasElems_MsrQueryChapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryChapters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdChapter struct {
	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_Note

	XsdGoPkgHasElems_Topic1

	XsdGoPkgHasElems_MsrQueryTopic1

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Introduction

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasElems_MsrQueryChapter

	XsdGoPkgHasAttr_KeepWithPrevious_TkeepWithPreviousType_

	XsdGoPkgHasElems_P

	XsdGoPkgHasAttr_HelpEntry_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElems_List

	XsdGoPkgHasAttr_Break_TxsdChapterBreak_

	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_Chapter

	XsdGoPkgHasElems_SynSynopsis

	XsdGoPkgHasElems_MsrQueryP1

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasElems_Prms

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElems_Table
}

//	If the WalkHandlers.TxsdChapter function is not nil (ie. was set by outside code), calls it with this TxsdChapter instance as the single argument. Then calls the Walk() method on 19/30 embed(s) and 0/0 field(s) belonging to this TxsdChapter instance.
func (me *TxsdChapter) Walk() (err error) {
	if fn := WalkHandlers.TxsdChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Topic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryTopic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Introduction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryChapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SynSynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Chapter struct {
	Chapters []*TxsdChapter `xml:"CHAPTER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Chapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Chapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Chapter instance.
func (me *XsdGoPkgHasElems_Chapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Chapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Chapters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrProcessingLog struct {
	XsdGoPkgHasElems_Verbatim

	XsdGoPkgHasElems_List

	XsdGoPkgHasElems_LabeledList

	XsdGoPkgHasElems_Note

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_Prms

	XsdGoPkgHasElems_Figure

	XsdGoPkgHasElems_Formula

	XsdGoPkgHasElems_Chapter

	XsdGoPkgHasElems_MsrQueryChapter

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_Topic1

	XsdGoPkgHasElems_Table

	XsdGoPkgHasElems_MsrQueryP1

	XsdGoPkgHasElems_P

	XsdGoPkgHasElems_DefList

	XsdGoPkgHasElems_MsrQueryTopic1

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdMsrProcessingLog function is not nil (ie. was set by outside code), calls it with this TxsdMsrProcessingLog instance as the single argument. Then calls the Walk() method on 15/20 embed(s) and 0/0 field(s) belonging to this TxsdMsrProcessingLog instance.
func (me *TxsdMsrProcessingLog) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrProcessingLog; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_MsrQueryTopic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Verbatim.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MsrQueryChapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Prms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Figure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Chapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Topic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrProcessingLog struct {
	MsrProcessingLog *TxsdMsrProcessingLog `xml:"MSR-PROCESSING-LOG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrProcessingLog function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrProcessingLog instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrProcessingLog instance.
func (me *XsdGoPkgHasElem_MsrProcessingLog) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrProcessingLog; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrProcessingLog.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FCmToolId_XsdtAnySimpleType_IdMsrfmeaV220MlDtdV08122008 struct {
	FCmToolId xsdt.AnySimpleType `xml:"F-CM-TOOL-ID,attr"`
}

//	Returns the fixed value for FCmToolId -- "$Id: msrfmea_v2_2_0.ml.dtd,v 08.12.2008$"
func (me XsdGoPkgHasAttr_FCmToolId_XsdtAnySimpleType_IdMsrfmeaV220MlDtdV08122008) FCmToolIdFixed() xsdt.AnySimpleType {
	return xsdt.AnySimpleType("$Id: msrfmea_v2_2_0.ml.dtd,v 08.12.2008$")
}

type XsdGoPkgHasElem_FmActionTypeRef struct {
	FmActionTypeRef *TxsdFmActionTypeRef `xml:"FM-ACTION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActionTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActionTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActionTypeRef instance.
func (me *XsdGoPkgHasElem_FmActionTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActionTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmHistoryState struct {
	XsdGoPkgHasElem_FmActionState

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasElem_FmTaskSchedule

	XsdGoPkgHasElem_MiscData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmHistoryState function is not nil (ie. was set by outside code), calls it with this TxsdFmHistoryState instance as the single argument. Then calls the Walk() method on 5/10 embed(s) and 0/0 field(s) belonging to this TxsdFmHistoryState instance.
func (me *TxsdFmHistoryState) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmHistoryState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmActionState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTaskSchedule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmHistoryState struct {
	FmHistoryStates []*TxsdFmHistoryState `xml:"FM-HISTORY-STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmHistoryState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmHistoryState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmHistoryState instance.
func (me *XsdGoPkgHasElems_FmHistoryState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmHistoryState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmHistoryStates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmHistoryStates struct {
	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmHistoryState

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmHistoryStates function is not nil (ie. was set by outside code), calls it with this TxsdFmHistoryStates instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmHistoryStates instance.
func (me *TxsdFmHistoryStates) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmHistoryStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmHistoryState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmHistoryStates struct {
	FmHistoryStates *TxsdFmHistoryStates `xml:"FM-HISTORY-STATES"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmHistoryStates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmHistoryStates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmHistoryStates instance.
func (me *XsdGoPkgHasElem_FmHistoryStates) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmHistoryStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmHistoryStates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Usedascontrolmethod_TxsdFmControlPlanParametersUsedascontrolmethod_ struct {
	Usedascontrolmethod TxsdFmDrbfmParametersIsdrbfmcause `xml:"USEDASCONTROLMETHOD,attr"`
}

type XsdGoPkgHasAttr_Usedasreactionplan_TxsdFmControlPlanParametersUsedasreactionplan_ struct {
	Usedasreactionplan TxsdFmDrbfmParametersIsdrbfmcause `xml:"USEDASREACTIONPLAN,attr"`
}

type XsdGoPkgHasAttr_Cprelevant_TxsdFmControlPlanParametersCprelevant_ struct {
	Cprelevant TxsdFmDrbfmParametersIsdrbfmcause `xml:"CPRELEVANT,attr"`
}

type XsdGoPkgHasAttr_Formrelevant_TxsdFmControlPlanParametersFormrelevant_ struct {
	Formrelevant TxsdFmDrbfmParametersIsdrbfmcause `xml:"FORMRELEVANT,attr"`
}

type XsdGoPkgHasAttr_Dop_XsdtAnySimpleType_ struct {
	Dop xsdt.AnySimpleType `xml:"DOP,attr"`
}

type TxsdFmControlPlanParameters struct {
	XsdGoPkgHasAttr_Formrelevant_TxsdFmControlPlanParametersFormrelevant_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Cprelevant_TxsdFmControlPlanParametersCprelevant_

	XsdGoPkgHasElem_LongName

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Dop_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Usedasreactionplan_TxsdFmControlPlanParametersUsedasreactionplan_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_Category

	XsdGoPkgHasAttr_Usedascontrolmethod_TxsdFmControlPlanParametersUsedascontrolmethod_

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasElem_Annotations
}

//	If the WalkHandlers.TxsdFmControlPlanParameters function is not nil (ie. was set by outside code), calls it with this TxsdFmControlPlanParameters instance as the single argument. Then calls the Walk() method on 8/18 embed(s) and 0/0 field(s) belonging to this TxsdFmControlPlanParameters instance.
func (me *TxsdFmControlPlanParameters) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmControlPlanParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmControlPlanParameters struct {
	FmControlPlanParameters *TxsdFmControlPlanParameters `xml:"FM-CONTROL-PLAN-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmControlPlanParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmControlPlanParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmControlPlanParameters instance.
func (me *XsdGoPkgHasElem_FmControlPlanParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmControlPlanParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmControlPlanParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmAction struct {
	XsdGoPkgHasElem_LongName

	XsdGoPkgHasElem_FmHistoryStates

	XsdGoPkgHasElem_FmVersionInfo

	XsdGoPkgHasElem_Annotations

	XsdGoPkgHasElem_FmTaskSchedule

	XsdGoPkgHasElem_FmActionState

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmAnalysisdesktopParameters

	XsdGoPkgHasElem_FmDrbfmParameters

	XsdGoPkgHasElem_Sdgs

	XsdGoPkgHasAttr_FIdClass_XsdtNmtoken_FmAction

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_Id_XsdtId_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_Remark

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_Desc

	XsdGoPkgHasElem_FmUserdefinedAttributeRefs

	XsdGoPkgHasElem_FmControlPlanParameters

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmLinkDestinations

	XsdGoPkgHasElem_FmIecParameters

	XsdGoPkgHasElem_FmOverlayImage

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasElem_Category

	XsdGoPkgHasElem_FmActionTypeRef

	XsdGoPkgHasElem_TeamMemberRef

	XsdGoPkgHasElem_MiscData
}

//	If the WalkHandlers.TxsdFmAction function is not nil (ie. was set by outside code), calls it with this TxsdFmAction instance as the single argument. Then calls the Walk() method on 22/29 embed(s) and 0/0 field(s) belonging to this TxsdFmAction instance.
func (me *TxsdFmAction) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Remark.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributeRefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmControlPlanParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmLinkDestinations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmIecParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOverlayImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActionTypeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TeamMemberRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Category.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmHistoryStates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVersionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_LongName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTaskSchedule.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActionState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Annotations.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Sdgs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAnalysisdesktopParameters.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAction struct {
	FmActions []*TxsdFmAction `xml:"FM-ACTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAction instance.
func (me *XsdGoPkgHasElems_FmAction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFmActions struct {
	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElems_FmAction

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_
}

//	If the WalkHandlers.TxsdFmActions function is not nil (ie. was set by outside code), calls it with this TxsdFmActions instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdFmActions instance.
func (me *TxsdFmActions) Walk() (err error) {
	if fn := WalkHandlers.TxsdFmActions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FmAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmActions struct {
	FmActions *TxsdFmActions `xml:"FM-ACTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActions instance.
func (me *XsdGoPkgHasElem_FmActions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMsrfmea struct {
	XsdGoPkgHasAttr_Pubid_XsdtAnySimpleType_MsrDtdMsrFmeaDtdV220ApisLaiIaiXmlMlMsrfmeaDtdEn

	XsdGoPkgHasElem_FmActionTypes

	XsdGoPkgHasElem_FmOperatingConditions

	XsdGoPkgHasAttr_Hytime_XsdtNmtoken_Hydoc

	XsdGoPkgHasElem_FmFtaNodes

	XsdGoPkgHasElem_MsrProcessingLog

	XsdGoPkgHasAttr_FCmToolId_XsdtAnySimpleType_IdMsrfmeaV220MlDtdV08122008

	XsdGoPkgHasElem_FmDrbfmModificationTypes

	XsdGoPkgHasElem_FmActions

	XsdGoPkgHasElem_FmHead

	XsdGoPkgHasElem_FmToolData

	XsdGoPkgHasElem_FmCharacteristics

	XsdGoPkgHasElem_FmDrbfmProjects

	XsdGoPkgHasElem_FmAssessmentCatalogs

	XsdGoPkgHasElem_AdminData

	XsdGoPkgHasAttr_S_XsdtAnySimpleType_

	XsdGoPkgHasAttr_Si_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmMachines

	XsdGoPkgHasAttr_FDtdVersion_XsdtAnySimpleType_222Apis

	XsdGoPkgHasElem_FmStructures

	XsdGoPkgHasElem_FmSymbolicDates

	XsdGoPkgHasElem_Locs

	XsdGoPkgHasAttr_Syscond_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmProcessDiagrams

	XsdGoPkgHasElem_SpecialData

	XsdGoPkgHasAttr_FPubid_XsdtAnySimpleType_MsrDtdMsrFmeaDtdV220ApisLaiIaiXmlMlMsrfmeaDtdEn

	XsdGoPkgHasElem_FmControlPlans

	XsdGoPkgHasElem_FmOperatingConditionTypes

	XsdGoPkgHasElem_MatchingDcis

	XsdGoPkgHasElem_FmFaults

	XsdGoPkgHasElem_FmStructureElements

	XsdGoPkgHasElem_FmFormSheets

	XsdGoPkgHasElem_FmVariants

	XsdGoPkgHasElem_ShortName

	XsdGoPkgHasElem_FmErrorDetections

	XsdGoPkgHasElem_FmCharacteristicTypes

	XsdGoPkgHasElem_FmProjects

	XsdGoPkgHasElem_FmSymbolSpec

	XsdGoPkgHasAttr_FNamespace_XsdtNmtokens_ChapterCompanyDefItemExternalFigureFmActionFmActionTypeFmAssessmentCatalogFmCharacteristicFmCharacteristicTypeFmCollectionFmControlPlanFmFaultFmFaultTypeFmFormSheetFmFormSheetPresentationVersionFmFunctionFmFunctionTypeFmPaletteFmPaletteColumnFmPaletteRowFmPartListEntryFmProcessDiagramFmProjectFmStructureFmStructureElementFmTaskSetFmTaskSetsFmTeamFmToolFmUserGroupFmVariantFormulaPrmSampleSdgStdSwUserAccessCaseTableTeamMemberTopicXdocXfileXrefTarget

	XsdGoPkgHasAttr_View_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmCollections

	XsdGoPkgHasElem_FmFaultTypes

	XsdGoPkgHasElem_FmDrbfmModifications

	XsdGoPkgHasElem_FmUserdefinedAttributes

	XsdGoPkgHasElem_FmFunctionTypes

	XsdGoPkgHasElem_FmErrorResponss

	XsdGoPkgHasElem_FmDrbfmSheets

	XsdGoPkgHasElem_FmUserRightSpec

	XsdGoPkgHasElem_FmTestSamples

	XsdGoPkgHasAttr_FDtdBuild_XsdtAnySimpleType_16

	XsdGoPkgHasElem_FmFunctions

	XsdGoPkgHasElem_FmTestEquipments

	XsdGoPkgHasAttr_T_XsdtAnySimpleType_

	XsdGoPkgHasElem_FmMeasureSequences
}

//	If the WalkHandlers.TxsdMsrfmea function is not nil (ie. was set by outside code), calls it with this TxsdMsrfmea instance as the single argument. Then calls the Walk() method on 42/54 embed(s) and 0/0 field(s) belonging to this TxsdMsrfmea instance.
func (me *TxsdMsrfmea) Walk() (err error) {
	if fn := WalkHandlers.TxsdMsrfmea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FmActionTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOperatingConditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmModificationTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFtaNodes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MsrProcessingLog.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmActions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmProjects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmAssessmentCatalogs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AdminData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmHead.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmToolData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCharacteristics.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructures.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmMachines.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmProcessDiagrams.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSymbolicDates.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Locs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmControlPlans.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SpecialData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaults.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmOperatingConditionTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_MatchingDcis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ShortName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmStructureElements.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFormSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmVariants.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCharacteristicTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmErrorDetections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmSymbolSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmProjects.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmCollections.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFunctionTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFaultTypes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmModifications.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserdefinedAttributes.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmFunctions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmErrorResponss.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmDrbfmSheets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmUserRightSpec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTestSamples.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmMeasureSequences.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FmTestEquipments.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Msrfmea struct {
	Msrfmea *TxsdMsrfmea `xml:"MSRFMEA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Msrfmea function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Msrfmea instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Msrfmea instance.
func (me *XsdGoPkgHasElem_Msrfmea) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Msrfmea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Msrfmea.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Msrfmea struct {
	Msrfmeas []*TxsdMsrfmea `xml:"MSRFMEA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Msrfmea function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Msrfmea instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Msrfmea instance.
func (me *XsdGoPkgHasElems_Msrfmea) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Msrfmea; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Msrfmeas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Abs struct {
	Abses []*TxsdMin `xml:"ABS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Abs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Abs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Abs instance.
func (me *XsdGoPkgHasElems_Abs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Abs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Abses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AddInfo5 struct {
	AddInfo5s []*TxsdAddInfo5 `xml:"ADD-INFO-5"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AddInfo5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AddInfo5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AddInfo5 instance.
func (me *XsdGoPkgHasElems_AddInfo5) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AddInfo5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AddInfo5s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Address struct {
	Addresses []*TxsdSub `xml:"ADDRESS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Addresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AdminData struct {
	AdminDatas []*TxsdAdminData `xml:"ADMIN-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AdminData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdminData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdminData instance.
func (me *XsdGoPkgHasElems_AdminData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AdminData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdminDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Annotation struct {
	Annotation *TxsdAnnotation `xml:"ANNOTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Annotation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Annotation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Annotation instance.
func (me *XsdGoPkgHasElem_Annotation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Annotation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Annotation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnnotationOrigin struct {
	AnnotationOrigins []*TxsdSub `xml:"ANNOTATION-ORIGIN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnnotationOrigin function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnnotationOrigin instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnnotationOrigin instance.
func (me *XsdGoPkgHasElems_AnnotationOrigin) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnnotationOrigin; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnnotationOrigins {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AnnotationText struct {
	AnnotationTexts []*TxsdAnnotationText `xml:"ANNOTATION-TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AnnotationText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AnnotationText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AnnotationText instance.
func (me *XsdGoPkgHasElems_AnnotationText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AnnotationText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnnotationTexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Annotations struct {
	Annotationses []*TxsdAnnotations `xml:"ANNOTATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Annotations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Annotations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Annotations instance.
func (me *XsdGoPkgHasElems_Annotations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Annotations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Annotationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Area struct {
	Area *TxsdArea `xml:"AREA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Area function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Area instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Area instance.
func (me *XsdGoPkgHasElem_Area) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Area; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Area.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Br struct {
	Br *TxsdBr `xml:"BR"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Br function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Br instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Br instance.
func (me *XsdGoPkgHasElem_Br) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Br; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Br.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CCode struct {
	CCodes []*TxsdRevisionLabel `xml:"C-CODE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CCode instance.
func (me *XsdGoPkgHasElems_CCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CCodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Category struct {
	Categories []*TxsdSub `xml:"CATEGORY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Category function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Category instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Category instance.
func (me *XsdGoPkgHasElems_Category) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Category; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Categories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Change struct {
	Changes []*TxsdMsrQueryResultText `xml:"CHANGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Change function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Change instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Change instance.
func (me *XsdGoPkgHasElems_Change) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Change; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Changes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Chapter struct {
	Chapter *TxsdChapter `xml:"CHAPTER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Chapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Chapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Chapter instance.
func (me *XsdGoPkgHasElem_Chapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Chapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Chapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_City struct {
	Cities []*TxsdSub `xml:"CITY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_City function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_City instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_City instance.
func (me *XsdGoPkgHasElems_City) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_City; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Colspec struct {
	Colspec *TxsdColspec `xml:"COLSPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Colspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Colspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Colspec instance.
func (me *XsdGoPkgHasElem_Colspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Colspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Colspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Comment struct {
	Comments []*TxsdSub `xml:"COMMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Comment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Comment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Comment instance.
func (me *XsdGoPkgHasElems_Comment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Comment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Comments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Companies struct {
	Companieses []*TxsdCompanies `xml:"COMPANIES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Companies function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Companies instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Companies instance.
func (me *XsdGoPkgHasElems_Companies) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Companies; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Companieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Company struct {
	Company *TxsdCompany `xml:"COMPANY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Company function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Company instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Company instance.
func (me *XsdGoPkgHasElem_Company) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Company; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Company.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompanyDocInfo struct {
	CompanyDocInfo *TxsdCompanyDocInfo `xml:"COMPANY-DOC-INFO"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyDocInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyDocInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompanyDocInfo instance.
func (me *XsdGoPkgHasElem_CompanyDocInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyDocInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompanyDocInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyDocInfos struct {
	CompanyDocInfoses []*TxsdCompanyDocInfos `xml:"COMPANY-DOC-INFOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyDocInfos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyDocInfos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyDocInfos instance.
func (me *XsdGoPkgHasElems_CompanyDocInfos) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyDocInfos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompanyDocInfoses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyRef struct {
	CompanyRefs []*TxsdCompanyRef `xml:"COMPANY-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyRef instance.
func (me *XsdGoPkgHasElems_CompanyRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompanyRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CompanyRevisionInfo struct {
	CompanyRevisionInfo *TxsdCompanyRevisionInfo `xml:"COMPANY-REVISION-INFO"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CompanyRevisionInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CompanyRevisionInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CompanyRevisionInfo instance.
func (me *XsdGoPkgHasElem_CompanyRevisionInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CompanyRevisionInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CompanyRevisionInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CompanyRevisionInfos struct {
	CompanyRevisionInfoses []*TxsdCompanyRevisionInfos `xml:"COMPANY-REVISION-INFOS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CompanyRevisionInfos function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CompanyRevisionInfos instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CompanyRevisionInfos instance.
func (me *XsdGoPkgHasElems_CompanyRevisionInfos) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CompanyRevisionInfos; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CompanyRevisionInfoses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Cond struct {
	Conds []*TxsdCond `xml:"COND"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cond function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cond instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cond instance.
func (me *XsdGoPkgHasElems_Cond) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Cond; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CoverSheetStyle struct {
	CoverSheetStyles []*TxsdSub `xml:"COVER-SHEET-STYLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CoverSheetStyle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CoverSheetStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CoverSheetStyle instance.
func (me *XsdGoPkgHasElems_CoverSheetStyle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CoverSheetStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CoverSheetStyles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Date struct {
	Dates []*TxsdRevisionLabel `xml:"DATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Date function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Date instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Date instance.
func (me *XsdGoPkgHasElems_Date) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Date; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Dates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Date1 struct {
	Date1s []*TxsdSub `xml:"DATE-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Date1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Date1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Date1 instance.
func (me *XsdGoPkgHasElems_Date1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Date1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Date1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Def struct {
	Defs []*TxsdCond `xml:"DEF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Def function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Def instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Def instance.
func (me *XsdGoPkgHasElems_Def) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Def; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Defs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DefItem struct {
	DefItem *TxsdDefItem `xml:"DEF-ITEM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DefItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DefItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DefItem instance.
func (me *XsdGoPkgHasElem_DefItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DefItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DefItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DefList struct {
	DefList *TxsdDefList `xml:"DEF-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DefList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DefList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DefList instance.
func (me *XsdGoPkgHasElem_DefList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DefList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DefList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Department struct {
	Departments []*TxsdSub `xml:"DEPARTMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Department function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Department instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Department instance.
func (me *XsdGoPkgHasElems_Department) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Department; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Departments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Desc struct {
	Descs []*TxsdMsrQueryResultText `xml:"DESC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Desc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Desc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Desc instance.
func (me *XsdGoPkgHasElems_Desc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Desc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Descs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocLabel struct {
	DocLabels []*TxsdRevisionLabel `xml:"DOC-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocLabel instance.
func (me *XsdGoPkgHasElems_DocLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocLabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DocRevision struct {
	DocRevision *TxsdDocRevision `xml:"DOC-REVISION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DocRevision function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DocRevision instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DocRevision instance.
func (me *XsdGoPkgHasElem_DocRevision) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DocRevision; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DocRevision.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DocRevisions struct {
	DocRevisionses []*TxsdDocRevisions `xml:"DOC-REVISIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DocRevisions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DocRevisions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DocRevisions instance.
func (me *XsdGoPkgHasElems_DocRevisions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DocRevisions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DocRevisionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_E struct {
	E *TxsdE `xml:"E"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_E function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_E instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_E instance.
func (me *XsdGoPkgHasElem_E) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_E; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.E.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Email struct {
	Emails []*TxsdSub `xml:"EMAIL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Email instance.
func (me *XsdGoPkgHasElems_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Emails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EntityName struct {
	EntityNames []*TxsdSub `xml:"ENTITY-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EntityName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EntityName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EntityName instance.
func (me *XsdGoPkgHasElems_EntityName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EntityName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EntityNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Entry struct {
	Entry *TxsdEntry `xml:"ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Entry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Entry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Entry instance.
func (me *XsdGoPkgHasElem_Entry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Entry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Entry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fax struct {
	Faxs []*TxsdSub `xml:"FAX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fax instance.
func (me *XsdGoPkgHasElems_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FigureCaption struct {
	FigureCaptions []*TxsdFigureCaption `xml:"FIGURE-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FigureCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FigureCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FigureCaption instance.
func (me *XsdGoPkgHasElems_FigureCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FigureCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FigureCaptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FigureRef struct {
	FigureRefs []*TxsdFigureRef `xml:"FIGURE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FigureRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FigureRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FigureRef instance.
func (me *XsdGoPkgHasElems_FigureRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FigureRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FigureRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAccessDef struct {
	FmAccessDef *TxsdFmAccessDef `xml:"FM-ACCESS-DEF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAccessDef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAccessDef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAccessDef instance.
func (me *XsdGoPkgHasElem_FmAccessDef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAccessDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAccessDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAction struct {
	FmAction *TxsdFmAction `xml:"FM-ACTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAction instance.
func (me *XsdGoPkgHasElem_FmAction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActionState struct {
	FmActionStates []*TxsdSub `xml:"FM-ACTION-STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActionState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActionState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActionState instance.
func (me *XsdGoPkgHasElems_FmActionState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActionState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionStates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmActionType struct {
	FmActionType *TxsdFmActionType `xml:"FM-ACTION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmActionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmActionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmActionType instance.
func (me *XsdGoPkgHasElem_FmActionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmActionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmActionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActionTypeDecomposition struct {
	FmActionTypeDecompositions []*TxsdFmActionTypeDecomposition `xml:"FM-ACTION-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActionTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActionTypeDecomposition instance.
func (me *XsdGoPkgHasElems_FmActionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionTypeDecompositions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActionTypes struct {
	FmActionTypeses []*TxsdFmActionTypes `xml:"FM-ACTION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActionTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActionTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActionTypes instance.
func (me *XsdGoPkgHasElems_FmActionTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmActions struct {
	FmActionses []*TxsdFmActions `xml:"FM-ACTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmActions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmActions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmActions instance.
func (me *XsdGoPkgHasElems_FmActions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmActions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmActionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentCatalog struct {
	FmAssessmentCatalog *TxsdFmAssessmentCatalog `xml:"FM-ASSESSMENT-CATALOG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentCatalog function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentCatalog instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentCatalog instance.
func (me *XsdGoPkgHasElem_FmAssessmentCatalog) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentCatalog; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentCatalog.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentCatalogs struct {
	FmAssessmentCatalogses []*TxsdFmAssessmentCatalogs `xml:"FM-ASSESSMENT-CATALOGS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentCatalogs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentCatalogs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentCatalogs instance.
func (me *XsdGoPkgHasElems_FmAssessmentCatalogs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentCatalogs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentCatalogses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentDiscoveryList struct {
	FmAssessmentDiscoveryLists []*TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-DISCOVERY-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentDiscoveryList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentDiscoveryList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentDiscoveryList instance.
func (me *XsdGoPkgHasElems_FmAssessmentDiscoveryList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentDiscoveryList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentDiscoveryLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmAssessmentEntry struct {
	FmAssessmentEntry *TxsdFmAssessmentEntry `xml:"FM-ASSESSMENT-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmAssessmentEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmAssessmentEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmAssessmentEntry instance.
func (me *XsdGoPkgHasElem_FmAssessmentEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmAssessmentEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmAssessmentEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentMilList struct {
	FmAssessmentMilLists []*TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-MIL-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentMilList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentMilList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentMilList instance.
func (me *XsdGoPkgHasElems_FmAssessmentMilList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentMilList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentMilLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentOccurrenceList struct {
	FmAssessmentOccurrenceLists []*TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-OCCURRENCE-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentOccurrenceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentOccurrenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentOccurrenceList instance.
func (me *XsdGoPkgHasElems_FmAssessmentOccurrenceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentOccurrenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentOccurrenceLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAssessmentSignificanceList struct {
	FmAssessmentSignificanceLists []*TxsdFmAssessmentDiscoveryList `xml:"FM-ASSESSMENT-SIGNIFICANCE-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAssessmentSignificanceList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAssessmentSignificanceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAssessmentSignificanceList instance.
func (me *XsdGoPkgHasElems_FmAssessmentSignificanceList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAssessmentSignificanceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAssessmentSignificanceLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCauses struct {
	FmCauseses []*TxsdFmCauses `xml:"FM-CAUSES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCauses function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCauses instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCauses instance.
func (me *XsdGoPkgHasElems_FmCauses) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCauses; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCauseses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristic struct {
	FmCharacteristic *TxsdFmCharacteristic `xml:"FM-CHARACTERISTIC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristic instance.
func (me *XsdGoPkgHasElem_FmCharacteristic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristicRef struct {
	FmCharacteristicRef *TxsdFmCharacteristicRef `xml:"FM-CHARACTERISTIC-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristicRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristicRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristicRef instance.
func (me *XsdGoPkgHasElem_FmCharacteristicRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristicRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristicRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCharacteristicType struct {
	FmCharacteristicType *TxsdFmCharacteristicType `xml:"FM-CHARACTERISTIC-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCharacteristicType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCharacteristicType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCharacteristicType instance.
func (me *XsdGoPkgHasElem_FmCharacteristicType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCharacteristicType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCharacteristicType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristicTypeDecomposition struct {
	FmCharacteristicTypeDecompositions []*TxsdFmCharacteristicTypeDecomposition `xml:"FM-CHARACTERISTIC-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristicTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristicTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristicTypeDecomposition instance.
func (me *XsdGoPkgHasElems_FmCharacteristicTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristicTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristicTypeDecompositions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristicTypes struct {
	FmCharacteristicTypeses []*TxsdFmCharacteristicTypes `xml:"FM-CHARACTERISTIC-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristicTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristicTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristicTypes instance.
func (me *XsdGoPkgHasElems_FmCharacteristicTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristicTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristicTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCharacteristics struct {
	FmCharacteristicses []*TxsdFmCharacteristics `xml:"FM-CHARACTERISTICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCharacteristics instance.
func (me *XsdGoPkgHasElems_FmCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCharacteristicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmClassification struct {
	FmClassifications []*TxsdFmClassification `xml:"FM-CLASSIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmClassification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmClassification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmClassification instance.
func (me *XsdGoPkgHasElems_FmClassification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmClassification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmClassifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmCollection struct {
	FmCollection *TxsdFmCollection `xml:"FM-COLLECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmCollection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmCollection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmCollection instance.
func (me *XsdGoPkgHasElem_FmCollection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmCollection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmCollection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCollectionConts struct {
	FmCollectionContses []*TxsdFmCollectionConts `xml:"FM-COLLECTION-CONTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCollectionConts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCollectionConts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCollectionConts instance.
func (me *XsdGoPkgHasElems_FmCollectionConts) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCollectionConts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCollectionContses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCollectionRefs struct {
	FmCollectionRefses []*TxsdFmCollectionRefs `xml:"FM-COLLECTION-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCollectionRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCollectionRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCollectionRefs instance.
func (me *XsdGoPkgHasElems_FmCollectionRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCollectionRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCollectionRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCollections struct {
	FmCollectionses []*TxsdFmCollections `xml:"FM-COLLECTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCollections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCollections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCollections instance.
func (me *XsdGoPkgHasElems_FmCollections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCollections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCollectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmControlMethods struct {
	FmControlMethodses []*TxsdFmReactions `xml:"FM-CONTROL-METHODS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmControlMethods function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmControlMethods instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmControlMethods instance.
func (me *XsdGoPkgHasElems_FmControlMethods) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmControlMethods; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmControlMethodses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmControlPlan struct {
	FmControlPlan *TxsdFmControlPlan `xml:"FM-CONTROL-PLAN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmControlPlan function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmControlPlan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmControlPlan instance.
func (me *XsdGoPkgHasElem_FmControlPlan) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmControlPlan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmControlPlan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmControlPlans struct {
	FmControlPlanses []*TxsdFmControlPlans `xml:"FM-CONTROL-PLANS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmControlPlans function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmControlPlans instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmControlPlans instance.
func (me *XsdGoPkgHasElems_FmControlPlans) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmControlPlans; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmControlPlanses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDetectionTasks struct {
	FmDetectionTaskses []*TxsdFmOccurrenceTasks `xml:"FM-DETECTION-TASKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDetectionTasks function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDetectionTasks instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDetectionTasks instance.
func (me *XsdGoPkgHasElems_FmDetectionTasks) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDetectionTasks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDetectionTaskses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmExternalAction struct {
	FmExternalAction *TxsdFmExternalAction `xml:"FM-EXTERNAL-ACTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmExternalAction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmExternalAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmExternalAction instance.
func (me *XsdGoPkgHasElem_FmExternalAction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmExternalAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmExternalAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmExternalActionsDetect struct {
	FmExternalActionsDetects []*TxsdFmExternalActionsOccurrence `xml:"FM-EXTERNAL-ACTIONS-DETECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmExternalActionsDetect function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmExternalActionsDetect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmExternalActionsDetect instance.
func (me *XsdGoPkgHasElems_FmExternalActionsDetect) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmExternalActionsDetect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmExternalActionsDetects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmExternalActionsOccurrence struct {
	FmExternalActionsOccurrences []*TxsdFmExternalActionsOccurrence `xml:"FM-EXTERNAL-ACTIONS-OCCURRENCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmExternalActionsOccurrence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmExternalActionsOccurrence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmExternalActionsOccurrence instance.
func (me *XsdGoPkgHasElems_FmExternalActionsOccurrence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmExternalActionsOccurrence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmExternalActionsOccurrences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFault struct {
	FmFault *TxsdFmFault `xml:"FM-FAULT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFault function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFault instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFault instance.
func (me *XsdGoPkgHasElem_FmFault) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFault.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaultRefs struct {
	FmFaultRefses []*TxsdFmFaultRefs `xml:"FM-FAULT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaultRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaultRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaultRefs instance.
func (me *XsdGoPkgHasElems_FmFaultRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaultRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFaultType struct {
	FmFaultType *TxsdFmFaultType `xml:"FM-FAULT-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFaultType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFaultType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFaultType instance.
func (me *XsdGoPkgHasElem_FmFaultType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFaultType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFaultType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaultTypeDecomposition struct {
	FmFaultTypeDecompositions []*TxsdFmFaultTypeDecomposition `xml:"FM-FAULT-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaultTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaultTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaultTypeDecomposition instance.
func (me *XsdGoPkgHasElems_FmFaultTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaultTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultTypeDecompositions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaultTypes struct {
	FmFaultTypeses []*TxsdFmFaultTypes `xml:"FM-FAULT-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaultTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaultTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaultTypes instance.
func (me *XsdGoPkgHasElems_FmFaultTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaultTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFaults struct {
	FmFaultses []*TxsdFmFaults `xml:"FM-FAULTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFaults function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFaults instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFaults instance.
func (me *XsdGoPkgHasElems_FmFaults) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFaults; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFaultses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFormHeader struct {
	FmFormHeaders []*TxsdFmFormHeader `xml:"FM-FORM-HEADER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFormHeader function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFormHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFormHeader instance.
func (me *XsdGoPkgHasElems_FmFormHeader) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFormHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFormHeaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFormSheet struct {
	FmFormSheet *TxsdFmFormSheet `xml:"FM-FORM-SHEET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFormSheet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFormSheet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFormSheet instance.
func (me *XsdGoPkgHasElem_FmFormSheet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFormSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFormSheet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFormSheetPresentation struct {
	FmFormSheetPresentations []*TxsdFmFormSheetPresentation `xml:"FM-FORM-SHEET-PRESENTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFormSheetPresentation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFormSheetPresentation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFormSheetPresentation instance.
func (me *XsdGoPkgHasElems_FmFormSheetPresentation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFormSheetPresentation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFormSheetPresentations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFormSheetPresentationVersion struct {
	FmFormSheetPresentationVersion *TxsdFmFormSheetPresentationVersion `xml:"FM-FORM-SHEET-PRESENTATION-VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFormSheetPresentationVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFormSheetPresentationVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFormSheetPresentationVersion instance.
func (me *XsdGoPkgHasElem_FmFormSheetPresentationVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFormSheetPresentationVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFormSheetPresentationVersion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFormSheetPresentationVersions struct {
	FmFormSheetPresentationVersionses []*TxsdFmFormSheetPresentationVersions `xml:"FM-FORM-SHEET-PRESENTATION-VERSIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFormSheetPresentationVersions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFormSheetPresentationVersions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFormSheetPresentationVersions instance.
func (me *XsdGoPkgHasElems_FmFormSheetPresentationVersions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFormSheetPresentationVersions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFormSheetPresentationVersionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFormSheets struct {
	FmFormSheetses []*TxsdFmFormSheets `xml:"FM-FORM-SHEETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFormSheets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFormSheets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFormSheets instance.
func (me *XsdGoPkgHasElems_FmFormSheets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFormSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFormSheetses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunction struct {
	FmFunction *TxsdFmFunction `xml:"FM-FUNCTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunction instance.
func (me *XsdGoPkgHasElem_FmFunction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunctionRef struct {
	FmFunctionRef *TxsdFmFunctionRef `xml:"FM-FUNCTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunctionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunctionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunctionRef instance.
func (me *XsdGoPkgHasElem_FmFunctionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunctionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunctionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFunctionType struct {
	FmFunctionType *TxsdFmFunctionType `xml:"FM-FUNCTION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFunctionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFunctionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFunctionType instance.
func (me *XsdGoPkgHasElem_FmFunctionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFunctionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFunctionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunctionTypeDecomposition struct {
	FmFunctionTypeDecompositions []*TxsdFmFunctionTypeDecomposition `xml:"FM-FUNCTION-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunctionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunctionTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunctionTypeDecomposition instance.
func (me *XsdGoPkgHasElems_FmFunctionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunctionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctionTypeDecompositions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunctionTypes struct {
	FmFunctionTypeses []*TxsdFmFunctionTypes `xml:"FM-FUNCTION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunctionTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunctionTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunctionTypes instance.
func (me *XsdGoPkgHasElems_FmFunctionTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunctionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctionTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFunctions struct {
	FmFunctionses []*TxsdFmFunctions `xml:"FM-FUNCTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFunctions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFunctions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFunctions instance.
func (me *XsdGoPkgHasElems_FmFunctions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFunctions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFunctionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmHead struct {
	FmHeads []*TxsdFmHead `xml:"FM-HEAD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmHead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmHead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmHead instance.
func (me *XsdGoPkgHasElems_FmHead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmHead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmHeads {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmHistoryState struct {
	FmHistoryState *TxsdFmHistoryState `xml:"FM-HISTORY-STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmHistoryState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmHistoryState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmHistoryState instance.
func (me *XsdGoPkgHasElem_FmHistoryState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmHistoryState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmHistoryState.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmHistoryStates struct {
	FmHistoryStateses []*TxsdFmHistoryStates `xml:"FM-HISTORY-STATES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmHistoryStates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmHistoryStates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmHistoryStates instance.
func (me *XsdGoPkgHasElems_FmHistoryStates) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmHistoryStates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmHistoryStateses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmIdPrefix struct {
	FmIdPrefixs []*TxsdSub `xml:"FM-ID-PREFIX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmIdPrefix function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmIdPrefix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmIdPrefix instance.
func (me *XsdGoPkgHasElems_FmIdPrefix) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmIdPrefix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmIdPrefixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmIdtable struct {
	FmIdtables []*TxsdFmIdtable `xml:"FM-IDTABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmIdtable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmIdtable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmIdtable instance.
func (me *XsdGoPkgHasElems_FmIdtable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmIdtable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmIdtables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmInterface struct {
	FmInterfaces []*TxsdFmInterface `xml:"FM-INTERFACE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmInterface function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmInterface instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmInterface instance.
func (me *XsdGoPkgHasElems_FmInterface) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmInterface; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmInterfaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmLinkDestination struct {
	FmLinkDestination *TxsdFmLinkDestination `xml:"FM-LINK-DESTINATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmLinkDestination function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmLinkDestination instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmLinkDestination instance.
func (me *XsdGoPkgHasElem_FmLinkDestination) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmLinkDestination; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmLinkDestination.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmLinkDestinations struct {
	FmLinkDestinationses []*TxsdFmLinkDestinations `xml:"FM-LINK-DESTINATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmLinkDestinations function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmLinkDestinations instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmLinkDestinations instance.
func (me *XsdGoPkgHasElems_FmLinkDestinations) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmLinkDestinations; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmLinkDestinationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMachine struct {
	FmMachine *TxsdFmMachine `xml:"FM-MACHINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMachine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMachine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMachine instance.
func (me *XsdGoPkgHasElem_FmMachine) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMachine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMachine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMachineRef struct {
	FmMachineRef *TxsdFmMachineRef `xml:"FM-MACHINE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMachineRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMachineRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMachineRef instance.
func (me *XsdGoPkgHasElem_FmMachineRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMachineRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMachineRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMachineRefs struct {
	FmMachineRefses []*TxsdFmMachineRefs `xml:"FM-MACHINE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMachineRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMachineRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMachineRefs instance.
func (me *XsdGoPkgHasElems_FmMachineRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMachineRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMachineRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMachines struct {
	FmMachineses []*TxsdFmMachines `xml:"FM-MACHINES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMachines function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMachines instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMachines instance.
func (me *XsdGoPkgHasElems_FmMachines) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMachines; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMachineses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmModuleRef struct {
	FmModuleRefs []*TxsdFmModuleRef `xml:"FM-MODULE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmModuleRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmModuleRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmModuleRef instance.
func (me *XsdGoPkgHasElems_FmModuleRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmModuleRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmModuleRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmNetConnection struct {
	FmNetConnection *TxsdFmNetConnection `xml:"FM-NET-CONNECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmNetConnection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmNetConnection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmNetConnection instance.
func (me *XsdGoPkgHasElem_FmNetConnection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmNetConnection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmNetConnection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmNetConnectionSource struct {
	FmNetConnectionSources []*TxsdFmNetConnectionSource `xml:"FM-NET-CONNECTION-SOURCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmNetConnectionSource function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmNetConnectionSource instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmNetConnectionSource instance.
func (me *XsdGoPkgHasElems_FmNetConnectionSource) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmNetConnectionSource; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmNetConnectionSources {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmNetConnectionTarget struct {
	FmNetConnectionTargets []*TxsdFmNetConnectionSource `xml:"FM-NET-CONNECTION-TARGET"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmNetConnectionTarget function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmNetConnectionTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmNetConnectionTarget instance.
func (me *XsdGoPkgHasElems_FmNetConnectionTarget) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmNetConnectionTarget; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmNetConnectionTargets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmNetConnections struct {
	FmNetConnectionses []*TxsdFmNetConnections `xml:"FM-NET-CONNECTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmNetConnections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmNetConnections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmNetConnections instance.
func (me *XsdGoPkgHasElems_FmNetConnections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmNetConnections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmNetConnectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOccurrenceTasks struct {
	FmOccurrenceTaskses []*TxsdFmOccurrenceTasks `xml:"FM-OCCURRENCE-TASKS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOccurrenceTasks function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOccurrenceTasks instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOccurrenceTasks instance.
func (me *XsdGoPkgHasElems_FmOccurrenceTasks) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOccurrenceTasks; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOccurrenceTaskses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOrphanHome struct {
	FmOrphanHomes []*TxsdFmOrphanHome `xml:"FM-ORPHAN-HOME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOrphanHome function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOrphanHome instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOrphanHome instance.
func (me *XsdGoPkgHasElems_FmOrphanHome) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOrphanHome; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOrphanHomes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPalette struct {
	FmPalette *TxsdFmPalette `xml:"FM-PALETTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPalette function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPalette instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPalette instance.
func (me *XsdGoPkgHasElem_FmPalette) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPalette; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPalette.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteColumn struct {
	FmPaletteColumn *TxsdFmPaletteColumn `xml:"FM-PALETTE-COLUMN"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteColumn function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteColumn instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteColumn instance.
func (me *XsdGoPkgHasElem_FmPaletteColumn) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteColumn; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteColumn.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteColumnRef struct {
	FmPaletteColumnRefs []*TxsdFmPaletteColumnRef `xml:"FM-PALETTE-COLUMN-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteColumnRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteColumnRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteColumnRef instance.
func (me *XsdGoPkgHasElems_FmPaletteColumnRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteColumnRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteColumnRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteColumns struct {
	FmPaletteColumnses []*TxsdFmPaletteColumns `xml:"FM-PALETTE-COLUMNS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteColumns function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteColumns instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteColumns instance.
func (me *XsdGoPkgHasElems_FmPaletteColumns) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteColumns; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteColumnses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteEntry struct {
	FmPaletteEntry *TxsdFmPaletteEntry `xml:"FM-PALETTE-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteEntry instance.
func (me *XsdGoPkgHasElem_FmPaletteEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPaletteRow struct {
	FmPaletteRow *TxsdFmPaletteRow `xml:"FM-PALETTE-ROW"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPaletteRow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPaletteRow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPaletteRow instance.
func (me *XsdGoPkgHasElem_FmPaletteRow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPaletteRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPaletteRow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteRowRef struct {
	FmPaletteRowRefs []*TxsdFmPaletteRowRef `xml:"FM-PALETTE-ROW-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteRowRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteRowRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteRowRef instance.
func (me *XsdGoPkgHasElems_FmPaletteRowRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteRowRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteRowRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPaletteRows struct {
	FmPaletteRowses []*TxsdFmPaletteRows `xml:"FM-PALETTE-ROWS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPaletteRows function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPaletteRows instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPaletteRows instance.
func (me *XsdGoPkgHasElems_FmPaletteRows) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPaletteRows; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteRowses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPalettes struct {
	FmPaletteses []*TxsdFmPalettes `xml:"FM-PALETTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPalettes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPalettes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPalettes instance.
func (me *XsdGoPkgHasElems_FmPalettes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPalettes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPaletteses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPartList struct {
	FmPartLists []*TxsdFmPartList `xml:"FM-PART-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPartList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPartList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPartList instance.
func (me *XsdGoPkgHasElems_FmPartList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPartList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPartLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPartListEntry struct {
	FmPartListEntry *TxsdFmPartListEntry `xml:"FM-PART-LIST-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPartListEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPartListEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPartListEntry instance.
func (me *XsdGoPkgHasElem_FmPartListEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPartListEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPartListEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPdEntry struct {
	FmPdEntry *TxsdFmPdEntry `xml:"FM-PD-ENTRY"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPdEntry function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPdEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPdEntry instance.
func (me *XsdGoPkgHasElem_FmPdEntry) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPdEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPdEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPdLine struct {
	FmPdLine *TxsdFmPdLine `xml:"FM-PD-LINE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPdLine function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPdLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPdLine instance.
func (me *XsdGoPkgHasElem_FmPdLine) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPdLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPdLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmPdRow struct {
	FmPdRow *TxsdFmPdRow `xml:"FM-PD-ROW"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmPdRow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmPdRow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmPdRow instance.
func (me *XsdGoPkgHasElem_FmPdRow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmPdRow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmPdRow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPdTable struct {
	FmPdTables []*TxsdFmPdTable `xml:"FM-PD-TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPdTable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPdTable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPdTable instance.
func (me *XsdGoPkgHasElems_FmPdTable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPdTable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPdTables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPrerequisites struct {
	FmPrerequisiteses []*TxsdFmPrerequisites `xml:"FM-PREREQUISITES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPrerequisites function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPrerequisites instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPrerequisites instance.
func (me *XsdGoPkgHasElems_FmPrerequisites) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPrerequisites; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPrerequisiteses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmProcessDiagram struct {
	FmProcessDiagram *TxsdFmProcessDiagram `xml:"FM-PROCESS-DIAGRAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmProcessDiagram function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmProcessDiagram instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmProcessDiagram instance.
func (me *XsdGoPkgHasElem_FmProcessDiagram) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmProcessDiagram; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmProcessDiagram.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmProcessDiagrams struct {
	FmProcessDiagramses []*TxsdFmProcessDiagrams `xml:"FM-PROCESS-DIAGRAMS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmProcessDiagrams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmProcessDiagrams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmProcessDiagrams instance.
func (me *XsdGoPkgHasElems_FmProcessDiagrams) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmProcessDiagrams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmProcessDiagramses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmProject struct {
	FmProject *TxsdFmProject `xml:"FM-PROJECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmProject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmProject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmProject instance.
func (me *XsdGoPkgHasElem_FmProject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmProject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmProject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmProjectOwner struct {
	FmProjectOwners []*TxsdTeamMemberRefs `xml:"FM-PROJECT-OWNER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmProjectOwner function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmProjectOwner instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmProjectOwner instance.
func (me *XsdGoPkgHasElems_FmProjectOwner) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmProjectOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmProjectOwners {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmProjects struct {
	FmProjectses []*TxsdFmProjects `xml:"FM-PROJECTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmProjects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmProjects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmProjects instance.
func (me *XsdGoPkgHasElems_FmProjects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmProjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmProjectses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmReactions struct {
	FmReactionses []*TxsdFmReactions `xml:"FM-REACTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmReactions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmReactions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmReactions instance.
func (me *XsdGoPkgHasElems_FmReactions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmReactions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmReactionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSeCharacteristics struct {
	FmSeCharacteristicses []*TxsdFmSeCharacteristics `xml:"FM-SE-CHARACTERISTICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSeCharacteristics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSeCharacteristics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSeCharacteristics instance.
func (me *XsdGoPkgHasElems_FmSeCharacteristics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSeCharacteristics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSeCharacteristicses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSeDecomposition struct {
	FmSeDecompositions []*TxsdFmStructureElementRefs `xml:"FM-SE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSeDecomposition instance.
func (me *XsdGoPkgHasElems_FmSeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSeDecompositions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSeFunctions struct {
	FmSeFunctionses []*TxsdFmSeFunctions `xml:"FM-SE-FUNCTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSeFunctions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSeFunctions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSeFunctions instance.
func (me *XsdGoPkgHasElems_FmSeFunctions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSeFunctions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSeFunctionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSignificance struct {
	FmSignificances []*TxsdFmSignificance `xml:"FM-SIGNIFICANCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSignificance function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSignificance instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSignificance instance.
func (me *XsdGoPkgHasElems_FmSignificance) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSignificance; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSignificances {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructure struct {
	FmStructure *TxsdFmStructure `xml:"FM-STRUCTURE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructure function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructure instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructure instance.
func (me *XsdGoPkgHasElem_FmStructure) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureElement struct {
	FmStructureElement *TxsdFmStructureElement `xml:"FM-STRUCTURE-ELEMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureElement function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureElement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureElement instance.
func (me *XsdGoPkgHasElem_FmStructureElement) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureElement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureElement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureElementRefs struct {
	FmStructureElementRefses []*TxsdFmStructureElementRefs `xml:"FM-STRUCTURE-ELEMENT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureElementRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureElementRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureElementRefs instance.
func (me *XsdGoPkgHasElems_FmStructureElementRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureElementRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureElementRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureElements struct {
	FmStructureElementses []*TxsdFmStructureElements `xml:"FM-STRUCTURE-ELEMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureElements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureElements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureElements instance.
func (me *XsdGoPkgHasElems_FmStructureElements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureElements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureElementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureOwner struct {
	FmStructureOwners []*TxsdFmStructureOwner `xml:"FM-STRUCTURE-OWNER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureOwner function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureOwner instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureOwner instance.
func (me *XsdGoPkgHasElems_FmStructureOwner) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureOwner; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureOwners {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmStructureRef struct {
	FmStructureRef *TxsdFmStructureRef `xml:"FM-STRUCTURE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmStructureRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmStructureRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmStructureRef instance.
func (me *XsdGoPkgHasElem_FmStructureRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmStructureRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmStructureRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureRefs struct {
	FmStructureRefses []*TxsdFmStructureRefs `xml:"FM-STRUCTURE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureRefs instance.
func (me *XsdGoPkgHasElems_FmStructureRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructureRoot struct {
	FmStructureRoots []*TxsdFmOrphanHome `xml:"FM-STRUCTURE-ROOT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructureRoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructureRoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructureRoot instance.
func (me *XsdGoPkgHasElems_FmStructureRoot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructureRoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureRoots {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmStructures struct {
	FmStructureses []*TxsdFmStructures `xml:"FM-STRUCTURES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmStructures function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmStructures instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmStructures instance.
func (me *XsdGoPkgHasElems_FmStructures) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmStructures; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmStructureses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSymbolSpec struct {
	FmSymbolSpecs []*TxsdFmSymbolSpec `xml:"FM-SYMBOL-SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSymbolSpec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSymbolSpec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSymbolSpec instance.
func (me *XsdGoPkgHasElems_FmSymbolSpec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSymbolSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSymbolSpecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmSymbolicDate struct {
	FmSymbolicDate *TxsdFmSymbolicDate `xml:"FM-SYMBOLIC-DATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmSymbolicDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmSymbolicDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmSymbolicDate instance.
func (me *XsdGoPkgHasElem_FmSymbolicDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmSymbolicDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmSymbolicDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSymbolicDateRef struct {
	FmSymbolicDateRefs []*TxsdFmSymbolicDateRef `xml:"FM-SYMBOLIC-DATE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSymbolicDateRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSymbolicDateRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSymbolicDateRef instance.
func (me *XsdGoPkgHasElems_FmSymbolicDateRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSymbolicDateRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSymbolicDateRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSymbolicDates struct {
	FmSymbolicDateses []*TxsdFmSymbolicDates `xml:"FM-SYMBOLIC-DATES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSymbolicDates function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSymbolicDates instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSymbolicDates instance.
func (me *XsdGoPkgHasElems_FmSymbolicDates) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSymbolicDates; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSymbolicDateses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmSymbols struct {
	FmSymbolses []*TxsdFmSymbols `xml:"FM-SYMBOLS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmSymbols function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmSymbols instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmSymbols instance.
func (me *XsdGoPkgHasElems_FmSymbols) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmSymbols; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmSymbolses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTaskHistory struct {
	FmTaskHistories []*TxsdFmTaskHistory `xml:"FM-TASK-HISTORY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTaskHistory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTaskHistory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTaskHistory instance.
func (me *XsdGoPkgHasElems_FmTaskHistory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTaskHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTaskHistories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTaskSchedule struct {
	FmTaskSchedules []*TxsdFmTaskSchedule `xml:"FM-TASK-SCHEDULE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTaskSchedule function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTaskSchedule instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTaskSchedule instance.
func (me *XsdGoPkgHasElems_FmTaskSchedule) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTaskSchedule; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTaskSchedules {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTaskSet struct {
	FmTaskSet *TxsdFmTaskSet `xml:"FM-TASK-SET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTaskSet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTaskSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTaskSet instance.
func (me *XsdGoPkgHasElem_FmTaskSet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTaskSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTaskSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTaskSets struct {
	FmTaskSets *TxsdFmTaskSets `xml:"FM-TASK-SETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTaskSets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTaskSets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTaskSets instance.
func (me *XsdGoPkgHasElem_FmTaskSets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTaskSets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTaskSets.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTeam struct {
	FmTeam *TxsdFmTeam `xml:"FM-TEAM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTeam function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTeam instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTeam instance.
func (me *XsdGoPkgHasElem_FmTeam) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTeam; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTeam.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTeams struct {
	FmTeamses []*TxsdFmTeams `xml:"FM-TEAMS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTeams function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTeams instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTeams instance.
func (me *XsdGoPkgHasElems_FmTeams) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTeams; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTeamses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestEquipment struct {
	FmTestEquipment *TxsdFmTestEquipment `xml:"FM-TEST-EQUIPMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestEquipment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestEquipment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestEquipment instance.
func (me *XsdGoPkgHasElem_FmTestEquipment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestEquipment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestEquipment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestEquipmentRef struct {
	FmTestEquipmentRef *TxsdFmTestEquipmentRef `xml:"FM-TEST-EQUIPMENT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestEquipmentRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestEquipmentRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestEquipmentRef instance.
func (me *XsdGoPkgHasElem_FmTestEquipmentRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestEquipmentRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestEquipmentRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestEquipmentRefs struct {
	FmTestEquipmentRefses []*TxsdFmTestEquipmentRefs `xml:"FM-TEST-EQUIPMENT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestEquipmentRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestEquipmentRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestEquipmentRefs instance.
func (me *XsdGoPkgHasElems_FmTestEquipmentRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestEquipmentRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestEquipmentRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestEquipments struct {
	FmTestEquipmentses []*TxsdFmTestEquipments `xml:"FM-TEST-EQUIPMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestEquipments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestEquipments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestEquipments instance.
func (me *XsdGoPkgHasElems_FmTestEquipments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestEquipments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestEquipmentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestSample struct {
	FmTestSample *TxsdFmTestSample `xml:"FM-TEST-SAMPLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestSample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestSample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestSample instance.
func (me *XsdGoPkgHasElem_FmTestSample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestSample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestSample.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTestSampleRef struct {
	FmTestSampleRef *TxsdFmTestSampleRef `xml:"FM-TEST-SAMPLE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTestSampleRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTestSampleRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTestSampleRef instance.
func (me *XsdGoPkgHasElem_FmTestSampleRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTestSampleRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTestSampleRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestSampleRefs struct {
	FmTestSampleRefses []*TxsdFmTestSampleRefs `xml:"FM-TEST-SAMPLE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestSampleRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestSampleRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestSampleRefs instance.
func (me *XsdGoPkgHasElems_FmTestSampleRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestSampleRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestSampleRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmTestSamples struct {
	FmTestSampleses []*TxsdFmTestSamples `xml:"FM-TEST-SAMPLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmTestSamples function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmTestSamples instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmTestSamples instance.
func (me *XsdGoPkgHasElems_FmTestSamples) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmTestSamples; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmTestSampleses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmTool struct {
	FmTool *TxsdFmTool `xml:"FM-TOOL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmTool function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmTool instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmTool instance.
func (me *XsdGoPkgHasElem_FmTool) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmTool; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmTool.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmToolData struct {
	FmToolDatas []*TxsdFmToolData `xml:"FM-TOOL-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmToolData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmToolData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmToolData instance.
func (me *XsdGoPkgHasElems_FmToolData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmToolData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmToolDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserAccessDefinitions struct {
	FmUserAccessDefinitionses []*TxsdFmUserAccessDefinitions `xml:"FM-USER-ACCESS-DEFINITIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserAccessDefinitions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserAccessDefinitions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserAccessDefinitions instance.
func (me *XsdGoPkgHasElems_FmUserAccessDefinitions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserAccessDefinitions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserAccessDefinitionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserGroup struct {
	FmUserGroup *TxsdFmUserGroup `xml:"FM-USER-GROUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserGroup instance.
func (me *XsdGoPkgHasElem_FmUserGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserGroupRefs struct {
	FmUserGroupRefses []*TxsdFmUserGroupRefs `xml:"FM-USER-GROUP-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserGroupRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserGroupRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserGroupRefs instance.
func (me *XsdGoPkgHasElems_FmUserGroupRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserGroupRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserGroupRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserGroups struct {
	FmUserGroupses []*TxsdFmUserGroups `xml:"FM-USER-GROUPS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserGroups function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserGroups instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserGroups instance.
func (me *XsdGoPkgHasElems_FmUserGroups) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserGroupses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserRightSpec struct {
	FmUserRightSpecs []*TxsdFmUserRightSpec `xml:"FM-USER-RIGHT-SPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserRightSpec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserRightSpec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserRightSpec instance.
func (me *XsdGoPkgHasElems_FmUserRightSpec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserRightSpec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserRightSpecs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserdefinedAttribute struct {
	FmUserdefinedAttribute *TxsdFmUserdefinedAttribute `xml:"FM-USERDEFINED-ATTRIBUTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttribute function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserdefinedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserdefinedAttribute instance.
func (me *XsdGoPkgHasElem_FmUserdefinedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserdefinedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmUserdefinedAttributeRef struct {
	FmUserdefinedAttributeRef *TxsdFmUserdefinedAttributeRef `xml:"FM-USERDEFINED-ATTRIBUTE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttributeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmUserdefinedAttributeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmUserdefinedAttributeRef instance.
func (me *XsdGoPkgHasElem_FmUserdefinedAttributeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmUserdefinedAttributeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmUserdefinedAttributeRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserdefinedAttributeRefs struct {
	FmUserdefinedAttributeRefses []*TxsdFmUserdefinedAttributeRefs `xml:"FM-USERDEFINED-ATTRIBUTE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttributeRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserdefinedAttributeRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserdefinedAttributeRefs instance.
func (me *XsdGoPkgHasElems_FmUserdefinedAttributeRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttributeRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserdefinedAttributeRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmUserdefinedAttributes struct {
	FmUserdefinedAttributeses []*TxsdFmUserdefinedAttributes `xml:"FM-USERDEFINED-ATTRIBUTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttributes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmUserdefinedAttributes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmUserdefinedAttributes instance.
func (me *XsdGoPkgHasElems_FmUserdefinedAttributes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmUserdefinedAttributes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmUserdefinedAttributeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVariant struct {
	FmVariant *TxsdFmVariant `xml:"FM-VARIANT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVariant function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVariant instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVariant instance.
func (me *XsdGoPkgHasElem_FmVariant) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVariant; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVariant.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVariantMiscData struct {
	FmVariantMiscData *TxsdFmVariantMiscData `xml:"FM-VARIANT-MISC-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVariantMiscData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVariantMiscData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVariantMiscData instance.
func (me *XsdGoPkgHasElem_FmVariantMiscData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVariantMiscData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVariantMiscData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVariantMiscDatas struct {
	FmVariantMiscDatases []*TxsdFmVariantMiscDatas `xml:"FM-VARIANT-MISC-DATAS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVariantMiscDatas function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVariantMiscDatas instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVariantMiscDatas instance.
func (me *XsdGoPkgHasElems_FmVariantMiscDatas) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVariantMiscDatas; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVariantMiscDatases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmVariantRef struct {
	FmVariantRef *TxsdFmVariantRef `xml:"FM-VARIANT-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmVariantRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmVariantRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmVariantRef instance.
func (me *XsdGoPkgHasElem_FmVariantRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmVariantRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmVariantRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVariantRefs struct {
	FmVariantRefses []*TxsdFmVariantRefs `xml:"FM-VARIANT-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVariantRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVariantRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVariantRefs instance.
func (me *XsdGoPkgHasElems_FmVariantRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVariantRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVariantRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVariants struct {
	FmVariantses []*TxsdFmVariants `xml:"FM-VARIANTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVariants function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVariants instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVariants instance.
func (me *XsdGoPkgHasElems_FmVariants) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVariants; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVariantses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FormatterCtrl struct {
	FormatterCtrl *TxsdFormatterCtrl `xml:"FORMATTER-CTRL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FormatterCtrl function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FormatterCtrl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FormatterCtrl instance.
func (me *XsdGoPkgHasElem_FormatterCtrl) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FormatterCtrl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FormatterCtrl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormatterCtrls struct {
	FormatterCtrlses []*TxsdFormatterCtrls `xml:"FORMATTER-CTRLS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormatterCtrls function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormatterCtrls instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormatterCtrls instance.
func (me *XsdGoPkgHasElems_FormatterCtrls) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormatterCtrls; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormatterCtrlses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Formula struct {
	Formula *TxsdFormula `xml:"FORMULA"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Formula function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Formula instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Formula instance.
func (me *XsdGoPkgHasElem_Formula) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Formula; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Formula.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FormulaCaption struct {
	FormulaCaptions []*TxsdFormulaCaption `xml:"FORMULA-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FormulaCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FormulaCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FormulaCaption instance.
func (me *XsdGoPkgHasElems_FormulaCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FormulaCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FormulaCaptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ft struct {
	Ft *TxsdFt `xml:"FT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ft function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ft instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ft instance.
func (me *XsdGoPkgHasElem_Ft) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ft; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ft.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GenericMath struct {
	GenericMaths []*TxsdRevisionLabel `xml:"GENERIC-MATH"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GenericMath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GenericMath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GenericMath instance.
func (me *XsdGoPkgHasElems_GenericMath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GenericMath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GenericMaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Graphic struct {
	Graphics []*TxsdGraphic `xml:"GRAPHIC"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Graphic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Graphic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Graphic instance.
func (me *XsdGoPkgHasElems_Graphic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Graphic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Graphics {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Homepage struct {
	Homepages []*TxsdSub `xml:"HOMEPAGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Homepage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Homepage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Homepage instance.
func (me *XsdGoPkgHasElems_Homepage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Homepage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Homepages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Idc struct {
	Idc *TxsdIdc `xml:"IDC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Idc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Idc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Idc instance.
func (me *XsdGoPkgHasElem_Idc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Idc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Idc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Ie struct {
	Ie *TxsdIe `xml:"IE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Ie function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Ie instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Ie instance.
func (me *XsdGoPkgHasElem_Ie) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Ie; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ie.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndentSample struct {
	IndentSamples []*TxsdIndentSample `xml:"INDENT-SAMPLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndentSample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndentSample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndentSample instance.
func (me *XsdGoPkgHasElems_IndentSample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndentSample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IndentSamples {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Input struct {
	Inputs []*TxsdInput `xml:"INPUT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Input function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Input instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Input instance.
func (me *XsdGoPkgHasElems_Input) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Input; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Inputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Introduction struct {
	Introductions []*TxsdIntroduction `xml:"INTRODUCTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Introduction function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Introduction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Introduction instance.
func (me *XsdGoPkgHasElems_Introduction) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Introduction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Introductions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IssuedBy struct {
	IssuedBies []*TxsdRevisionLabel `xml:"ISSUED-BY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IssuedBy function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IssuedBy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IssuedBy instance.
func (me *XsdGoPkgHasElems_IssuedBy) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IssuedBy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IssuedBies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Item struct {
	Item *TxsdItem `xml:"ITEM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Item function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Item instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Item instance.
func (me *XsdGoPkgHasElem_Item) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Item; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Item.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ItemLabel struct {
	ItemLabels []*TxsdMsrQueryResultText `xml:"ITEM-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ItemLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ItemLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ItemLabel instance.
func (me *XsdGoPkgHasElems_ItemLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ItemLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ItemLabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_L1 struct {
	L1 *TxsdL1 `xml:"L-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_L1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_L1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_L1 instance.
func (me *XsdGoPkgHasElem_L1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_L1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.L1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_L10 struct {
	L10 *TxsdL10 `xml:"L-10"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_L10 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_L10 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_L10 instance.
func (me *XsdGoPkgHasElem_L10) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_L10; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.L10.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_L2 struct {
	L2 *TxsdL2 `xml:"L-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_L2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_L2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_L2 instance.
func (me *XsdGoPkgHasElem_L2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_L2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.L2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_L3 struct {
	L3 *TxsdL3 `xml:"L-3"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_L3 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_L3 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_L3 instance.
func (me *XsdGoPkgHasElem_L3) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_L3; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.L3.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_L4 struct {
	L4 *TxsdL4 `xml:"L-4"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_L4 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_L4 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_L4 instance.
func (me *XsdGoPkgHasElem_L4) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_L4; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.L4.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_L5 struct {
	L5 *TxsdL5 `xml:"L-5"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_L5 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_L5 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_L5 instance.
func (me *XsdGoPkgHasElem_L5) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_L5; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.L5.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LGraphic struct {
	LGraphic *TxsdLGraphic `xml:"L-GRAPHIC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LGraphic function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LGraphic instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LGraphic instance.
func (me *XsdGoPkgHasElem_LGraphic) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LGraphic; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LGraphic.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LabeledItem struct {
	LabeledItem *TxsdLabeledItem `xml:"LABELED-ITEM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabeledItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabeledItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LabeledItem instance.
func (me *XsdGoPkgHasElem_LabeledItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LabeledItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LabeledItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_LabeledList struct {
	LabeledList *TxsdLabeledList `xml:"LABELED-LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_LabeledList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_LabeledList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_LabeledList instance.
func (me *XsdGoPkgHasElem_LabeledList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_LabeledList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LabeledList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Language struct {
	Languages []*TxsdSub `xml:"LANGUAGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Language function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Language instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Language instance.
func (me *XsdGoPkgHasElems_Language) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Language; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Languages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_List struct {
	List *TxsdList `xml:"LIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_List function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_List instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_List instance.
func (me *XsdGoPkgHasElem_List) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_List; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.List.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Locs struct {
	Locses []*TxsdLocs `xml:"LOCS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Locs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Locs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Locs instance.
func (me *XsdGoPkgHasElems_Locs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Locs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Locses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LongName struct {
	LongNames []*TxsdLongName `xml:"LONG-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LongName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LongName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LongName instance.
func (me *XsdGoPkgHasElems_LongName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LongName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LongNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_LongName1 struct {
	LongName1s []*TxsdLongName1 `xml:"LONG-NAME-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_LongName1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_LongName1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_LongName1 instance.
func (me *XsdGoPkgHasElems_LongName1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_LongName1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LongName1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Map struct {
	Maps []*TxsdMap `xml:"MAP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Map function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Map instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Map instance.
func (me *XsdGoPkgHasElems_Map) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Map; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Maps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MatchingDci struct {
	MatchingDci *TxsdMatchingDci `xml:"MATCHING-DCI"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MatchingDci function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MatchingDci instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MatchingDci instance.
func (me *XsdGoPkgHasElem_MatchingDci) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MatchingDci; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MatchingDci.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MatchingDcis struct {
	MatchingDcises []*TxsdMatchingDcis `xml:"MATCHING-DCIS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MatchingDcis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MatchingDcis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MatchingDcis instance.
func (me *XsdGoPkgHasElems_MatchingDcis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MatchingDcis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MatchingDcises {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Max struct {
	Maxs []*TxsdMin `xml:"MAX"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Max function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Max instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Max instance.
func (me *XsdGoPkgHasElems_Max) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Max; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Maxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MimeContainer struct {
	MimeContainers []*TxsdUrl `xml:"MIME-CONTAINER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MimeContainer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MimeContainer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MimeContainer instance.
func (me *XsdGoPkgHasElems_MimeContainer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MimeContainer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MimeContainers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Min struct {
	Mins []*TxsdMin `xml:"MIN"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Min function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Min instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Min instance.
func (me *XsdGoPkgHasElems_Min) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Min; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mins {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Misc struct {
	Misc *TxsdMisc `xml:"MISC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Misc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Misc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Misc instance.
func (me *XsdGoPkgHasElem_Misc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Misc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Misc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MiscData struct {
	MiscDatas []*TxsdMiscData `xml:"MISC-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MiscData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MiscData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MiscData instance.
func (me *XsdGoPkgHasElems_MiscData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MiscData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MiscDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MiscValue struct {
	MiscValues []*TxsdMiscValue `xml:"MISC-VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MiscValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MiscValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MiscValue instance.
func (me *XsdGoPkgHasElems_MiscValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MiscValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MiscValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Modification struct {
	Modification *TxsdModification `xml:"MODIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Modification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Modification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Modification instance.
func (me *XsdGoPkgHasElem_Modification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Modification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Modification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Modifications struct {
	Modificationses []*TxsdModifications `xml:"MODIFICATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Modifications function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Modifications instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Modifications instance.
func (me *XsdGoPkgHasElems_Modifications) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Modifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Modificationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrProcessingLog struct {
	MsrProcessingLogs []*TxsdMsrProcessingLog `xml:"MSR-PROCESSING-LOG"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrProcessingLog function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrProcessingLog instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrProcessingLog instance.
func (me *XsdGoPkgHasElems_MsrProcessingLog) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrProcessingLog; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrProcessingLogs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryArg struct {
	MsrQueryArg *TxsdMsrQueryArg `xml:"MSR-QUERY-ARG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryArg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryArg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryArg instance.
func (me *XsdGoPkgHasElem_MsrQueryArg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryArg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryArg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryChapter struct {
	MsrQueryChapter *TxsdMsrQueryChapter `xml:"MSR-QUERY-CHAPTER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryChapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryChapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryChapter instance.
func (me *XsdGoPkgHasElem_MsrQueryChapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryChapter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryName struct {
	MsrQueryNames []*TxsdSub `xml:"MSR-QUERY-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryName instance.
func (me *XsdGoPkgHasElems_MsrQueryName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryP1 struct {
	MsrQueryP1 *TxsdMsrQueryP1 `xml:"MSR-QUERY-P-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryP1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryP1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryP1 instance.
func (me *XsdGoPkgHasElem_MsrQueryP1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryP1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryP2 struct {
	MsrQueryP2 *TxsdMsrQueryP2 `xml:"MSR-QUERY-P-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryP2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryP2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryP2 instance.
func (me *XsdGoPkgHasElem_MsrQueryP2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryP2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryProps struct {
	MsrQueryPropses []*TxsdMsrQueryProps `xml:"MSR-QUERY-PROPS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryProps function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryProps instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryProps instance.
func (me *XsdGoPkgHasElems_MsrQueryProps) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryProps; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryPropses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryResultChapter struct {
	MsrQueryResultChapters []*TxsdMsrQueryResultChapter `xml:"MSR-QUERY-RESULT-CHAPTER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryResultChapter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryResultChapter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryResultChapter instance.
func (me *XsdGoPkgHasElems_MsrQueryResultChapter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryResultChapter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryResultChapters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryResultP1 struct {
	MsrQueryResultP1s []*TxsdMsrQueryResultP1 `xml:"MSR-QUERY-RESULT-P-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryResultP1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryResultP1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryResultP1 instance.
func (me *XsdGoPkgHasElems_MsrQueryResultP1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryResultP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryResultP1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryResultP2 struct {
	MsrQueryResultP2s []*TxsdMsrQueryResultP2 `xml:"MSR-QUERY-RESULT-P-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryResultP2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryResultP2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryResultP2 instance.
func (me *XsdGoPkgHasElems_MsrQueryResultP2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryResultP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryResultP2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryResultText struct {
	MsrQueryResultTexts []*TxsdMsrQueryResultText `xml:"MSR-QUERY-RESULT-TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryResultText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryResultText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryResultText instance.
func (me *XsdGoPkgHasElems_MsrQueryResultText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryResultText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryResultTexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryResultTopic1 struct {
	MsrQueryResultTopic1s []*TxsdMsrQueryResultTopic1 `xml:"MSR-QUERY-RESULT-TOPIC-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryResultTopic1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryResultTopic1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryResultTopic1 instance.
func (me *XsdGoPkgHasElems_MsrQueryResultTopic1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryResultTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryResultTopic1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MsrQueryResultTopic2 struct {
	MsrQueryResultTopic2s []*TxsdMsrQueryResultTopic2 `xml:"MSR-QUERY-RESULT-TOPIC-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MsrQueryResultTopic2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MsrQueryResultTopic2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MsrQueryResultTopic2 instance.
func (me *XsdGoPkgHasElems_MsrQueryResultTopic2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MsrQueryResultTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MsrQueryResultTopic2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryText struct {
	MsrQueryText *TxsdMsrQueryText `xml:"MSR-QUERY-TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryText function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryText instance.
func (me *XsdGoPkgHasElem_MsrQueryText) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryTopic1 struct {
	MsrQueryTopic1 *TxsdMsrQueryTopic1 `xml:"MSR-QUERY-TOPIC-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryTopic1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryTopic1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryTopic1 instance.
func (me *XsdGoPkgHasElem_MsrQueryTopic1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryTopic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryTopic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MsrQueryTopic2 struct {
	MsrQueryTopic2 *TxsdMsrQueryTopic2 `xml:"MSR-QUERY-TOPIC-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MsrQueryTopic2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MsrQueryTopic2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MsrQueryTopic2 instance.
func (me *XsdGoPkgHasElem_MsrQueryTopic2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MsrQueryTopic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MsrQueryTopic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Nameloc struct {
	Nameloc *TxsdNameloc `xml:"NAMELOC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Nameloc function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Nameloc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Nameloc instance.
func (me *XsdGoPkgHasElem_Nameloc) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Nameloc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Nameloc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Nmlist struct {
	Nmlists []*TxsdNmlist `xml:"NMLIST"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Nmlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Nmlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Nmlist instance.
func (me *XsdGoPkgHasElems_Nmlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Nmlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nmlists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Notation struct {
	Notations []*TxsdSub `xml:"NOTATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Notation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Notation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Notation instance.
func (me *XsdGoPkgHasElems_Notation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Notation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Notations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Note struct {
	Note *TxsdNote `xml:"NOTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Note function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Note instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Note instance.
func (me *XsdGoPkgHasElem_Note) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Note; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Note.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NotificationState struct {
	NotificationStates []*TxsdSub `xml:"NOTIFICATION-STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NotificationState function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NotificationState instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NotificationState instance.
func (me *XsdGoPkgHasElems_NotificationState) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NotificationState; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NotificationStates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Number struct {
	Numbers []*TxsdSub `xml:"NUMBER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Number function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Number instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Number instance.
func (me *XsdGoPkgHasElems_Number) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Number; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Numbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Output struct {
	Outputs []*TxsdInput `xml:"OUTPUT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Output function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Output instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Output instance.
func (me *XsdGoPkgHasElems_Output) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Output; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Outputs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_P struct {
	P *TxsdP `xml:"P"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_P function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_P instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_P instance.
func (me *XsdGoPkgHasElem_P) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_P; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.P.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PartNumber struct {
	PartNumbers []*TxsdSub `xml:"PART-NUMBER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PartNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PartNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PartNumber instance.
func (me *XsdGoPkgHasElems_PartNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PartNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PartNumbers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Phone struct {
	Phones []*TxsdSub `xml:"PHONE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Phone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Phone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Phone instance.
func (me *XsdGoPkgHasElems_Phone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Phone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Phones {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Position struct {
	Positions []*TxsdSub `xml:"POSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Position function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Position instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Position instance.
func (me *XsdGoPkgHasElems_Position) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Position; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Positions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PrivateCode struct {
	PrivateCode *TxsdPrivateCode `xml:"PRIVATE-CODE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrivateCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrivateCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PrivateCode instance.
func (me *XsdGoPkgHasElem_PrivateCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrivateCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrivateCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PrivateCodes struct {
	PrivateCodeses []*TxsdPrivateCodes `xml:"PRIVATE-CODES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PrivateCodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PrivateCodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PrivateCodes instance.
func (me *XsdGoPkgHasElems_PrivateCodes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PrivateCodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PrivateCodeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Prm struct {
	Prm *TxsdPrm `xml:"PRM"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Prm function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Prm instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Prm instance.
func (me *XsdGoPkgHasElem_Prm) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Prm; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Prm.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PrmChar struct {
	PrmChar *TxsdPrmChar `xml:"PRM-CHAR"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PrmChar function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PrmChar instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PrmChar instance.
func (me *XsdGoPkgHasElem_PrmChar) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PrmChar; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PrmChar.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Publisher struct {
	Publishers []*TxsdSub `xml:"PUBLISHER"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Publisher function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Publisher instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Publisher instance.
func (me *XsdGoPkgHasElems_Publisher) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Publisher; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Publishers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reason struct {
	Reasons []*TxsdMsrQueryResultText `xml:"REASON"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reason instance.
func (me *XsdGoPkgHasElems_Reason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Reasons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Remark struct {
	Remarks []*TxsdAnnotationText `xml:"REMARK"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Remark function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Remark instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Remark instance.
func (me *XsdGoPkgHasElems_Remark) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Remark; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Remarks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevisionLabel struct {
	RevisionLabels []*TxsdRevisionLabel `xml:"REVISION-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevisionLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevisionLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevisionLabel instance.
func (me *XsdGoPkgHasElems_RevisionLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevisionLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevisionLabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevisionLabelP1 struct {
	RevisionLabelP1s []*TxsdSub `xml:"REVISION-LABEL-P1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevisionLabelP1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevisionLabelP1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevisionLabelP1 instance.
func (me *XsdGoPkgHasElems_RevisionLabelP1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevisionLabelP1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevisionLabelP1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RevisionLabelP2 struct {
	RevisionLabelP2s []*TxsdSub `xml:"REVISION-LABEL-P2"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RevisionLabelP2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RevisionLabelP2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RevisionLabelP2 instance.
func (me *XsdGoPkgHasElems_RevisionLabelP2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RevisionLabelP2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RevisionLabelP2s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RiskPriorityFactor struct {
	RiskPriorityFactors []*TxsdSub `xml:"RISK-PRIORITY-FACTOR"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RiskPriorityFactor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RiskPriorityFactor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RiskPriorityFactor instance.
func (me *XsdGoPkgHasElems_RiskPriorityFactor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RiskPriorityFactor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RiskPriorityFactors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Role struct {
	Role *TxsdRevisionLabel `xml:"ROLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Role function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Role instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Role instance.
func (me *XsdGoPkgHasElem_Role) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Role; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Role.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Roles struct {
	Roleses []*TxsdRoles `xml:"ROLES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Roles function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Roles instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Roles instance.
func (me *XsdGoPkgHasElems_Roles) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Roles; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Roleses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Row struct {
	Row *TxsdRow `xml:"ROW"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Row function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Row instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Row instance.
func (me *XsdGoPkgHasElem_Row) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Row; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Row.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sd struct {
	Sd *TxsdSd `xml:"SD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sd function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sd instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sd instance.
func (me *XsdGoPkgHasElem_Sd) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sd; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sd.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sdg struct {
	Sdg *TxsdSdg `xml:"SDG"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sdg function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sdg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sdg instance.
func (me *XsdGoPkgHasElem_Sdg) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sdg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sdg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SdgCaption struct {
	SdgCaptions []*TxsdSdgCaption `xml:"SDG-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SdgCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SdgCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SdgCaption instance.
func (me *XsdGoPkgHasElems_SdgCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SdgCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SdgCaptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Sdgs struct {
	Sdgses []*TxsdSdgs `xml:"SDGS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Sdgs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Sdgs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Sdgs instance.
func (me *XsdGoPkgHasElems_Sdgs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Sdgs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sdgses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShortLabel struct {
	ShortLabels []*TxsdSub `xml:"SHORT-LABEL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShortLabel function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShortLabel instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShortLabel instance.
func (me *XsdGoPkgHasElems_ShortLabel) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShortLabel; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShortLabels {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ShortName struct {
	ShortNames []*TxsdSub `xml:"SHORT-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ShortName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ShortName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ShortName instance.
func (me *XsdGoPkgHasElems_ShortName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ShortName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ShortNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Spanspec struct {
	Spanspec *TxsdSpanspec `xml:"SPANSPEC"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Spanspec function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Spanspec instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Spanspec instance.
func (me *XsdGoPkgHasElem_Spanspec) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Spanspec; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Spanspec.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SpecialData struct {
	SpecialDatas []*TxsdSdgs `xml:"SPECIAL-DATA"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SpecialData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SpecialData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SpecialData instance.
func (me *XsdGoPkgHasElems_SpecialData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SpecialData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SpecialDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_State struct {
	States []*TxsdRevisionLabel `xml:"STATE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_State function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_State instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_State instance.
func (me *XsdGoPkgHasElems_State) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_State; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.States {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_State1 struct {
	State1s []*TxsdSub `xml:"STATE-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_State1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_State1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_State1 instance.
func (me *XsdGoPkgHasElems_State1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_State1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.State1s {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Std struct {
	Std *TxsdStd `xml:"STD"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Std function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Std instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Std instance.
func (me *XsdGoPkgHasElem_Std) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Std; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Std.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sub struct {
	Sub *TxsdSub `xml:"SUB"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sub function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sub instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sub instance.
func (me *XsdGoPkgHasElem_Sub) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sub; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sub.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Subtitle struct {
	Subtitles []*TxsdSub `xml:"SUBTITLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Subtitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Subtitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Subtitle instance.
func (me *XsdGoPkgHasElems_Subtitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Subtitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subtitles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Sup struct {
	Sup *TxsdSub `xml:"SUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Sup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Sup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Sup instance.
func (me *XsdGoPkgHasElem_Sup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Sup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Sup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SwUserAccessCase struct {
	SwUserAccessCase *TxsdSwUserAccessCase `xml:"SW-USER-ACCESS-CASE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SwUserAccessCase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SwUserAccessCase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SwUserAccessCase instance.
func (me *XsdGoPkgHasElem_SwUserAccessCase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SwUserAccessCase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SwUserAccessCase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SwUserAccessCaseRefs struct {
	SwUserAccessCaseRefses []*TxsdSwUserAccessCaseRefs `xml:"SW-USER-ACCESS-CASE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SwUserAccessCaseRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SwUserAccessCaseRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SwUserAccessCaseRefs instance.
func (me *XsdGoPkgHasElems_SwUserAccessCaseRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SwUserAccessCaseRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SwUserAccessCaseRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SwUserAccessCases struct {
	SwUserAccessCaseses []*TxsdSwUserAccessCases `xml:"SW-USER-ACCESS-CASES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SwUserAccessCases function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SwUserAccessCases instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SwUserAccessCases instance.
func (me *XsdGoPkgHasElems_SwUserAccessCases) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SwUserAccessCases; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SwUserAccessCaseses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynArgument struct {
	SynArgument *TxsdSynArgument `xml:"SYN-ARGUMENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynArgument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynArgument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynArgument instance.
func (me *XsdGoPkgHasElem_SynArgument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynArgument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynArgument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynArguments struct {
	SynArgumentses []*TxsdSynArguments `xml:"SYN-ARGUMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynArguments function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynArguments instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynArguments instance.
func (me *XsdGoPkgHasElems_SynArguments) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynArguments; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynArgumentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynCaption struct {
	SynCaptions []*TxsdSynCaption `xml:"SYN-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynCaption instance.
func (me *XsdGoPkgHasElems_SynCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynCaptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynExample struct {
	SynExamples []*TxsdSynReturnValue `xml:"SYN-EXAMPLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynExample function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynExample instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynExample instance.
func (me *XsdGoPkgHasElems_SynExample) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynExample; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynExamples {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynFormat struct {
	SynFormat *TxsdAnnotationText `xml:"SYN-FORMAT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynFormat instance.
func (me *XsdGoPkgHasElem_SynFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynFormats struct {
	SynFormatses []*TxsdSynFormats `xml:"SYN-FORMATS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynFormats function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynFormats instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynFormats instance.
func (me *XsdGoPkgHasElems_SynFormats) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynFormats; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynFormatses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynInclude struct {
	SynIncludes []*TxsdCond `xml:"SYN-INCLUDE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynInclude function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynInclude instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynInclude instance.
func (me *XsdGoPkgHasElems_SynInclude) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynInclude; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynIncludes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynObject struct {
	SynObject *TxsdSynObject `xml:"SYN-OBJECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynObject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynObject instance.
func (me *XsdGoPkgHasElem_SynObject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynObjects struct {
	SynObjectses []*TxsdSynObjects `xml:"SYN-OBJECTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynObjects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynObjects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynObjects instance.
func (me *XsdGoPkgHasElems_SynObjects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynObjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynObjectses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynReturnValue struct {
	SynReturnValues []*TxsdSynReturnValue `xml:"SYN-RETURN-VALUE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynReturnValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynReturnValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynReturnValue instance.
func (me *XsdGoPkgHasElems_SynReturnValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynReturnValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynReturnValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynSeeAlso struct {
	SynSeeAlsos []*TxsdCond `xml:"SYN-SEE-ALSO"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynSeeAlso function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynSeeAlso instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynSeeAlso instance.
func (me *XsdGoPkgHasElems_SynSeeAlso) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynSeeAlso; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynSeeAlsos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SynSemantics struct {
	SynSemanticses []*TxsdSynReturnValue `xml:"SYN-SEMANTICS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SynSemantics function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SynSemantics instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SynSemantics instance.
func (me *XsdGoPkgHasElems_SynSemantics) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SynSemantics; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SynSemanticses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SynSynopsis struct {
	SynSynopsis *TxsdSynSynopsis `xml:"SYN-SYNOPSIS"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SynSynopsis function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SynSynopsis instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SynSynopsis instance.
func (me *XsdGoPkgHasElem_SynSynopsis) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SynSynopsis; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SynSynopsis.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SystemUser struct {
	SystemUser *TxsdSub `xml:"SYSTEM-USER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemUser function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemUser instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SystemUser instance.
func (me *XsdGoPkgHasElem_SystemUser) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemUser; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SystemUser.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SystemUserGroup struct {
	SystemUserGroup *TxsdSub `xml:"SYSTEM-USER-GROUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemUserGroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemUserGroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SystemUserGroup instance.
func (me *XsdGoPkgHasElem_SystemUserGroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemUserGroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SystemUserGroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemUserGroups struct {
	SystemUserGroupses []*TxsdSystemUserGroups `xml:"SYSTEM-USER-GROUPS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemUserGroups function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemUserGroups instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemUserGroups instance.
func (me *XsdGoPkgHasElems_SystemUserGroups) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemUserGroups; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SystemUserGroupses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemUsers struct {
	SystemUserses []*TxsdSystemUsers `xml:"SYSTEM-USERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemUsers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemUsers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemUsers instance.
func (me *XsdGoPkgHasElems_SystemUsers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemUsers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SystemUserses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Table struct {
	Table *TxsdTable `xml:"TABLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Table function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Table instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Table instance.
func (me *XsdGoPkgHasElem_Table) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Table; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Table.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TableCaption struct {
	TableCaptions []*TxsdTableCaption `xml:"TABLE-CAPTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TableCaption function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TableCaption instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TableCaption instance.
func (me *XsdGoPkgHasElems_TableCaption) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TableCaption; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TableCaptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tbody struct {
	Tbodies []*TxsdTbody `xml:"TBODY"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tbody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tbody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tbody instance.
func (me *XsdGoPkgHasElems_Tbody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tbody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tbodies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TeamMember struct {
	TeamMember *TxsdTeamMember `xml:"TEAM-MEMBER"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TeamMember function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TeamMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TeamMember instance.
func (me *XsdGoPkgHasElem_TeamMember) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TeamMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TeamMember.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TeamMemberRefs struct {
	TeamMemberRefses []*TxsdTeamMemberRefs `xml:"TEAM-MEMBER-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TeamMemberRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TeamMemberRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TeamMemberRefs instance.
func (me *XsdGoPkgHasElems_TeamMemberRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TeamMemberRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TeamMemberRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TeamMembers struct {
	TeamMemberses []*TxsdTeamMembers `xml:"TEAM-MEMBERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TeamMembers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TeamMembers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TeamMembers instance.
func (me *XsdGoPkgHasElems_TeamMembers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TeamMembers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TeamMemberses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TexMath struct {
	TexMaths []*TxsdTexMath `xml:"TEX-MATH"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TexMath function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TexMath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TexMath instance.
func (me *XsdGoPkgHasElems_TexMath) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TexMath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TexMaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Text struct {
	Texts []*TxsdText `xml:"TEXT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Text function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Text instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Text instance.
func (me *XsdGoPkgHasElems_Text) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Text; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tfoot struct {
	Tfoots []*TxsdTfoot `xml:"TFOOT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tfoot function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tfoot instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tfoot instance.
func (me *XsdGoPkgHasElems_Tfoot) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tfoot; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tfoots {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tgroup struct {
	Tgroup *TxsdTgroup `xml:"TGROUP"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tgroup function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tgroup instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tgroup instance.
func (me *XsdGoPkgHasElem_Tgroup) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tgroup; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tgroup.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Thead struct {
	Theads []*TxsdThead `xml:"THEAD"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Thead function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Thead instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Thead instance.
func (me *XsdGoPkgHasElems_Thead) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Thead; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Theads {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tol struct {
	Tols []*TxsdMin `xml:"TOL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tol function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tol instance.
func (me *XsdGoPkgHasElems_Tol) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tols {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Tool struct {
	Tools []*TxsdSub `xml:"TOOL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Tool function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Tool instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Tool instance.
func (me *XsdGoPkgHasElems_Tool) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Tool; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tools {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ToolVersion struct {
	ToolVersions []*TxsdSub `xml:"TOOL-VERSION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ToolVersion function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ToolVersion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ToolVersion instance.
func (me *XsdGoPkgHasElems_ToolVersion) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ToolVersion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ToolVersions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Topic1 struct {
	Topic1 *TxsdTopic1 `xml:"TOPIC-1"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Topic1 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Topic1 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Topic1 instance.
func (me *XsdGoPkgHasElem_Topic1) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Topic1; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Topic1.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Topic2 struct {
	Topic2 *TxsdTopic2 `xml:"TOPIC-2"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Topic2 function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Topic2 instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Topic2 instance.
func (me *XsdGoPkgHasElem_Topic2) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Topic2; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Topic2.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Tt struct {
	Tt *TxsdTt `xml:"TT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Tt function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Tt instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Tt instance.
func (me *XsdGoPkgHasElem_Tt) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Tt; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tt.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Typ struct {
	Typs []*TxsdMin `xml:"TYP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Typ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Typ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Typ instance.
func (me *XsdGoPkgHasElems_Typ) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Typ; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Typs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Unit struct {
	Units []*TxsdText `xml:"UNIT"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Unit function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Unit instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Unit instance.
func (me *XsdGoPkgHasElems_Unit) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Unit; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Units {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Url struct {
	Urls []*TxsdUrl `xml:"URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Url instance.
func (me *XsdGoPkgHasElems_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Urls {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UsedLanguages struct {
	UsedLanguageses []*TxsdRevisionLabel `xml:"USED-LANGUAGES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UsedLanguages function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UsedLanguages instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UsedLanguages instance.
func (me *XsdGoPkgHasElems_UsedLanguages) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UsedLanguages; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UsedLanguageses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_UserCoverSheet struct {
	UserCoverSheet *TxsdUserCoverSheet `xml:"USER-COVER-SHEET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_UserCoverSheet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_UserCoverSheet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_UserCoverSheet instance.
func (me *XsdGoPkgHasElem_UserCoverSheet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_UserCoverSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.UserCoverSheet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_UserCoverSheets struct {
	UserCoverSheetses []*TxsdUserCoverSheets `xml:"USER-COVER-SHEETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_UserCoverSheets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_UserCoverSheets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_UserCoverSheets instance.
func (me *XsdGoPkgHasElems_UserCoverSheets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_UserCoverSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.UserCoverSheetses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Visible struct {
	Visibles []*TxsdVisible `xml:"VISIBLE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Visible function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Visible instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Visible instance.
func (me *XsdGoPkgHasElems_Visible) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Visible; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Visibles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Xfile struct {
	Xfile *TxsdXfile `xml:"XFILE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Xfile function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Xfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Xfile instance.
func (me *XsdGoPkgHasElem_Xfile) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Xfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Xref struct {
	Xref *TxsdXref `xml:"XREF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Xref function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Xref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Xref instance.
func (me *XsdGoPkgHasElem_Xref) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Xref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Xref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_XrefTarget struct {
	XrefTarget *TxsdXrefTarget `xml:"XREF-TARGET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_XrefTarget function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_XrefTarget instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_XrefTarget instance.
func (me *XsdGoPkgHasElem_XrefTarget) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_XrefTarget; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XrefTarget.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Zip struct {
	Zips []*TxsdSub `xml:"ZIP"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Zip function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Zip instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Zip instance.
func (me *XsdGoPkgHasElems_Zip) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Zip; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Zips {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOverlayImage struct {
	FmOverlayImages []*TxsdFmOverlayImage `xml:"FM-OVERLAY-IMAGE"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOverlayImage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOverlayImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOverlayImage instance.
func (me *XsdGoPkgHasElems_FmOverlayImage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOverlayImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOverlayImages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmVersionInfo struct {
	FmVersionInfos []*TxsdFmVersionInfo `xml:"FM-VERSION-INFO"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmVersionInfo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmVersionInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmVersionInfo instance.
func (me *XsdGoPkgHasElems_FmVersionInfo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmVersionInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmVersionInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorDetections struct {
	FmErrorDetectionses []*TxsdFmErrorDetections `xml:"FM-ERROR-DETECTIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorDetections function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorDetections instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorDetections instance.
func (me *XsdGoPkgHasElems_FmErrorDetections) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorDetections; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorDetectionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorDetection struct {
	FmErrorDetection *TxsdFmErrorDetection `xml:"FM-ERROR-DETECTION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorDetection function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorDetection instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorDetection instance.
func (me *XsdGoPkgHasElem_FmErrorDetection) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorDetection; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorDetection.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorDetectionRefs struct {
	FmErrorDetectionRefses []*TxsdFmErrorDetectionRefs `xml:"FM-ERROR-DETECTION-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorDetectionRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorDetectionRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorDetectionRefs instance.
func (me *XsdGoPkgHasElems_FmErrorDetectionRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorDetectionRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorDetectionRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorDetectionRef struct {
	FmErrorDetectionRef *TxsdFmErrorDetectionRef `xml:"FM-ERROR-DETECTION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorDetectionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorDetectionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorDetectionRef instance.
func (me *XsdGoPkgHasElem_FmErrorDetectionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorDetectionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorDetectionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorResponss struct {
	FmErrorResponsses []*TxsdFmErrorResponss `xml:"FM-ERROR-RESPONSS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorResponss function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorResponss instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorResponss instance.
func (me *XsdGoPkgHasElems_FmErrorResponss) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorResponss; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorResponsses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorResponse struct {
	FmErrorResponse *TxsdFmErrorResponse `xml:"FM-ERROR-RESPONSE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorResponse function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorResponse instance.
func (me *XsdGoPkgHasElem_FmErrorResponse) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmErrorResponseRefs struct {
	FmErrorResponseRefses []*TxsdFmErrorResponseRefs `xml:"FM-ERROR-RESPONSE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmErrorResponseRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmErrorResponseRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmErrorResponseRefs instance.
func (me *XsdGoPkgHasElems_FmErrorResponseRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmErrorResponseRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmErrorResponseRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmErrorResponseRef struct {
	FmErrorResponseRef *TxsdFmErrorResponseRef `xml:"FM-ERROR-RESPONSE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmErrorResponseRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmErrorResponseRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmErrorResponseRef instance.
func (me *XsdGoPkgHasElem_FmErrorResponseRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmErrorResponseRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmErrorResponseRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingConditions struct {
	FmOperatingConditionses []*TxsdFmOperatingConditions `xml:"FM-OPERATING-CONDITIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingConditions function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingConditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingConditions instance.
func (me *XsdGoPkgHasElems_FmOperatingConditions) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingCondition struct {
	FmOperatingCondition *TxsdFmOperatingCondition `xml:"FM-OPERATING-CONDITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingCondition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingCondition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingCondition instance.
func (me *XsdGoPkgHasElem_FmOperatingCondition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingConditionRef struct {
	FmOperatingConditionRef *TxsdFmOperatingConditionRef `xml:"FM-OPERATING-CONDITION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingConditionRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingConditionRef instance.
func (me *XsdGoPkgHasElem_FmOperatingConditionRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingConditionRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingConditionTypes struct {
	FmOperatingConditionTypeses []*TxsdFmOperatingConditionTypes `xml:"FM-OPERATING-CONDITION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingConditionTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingConditionTypes instance.
func (me *XsdGoPkgHasElems_FmOperatingConditionTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditionTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmOperatingConditionType struct {
	FmOperatingConditionType *TxsdFmOperatingConditionType `xml:"FM-OPERATING-CONDITION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmOperatingConditionType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmOperatingConditionType instance.
func (me *XsdGoPkgHasElem_FmOperatingConditionType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmOperatingConditionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmOperatingConditionType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition struct {
	FmOperatingConditionTypeDecompositions []*TxsdFmOperatingConditionTypeDecomposition `xml:"FM-OPERATING-CONDITION-TYPE-DECOMPOSITION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition instance.
func (me *XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmOperatingConditionTypeDecompositions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmAnalysisdesktopParameters struct {
	FmAnalysisdesktopParameterses []*TxsdFmAnalysisdesktopParameters `xml:"FM-ANALYSISDESKTOP-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmAnalysisdesktopParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmAnalysisdesktopParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmAnalysisdesktopParameters instance.
func (me *XsdGoPkgHasElems_FmAnalysisdesktopParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmAnalysisdesktopParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmAnalysisdesktopParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMeasureSequences struct {
	FmMeasureSequenceses []*TxsdFmMeasureSequences `xml:"FM-MEASURE-SEQUENCES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMeasureSequences function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMeasureSequences instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMeasureSequences instance.
func (me *XsdGoPkgHasElems_FmMeasureSequences) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMeasureSequences; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMeasureSequenceses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMeasureSequence struct {
	FmMeasureSequence *TxsdFmMeasureSequence `xml:"FM-MEASURE-SEQUENCE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMeasureSequence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMeasureSequence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMeasureSequence instance.
func (me *XsdGoPkgHasElem_FmMeasureSequence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMeasureSequence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMeasureSequence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmMeasureSequenceRefs struct {
	FmMeasureSequenceRefses []*TxsdFmMeasureSequenceRefs `xml:"FM-MEASURE-SEQUENCE-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmMeasureSequenceRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmMeasureSequenceRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmMeasureSequenceRefs instance.
func (me *XsdGoPkgHasElems_FmMeasureSequenceRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmMeasureSequenceRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmMeasureSequenceRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmMeasureSequenceRef struct {
	FmMeasureSequenceRef *TxsdFmMeasureSequenceRef `xml:"FM-MEASURE-SEQUENCE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmMeasureSequenceRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmMeasureSequenceRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmMeasureSequenceRef instance.
func (me *XsdGoPkgHasElem_FmMeasureSequenceRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmMeasureSequenceRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmMeasureSequenceRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmResponsibleName struct {
	FmResponsibleNames []*TxsdFmResponsibleName `xml:"FM-RESPONSIBLE-NAME"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmResponsibleName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmResponsibleName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmResponsibleName instance.
func (me *XsdGoPkgHasElems_FmResponsibleName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmResponsibleName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmResponsibleNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFtaNodes struct {
	FmFtaNodeses []*TxsdFmFtaNodes `xml:"FM-FTA-NODES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFtaNodes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFtaNodes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFtaNodes instance.
func (me *XsdGoPkgHasElems_FmFtaNodes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFtaNodes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFtaNodeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmFtaNode struct {
	FmFtaNode *TxsdFmFtaNode `xml:"FM-FTA-NODE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmFtaNode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmFtaNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmFtaNode instance.
func (me *XsdGoPkgHasElem_FmFtaNode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmFtaNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmFtaNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmFtaParameters struct {
	FmFtaParameterses []*TxsdFmFtaParameters `xml:"FM-FTA-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmFtaParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmFtaParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmFtaParameters instance.
func (me *XsdGoPkgHasElems_FmFtaParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmFtaParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmFtaParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmIecParameters struct {
	FmIecParameterses []*TxsdFmRsmParameters `xml:"FM-IEC-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmIecParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmIecParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmIecParameters instance.
func (me *XsdGoPkgHasElems_FmIecParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmIecParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmIecParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmRsmParameters struct {
	FmRsmParameterses []*TxsdFmRsmParameters `xml:"FM-RSM-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmRsmParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmRsmParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmRsmParameters instance.
func (me *XsdGoPkgHasElems_FmRsmParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmRsmParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmRsmParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmControlPlanParameters struct {
	FmControlPlanParameterses []*TxsdFmControlPlanParameters `xml:"FM-CONTROL-PLAN-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmControlPlanParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmControlPlanParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmControlPlanParameters instance.
func (me *XsdGoPkgHasElems_FmControlPlanParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmControlPlanParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmControlPlanParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmRequirements struct {
	FmRequirementses []*TxsdFmSeCharacteristics `xml:"FM-REQUIREMENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmRequirements function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmRequirements instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmRequirements instance.
func (me *XsdGoPkgHasElems_FmRequirements) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmRequirements; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmRequirementses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmSheet struct {
	FmDrbfmSheet *TxsdFmDrbfmSheet `xml:"FM-DRBFM-SHEET"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmSheet function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmSheet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmSheet instance.
func (me *XsdGoPkgHasElem_FmDrbfmSheet) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmSheet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmSheet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmSheets struct {
	FmDrbfmSheetses []*TxsdFmDrbfmSheets `xml:"FM-DRBFM-SHEETS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmSheets function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmSheets instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmSheets instance.
func (me *XsdGoPkgHasElems_FmDrbfmSheets) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmSheets; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmSheetses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmParameters struct {
	FmDrbfmParameterses []*TxsdFmDrbfmParameters `xml:"FM-DRBFM-PARAMETERS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmParameters function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmParameters instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmParameters instance.
func (me *XsdGoPkgHasElems_FmDrbfmParameters) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmParameters; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmParameterses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCategoryRefs struct {
	FmCategoryRefses []*TxsdFmUserdefinedAttributeRefs `xml:"FM-CATEGORY-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCategoryRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCategoryRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCategoryRefs instance.
func (me *XsdGoPkgHasElems_FmCategoryRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCategoryRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCategoryRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmProjects struct {
	FmDrbfmProjectses []*TxsdFmDrbfmProjects `xml:"FM-DRBFM-PROJECTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmProjects function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmProjects instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmProjects instance.
func (me *XsdGoPkgHasElems_FmDrbfmProjects) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmProjects; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmProjectses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmProject struct {
	FmDrbfmProject *TxsdFmDrbfmProject `xml:"FM-DRBFM-PROJECT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmProject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmProject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmProject instance.
func (me *XsdGoPkgHasElem_FmDrbfmProject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmProject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmProject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmProjectContents struct {
	FmDrbfmProjectContentses []*TxsdFmDrbfmProjectContents `xml:"FM-DRBFM-PROJECT-CONTENTS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmProjectContents function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmProjectContents instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmProjectContents instance.
func (me *XsdGoPkgHasElems_FmDrbfmProjectContents) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmProjectContents; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmProjectContentses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmProjectContent struct {
	FmDrbfmProjectContent *TxsdFmDrbfmProjectContent `xml:"FM-DRBFM-PROJECT-CONTENT"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmProjectContent function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmProjectContent instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmProjectContent instance.
func (me *XsdGoPkgHasElem_FmDrbfmProjectContent) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmProjectContent; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmProjectContent.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationNotes struct {
	FmDrbfmModificationNoteses []*TxsdFmDrbfmModificationNotes `xml:"FM-DRBFM-MODIFICATION-NOTES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationNotes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationNotes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationNotes instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationNotes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationNotes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationNoteses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationNote struct {
	FmDrbfmModificationNote *TxsdFmDrbfmModificationNote `xml:"FM-DRBFM-MODIFICATION-NOTE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationNote function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationNote instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationNote instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationNote) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationNote; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationNote.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModifications struct {
	FmDrbfmModificationses []*TxsdFmDrbfmModifications `xml:"FM-DRBFM-MODIFICATIONS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModifications function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModifications instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModifications instance.
func (me *XsdGoPkgHasElems_FmDrbfmModifications) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModifications; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModification struct {
	FmDrbfmModification *TxsdFmDrbfmModification `xml:"FM-DRBFM-MODIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModification instance.
func (me *XsdGoPkgHasElem_FmDrbfmModification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationRefs struct {
	FmDrbfmModificationRefses []*TxsdFmDrbfmModificationRefs `xml:"FM-DRBFM-MODIFICATION-REFS"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationRefs function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationRefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationRefs instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationRefs) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationRefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationRefses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationRef struct {
	FmDrbfmModificationRef *TxsdFmDrbfmModificationRef `xml:"FM-DRBFM-MODIFICATION-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationRef instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmCurrentSpecification struct {
	FmCurrentSpecifications []*TxsdFmPlannedSpecification `xml:"FM-CURRENT-SPECIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmCurrentSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmCurrentSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmCurrentSpecification instance.
func (me *XsdGoPkgHasElems_FmCurrentSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmCurrentSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmCurrentSpecifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmPlannedSpecification struct {
	FmPlannedSpecifications []*TxsdFmPlannedSpecification `xml:"FM-PLANNED-SPECIFICATION"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmPlannedSpecification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmPlannedSpecification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmPlannedSpecification instance.
func (me *XsdGoPkgHasElems_FmPlannedSpecification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmPlannedSpecification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmPlannedSpecifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmReason struct {
	FmDrbfmReasons []*TxsdFmPlannedSpecification `xml:"FM-DRBFM-REASON"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmReason function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmReason instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmReason instance.
func (me *XsdGoPkgHasElems_FmDrbfmReason) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmReason; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmReasons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmExcludedFailures struct {
	FmDrbfmExcludedFailureses []*TxsdFmDrbfmExcludedFailures `xml:"FM-DRBFM-EXCLUDED-FAILURES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmExcludedFailures function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmExcludedFailures instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmExcludedFailures instance.
func (me *XsdGoPkgHasElems_FmDrbfmExcludedFailures) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmExcludedFailures; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmExcludedFailureses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationTypes struct {
	FmDrbfmModificationTypeses []*TxsdFmDrbfmModificationTypes `xml:"FM-DRBFM-MODIFICATION-TYPES"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationTypes function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationTypes instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationTypes instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationTypes) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationTypes; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationTypeses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FmDrbfmModificationType struct {
	FmDrbfmModificationType *TxsdFmDrbfmModificationType `xml:"FM-DRBFM-MODIFICATION-TYPE"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FmDrbfmModificationType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FmDrbfmModificationType instance.
func (me *XsdGoPkgHasElem_FmDrbfmModificationType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FmDrbfmModificationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FmDrbfmModificationType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FmDrbfmModificationTypeRef struct {
	FmDrbfmModificationTypeRefs []*TxsdFmDrbfmModificationTypeRef `xml:"FM-DRBFM-MODIFICATION-TYPE-REF"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationTypeRef function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FmDrbfmModificationTypeRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FmDrbfmModificationTypeRef instance.
func (me *XsdGoPkgHasElems_FmDrbfmModificationTypeRef) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FmDrbfmModificationTypeRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FmDrbfmModificationTypeRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 1113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 1113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_RevisionLabelP1                        func(*XsdGoPkgHasElem_RevisionLabelP1, bool) error
	XsdGoPkgHasElem_Xfile                                  func(*XsdGoPkgHasElem_Xfile, bool) error
	XsdGoPkgHasElem_MsrQueryArg                            func(*XsdGoPkgHasElem_MsrQueryArg, bool) error
	XsdGoPkgHasElems_SynFormats                            func(*XsdGoPkgHasElems_SynFormats, bool) error
	XsdGoPkgHasElems_FmErrorResponse                       func(*XsdGoPkgHasElems_FmErrorResponse, bool) error
	XsdGoPkgHasElems_FmCollectionConts                     func(*XsdGoPkgHasElems_FmCollectionConts, bool) error
	XsdGoPkgHasElems_Number                                func(*XsdGoPkgHasElems_Number, bool) error
	XsdGoPkgHasElems_FmProcessDiagram                      func(*XsdGoPkgHasElems_FmProcessDiagram, bool) error
	TxsdFmErrorDetectionRef                                func(*TxsdFmErrorDetectionRef, bool) error
	XsdGoPkgHasElem_FmMeasureSequenceRefs                  func(*XsdGoPkgHasElem_FmMeasureSequenceRefs, bool) error
	XsdGoPkgHasElems_FmVariantMiscData                     func(*XsdGoPkgHasElems_FmVariantMiscData, bool) error
	XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition  func(*XsdGoPkgHasElem_FmOperatingConditionTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmTestSample                           func(*XsdGoPkgHasElem_FmTestSample, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationType                func(*XsdGoPkgHasElem_FmDrbfmModificationType, bool) error
	TxsdXref                                               func(*TxsdXref, bool) error
	TxsdFmIdtable                                          func(*TxsdFmIdtable, bool) error
	TxsdFmErrorDetections                                  func(*TxsdFmErrorDetections, bool) error
	XsdGoPkgHasElems_Map                                   func(*XsdGoPkgHasElems_Map, bool) error
	XsdGoPkgHasElem_Sd                                     func(*XsdGoPkgHasElem_Sd, bool) error
	XsdGoPkgHasElems_SdgCaption                            func(*XsdGoPkgHasElems_SdgCaption, bool) error
	XsdGoPkgHasElems_Sdg                                   func(*XsdGoPkgHasElems_Sdg, bool) error
	XsdGoPkgHasElem_Companies                              func(*XsdGoPkgHasElem_Companies, bool) error
	TxsdFmStructureElement                                 func(*TxsdFmStructureElement, bool) error
	XsdGoPkgHasElems_FmOperatingCondition                  func(*XsdGoPkgHasElems_FmOperatingCondition, bool) error
	TxsdFmDrbfmProjectContents                             func(*TxsdFmDrbfmProjectContents, bool) error
	XsdGoPkgHasElems_FmFormSheetPresentation               func(*XsdGoPkgHasElems_FmFormSheetPresentation, bool) error
	XsdGoPkgHasElems_FmStructures                          func(*XsdGoPkgHasElems_FmStructures, bool) error
	XsdGoPkgHasElem_FmOperatingCondition                   func(*XsdGoPkgHasElem_FmOperatingCondition, bool) error
	TxsdFmXref                                             func(*TxsdFmXref, bool) error
	TxsdFmLinkDestinations                                 func(*TxsdFmLinkDestinations, bool) error
	TxsdFmCharacteristicTypes                              func(*TxsdFmCharacteristicTypes, bool) error
	TxsdFmMeasureSequences                                 func(*TxsdFmMeasureSequences, bool) error
	XsdGoPkgHasElem_L10                                    func(*XsdGoPkgHasElem_L10, bool) error
	XsdGoPkgHasElem_SdgCaption                             func(*XsdGoPkgHasElem_SdgCaption, bool) error
	TxsdFmUserdefinedAttributeRef                          func(*TxsdFmUserdefinedAttributeRef, bool) error
	XsdGoPkgHasElem_Min                                    func(*XsdGoPkgHasElem_Min, bool) error
	XsdGoPkgHasElem_FmUserGroup                            func(*XsdGoPkgHasElem_FmUserGroup, bool) error
	TxsdFmStructureElementRef                              func(*TxsdFmStructureElementRef, bool) error
	XsdGoPkgHasElem_FmVersionInfo                          func(*XsdGoPkgHasElem_FmVersionInfo, bool) error
	XsdGoPkgHasElem_Area                                   func(*XsdGoPkgHasElem_Area, bool) error
	XsdGoPkgHasElem_Desc                                   func(*XsdGoPkgHasElem_Desc, bool) error
	XsdGoPkgHasElem_MsrQueryResultTopic2                   func(*XsdGoPkgHasElem_MsrQueryResultTopic2, bool) error
	TxsdFmToolData                                         func(*TxsdFmToolData, bool) error
	TxsdFmDrbfmParameters                                  func(*TxsdFmDrbfmParameters, bool) error
	XsdGoPkgHasElems_Tbody                                 func(*XsdGoPkgHasElems_Tbody, bool) error
	XsdGoPkgHasElems_FmErrorResponseRefs                   func(*XsdGoPkgHasElems_FmErrorResponseRefs, bool) error
	XsdGoPkgHasElems_TexMath                               func(*XsdGoPkgHasElems_TexMath, bool) error
	XsdGoPkgHasElem_Notation                               func(*XsdGoPkgHasElem_Notation, bool) error
	XsdGoPkgHasElems_FmFunctionRef                         func(*XsdGoPkgHasElems_FmFunctionRef, bool) error
	XsdGoPkgHasElem_L1                                     func(*XsdGoPkgHasElem_L1, bool) error
	XsdGoPkgHasElem_List                                   func(*XsdGoPkgHasElem_List, bool) error
	XsdGoPkgHasElems_FmCollection                          func(*XsdGoPkgHasElems_FmCollection, bool) error
	TxsdSynObject                                          func(*TxsdSynObject, bool) error
	XsdGoPkgHasElems_FmHistoryState                        func(*XsdGoPkgHasElems_FmHistoryState, bool) error
	XsdGoPkgHasElems_FmTestEquipments                      func(*XsdGoPkgHasElems_FmTestEquipments, bool) error
	TxsdFmOccurrenceTasks                                  func(*TxsdFmOccurrenceTasks, bool) error
	XsdGoPkgHasElem_PartNumber                             func(*XsdGoPkgHasElem_PartNumber, bool) error
	XsdGoPkgHasElem_GenericMath                            func(*XsdGoPkgHasElem_GenericMath, bool) error
	XsdGoPkgHasElems_Note                                  func(*XsdGoPkgHasElems_Note, bool) error
	XsdGoPkgHasElem_FmSymbolicDate                         func(*XsdGoPkgHasElem_FmSymbolicDate, bool) error
	TxsdModifications                                      func(*TxsdModifications, bool) error
	XsdGoPkgHasElem_Xdoc                                   func(*XsdGoPkgHasElem_Xdoc, bool) error
	TxsdLocs                                               func(*TxsdLocs, bool) error
	TxsdFmUserGroups                                       func(*TxsdFmUserGroups, bool) error
	XsdGoPkgHasElem_MsrQueryResultTopic1                   func(*XsdGoPkgHasElem_MsrQueryResultTopic1, bool) error
	XsdGoPkgHasElems_FmMachineRefs                         func(*XsdGoPkgHasElems_FmMachineRefs, bool) error
	TxsdCompanyRevisionInfos                               func(*TxsdCompanyRevisionInfos, bool) error
	TxsdTeamMember                                         func(*TxsdTeamMember, bool) error
	XsdGoPkgHasElem_FmStructures                           func(*XsdGoPkgHasElem_FmStructures, bool) error
	TxsdFmErrorDetection                                   func(*TxsdFmErrorDetection, bool) error
	TxsdL2                                                 func(*TxsdL2, bool) error
	XsdGoPkgHasElems_FmStructureRef                        func(*XsdGoPkgHasElems_FmStructureRef, bool) error
	XsdGoPkgHasElems_State1                                func(*XsdGoPkgHasElems_State1, bool) error
	XsdGoPkgHasElems_SystemUserGroups                      func(*XsdGoPkgHasElems_SystemUserGroups, bool) error
	TxsdFmStructure                                        func(*TxsdFmStructure, bool) error
	XsdGoPkgHasElem_FmErrorDetectionRefs                   func(*XsdGoPkgHasElem_FmErrorDetectionRefs, bool) error
	TxsdFmTestEquipments                                   func(*TxsdFmTestEquipments, bool) error
	XsdGoPkgHasElem_Reason                                 func(*XsdGoPkgHasElem_Reason, bool) error
	XsdGoPkgHasElem_FmControlPlans                         func(*XsdGoPkgHasElem_FmControlPlans, bool) error
	TxsdLabeledList                                        func(*TxsdLabeledList, bool) error
	TxsdThead                                              func(*TxsdThead, bool) error
	XsdGoPkgHasElem_FmPaletteRows                          func(*XsdGoPkgHasElem_FmPaletteRows, bool) error
	XsdGoPkgHasElems_FmFunctionTypeRef                     func(*XsdGoPkgHasElems_FmFunctionTypeRef, bool) error
	XsdGoPkgHasElems_FmActionState                         func(*XsdGoPkgHasElems_FmActionState, bool) error
	XsdGoPkgHasElems_MsrQueryResultP1                      func(*XsdGoPkgHasElems_MsrQueryResultP1, bool) error
	TxsdXrefTarget                                         func(*TxsdXrefTarget, bool) error
	XsdGoPkgHasElem_FmVariantRefs                          func(*XsdGoPkgHasElem_FmVariantRefs, bool) error
	XsdGoPkgHasElem_Def                                    func(*XsdGoPkgHasElem_Def, bool) error
	XsdGoPkgHasElem_FmExternalAction                       func(*XsdGoPkgHasElem_FmExternalAction, bool) error
	XsdGoPkgHasElem_FmProcessDiagrams                      func(*XsdGoPkgHasElem_FmProcessDiagrams, bool) error
	XsdGoPkgHasElem_FmActionTypes                          func(*XsdGoPkgHasElem_FmActionTypes, bool) error
	XsdGoPkgHasElem_FmTestSamples                          func(*XsdGoPkgHasElem_FmTestSamples, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationType               func(*XsdGoPkgHasElems_FmDrbfmModificationType, bool) error
	XsdGoPkgHasElems_SynArgument                           func(*XsdGoPkgHasElems_SynArgument, bool) error
	XsdGoPkgHasElems_FmAssessmentDiscoveryList             func(*XsdGoPkgHasElems_FmAssessmentDiscoveryList, bool) error
	TxsdFmFunctionRef                                      func(*TxsdFmFunctionRef, bool) error
	XsdGoPkgHasElem_Prms                                   func(*XsdGoPkgHasElem_Prms, bool) error
	TxsdFmInterface                                        func(*TxsdFmInterface, bool) error
	XsdGoPkgHasElem_FmUserAccessDefinitions                func(*XsdGoPkgHasElem_FmUserAccessDefinitions, bool) error
	XsdGoPkgHasElems_SynInclude                            func(*XsdGoPkgHasElems_SynInclude, bool) error
	XsdGoPkgHasElem_FmStructureRefs                        func(*XsdGoPkgHasElem_FmStructureRefs, bool) error
	XsdGoPkgHasElem_FmFormSheetPresentationVersion         func(*XsdGoPkgHasElem_FmFormSheetPresentationVersion, bool) error
	XsdGoPkgHasElems_FmPaletteRows                         func(*XsdGoPkgHasElems_FmPaletteRows, bool) error
	XsdGoPkgHasElem_MsrQueryP2                             func(*XsdGoPkgHasElem_MsrQueryP2, bool) error
	TxsdMsrQueryArg                                        func(*TxsdMsrQueryArg, bool) error
	TxsdPrivateCode                                        func(*TxsdPrivateCode, bool) error
	TxsdFmCharacteristic                                   func(*TxsdFmCharacteristic, bool) error
	TxsdMatchingDci                                        func(*TxsdMatchingDci, bool) error
	XsdGoPkgHasElems_UsedLanguages                         func(*XsdGoPkgHasElems_UsedLanguages, bool) error
	XsdGoPkgHasElem_FmPaletteColumns                       func(*XsdGoPkgHasElem_FmPaletteColumns, bool) error
	XsdGoPkgHasElems_MiscData                              func(*XsdGoPkgHasElems_MiscData, bool) error
	XsdGoPkgHasElems_FmControlPlanParameters               func(*XsdGoPkgHasElems_FmControlPlanParameters, bool) error
	XsdGoPkgHasElems_Introduction                          func(*XsdGoPkgHasElems_Introduction, bool) error
	XsdGoPkgHasElem_FmErrorDetection                       func(*XsdGoPkgHasElem_FmErrorDetection, bool) error
	TxsdFmStructureElementRefs                             func(*TxsdFmStructureElementRefs, bool) error
	XsdGoPkgHasElem_FmTestEquipmentRef                     func(*XsdGoPkgHasElem_FmTestEquipmentRef, bool) error
	XsdGoPkgHasElems_MatchingDcis                          func(*XsdGoPkgHasElems_MatchingDcis, bool) error
	XsdGoPkgHasElems_FmUserGroups                          func(*XsdGoPkgHasElems_FmUserGroups, bool) error
	XsdGoPkgHasElems_ItemLabel                             func(*XsdGoPkgHasElems_ItemLabel, bool) error
	XsdGoPkgHasElem_Nmlist                                 func(*XsdGoPkgHasElem_Nmlist, bool) error
	XsdGoPkgHasElem_FmOperatingConditionTypeRef            func(*XsdGoPkgHasElem_FmOperatingConditionTypeRef, bool) error
	XsdGoPkgHasElems_FmModuleRef                           func(*XsdGoPkgHasElems_FmModuleRef, bool) error
	XsdGoPkgHasElems_FmPrerequisites                       func(*XsdGoPkgHasElems_FmPrerequisites, bool) error
	TxsdFmFault                                            func(*TxsdFmFault, bool) error
	TxsdFmOperatingConditionTypeDecomposition              func(*TxsdFmOperatingConditionTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmFormSheetPresentationVersions        func(*XsdGoPkgHasElem_FmFormSheetPresentationVersions, bool) error
	XsdGoPkgHasElems_FmUserRightSpec                       func(*XsdGoPkgHasElems_FmUserRightSpec, bool) error
	XsdGoPkgHasElems_MsrQueryResultTopic1                  func(*XsdGoPkgHasElems_MsrQueryResultTopic1, bool) error
	XsdGoPkgHasElems_Tfoot                                 func(*XsdGoPkgHasElems_Tfoot, bool) error
	TxsdFmDrbfmModificationNotes                           func(*TxsdFmDrbfmModificationNotes, bool) error
	XsdGoPkgHasElems_LabeledItem                           func(*XsdGoPkgHasElems_LabeledItem, bool) error
	XsdGoPkgHasElem_SwUserAccessCaseRefs                   func(*XsdGoPkgHasElem_SwUserAccessCaseRefs, bool) error
	XsdGoPkgHasElems_FmMeasureSequence                     func(*XsdGoPkgHasElems_FmMeasureSequence, bool) error
	TxsdItem                                               func(*TxsdItem, bool) error
	XsdGoPkgHasElems_FmUserdefinedAttributeRef             func(*XsdGoPkgHasElems_FmUserdefinedAttributeRef, bool) error
	TxsdFmStructures                                       func(*TxsdFmStructures, bool) error
	XsdGoPkgHasElems_AddInfo5                              func(*XsdGoPkgHasElems_AddInfo5, bool) error
	XsdGoPkgHasElems_FmFormHeader                          func(*XsdGoPkgHasElems_FmFormHeader, bool) error
	TxsdFmPaletteColumn                                    func(*TxsdFmPaletteColumn, bool) error
	TxsdFmPartListEntry                                    func(*TxsdFmPartListEntry, bool) error
	XsdGoPkgHasElems_SystemUser                            func(*XsdGoPkgHasElems_SystemUser, bool) error
	TxsdSynArgument                                        func(*TxsdSynArgument, bool) error
	XsdGoPkgHasElem_FmCollectionConts                      func(*XsdGoPkgHasElem_FmCollectionConts, bool) error
	TxsdMiscValue                                          func(*TxsdMiscValue, bool) error
	XsdGoPkgHasElems_FmTool                                func(*XsdGoPkgHasElems_FmTool, bool) error
	TxsdFmExternalActionsOccurrence                        func(*TxsdFmExternalActionsOccurrence, bool) error
	XsdGoPkgHasElem_Formula                                func(*XsdGoPkgHasElem_Formula, bool) error
	XsdGoPkgHasElems_Locs                                  func(*XsdGoPkgHasElems_Locs, bool) error
	XsdGoPkgHasElem_FmFunctionTypeDecomposition            func(*XsdGoPkgHasElem_FmFunctionTypeDecomposition, bool) error
	TxsdFmVariant                                          func(*TxsdFmVariant, bool) error
	TxsdFmTestEquipment                                    func(*TxsdFmTestEquipment, bool) error
	TxsdFmHistoryStates                                    func(*TxsdFmHistoryStates, bool) error
	TxsdFmDrbfmProject                                     func(*TxsdFmDrbfmProject, bool) error
	TxsdFmOperatingConditionTypes                          func(*TxsdFmOperatingConditionTypes, bool) error
	TxsdRow                                                func(*TxsdRow, bool) error
	XsdGoPkgHasElems_Tgroup                                func(*XsdGoPkgHasElems_Tgroup, bool) error
	XsdGoPkgHasElem_FmFault                                func(*XsdGoPkgHasElem_FmFault, bool) error
	XsdGoPkgHasElems_FmNetConnections                      func(*XsdGoPkgHasElems_FmNetConnections, bool) error
	XsdGoPkgHasElems_Roles                                 func(*XsdGoPkgHasElems_Roles, bool) error
	XsdGoPkgHasElems_ShortName                             func(*XsdGoPkgHasElems_ShortName, bool) error
	TxsdBr                                                 func(*TxsdBr, bool) error
	XsdGoPkgHasElem_FmOperatingConditionTypes              func(*XsdGoPkgHasElem_FmOperatingConditionTypes, bool) error
	TxsdFmFaultTypes                                       func(*TxsdFmFaultTypes, bool) error
	XsdGoPkgHasElem_FmStructureRef                         func(*XsdGoPkgHasElem_FmStructureRef, bool) error
	XsdGoPkgHasElems_FmOccurrenceTasks                     func(*XsdGoPkgHasElems_FmOccurrenceTasks, bool) error
	XsdGoPkgHasElems_FmDrbfmProjects                       func(*XsdGoPkgHasElems_FmDrbfmProjects, bool) error
	XsdGoPkgHasElem_Unit                                   func(*XsdGoPkgHasElem_Unit, bool) error
	XsdGoPkgHasElems_Table                                 func(*XsdGoPkgHasElems_Table, bool) error
	TxsdFmActionType                                       func(*TxsdFmActionType, bool) error
	XsdGoPkgHasElems_CompanyRef                            func(*XsdGoPkgHasElems_CompanyRef, bool) error
	XsdGoPkgHasElem_FmCharacteristicTypes                  func(*XsdGoPkgHasElem_FmCharacteristicTypes, bool) error
	XsdGoPkgHasElems_FmFunction                            func(*XsdGoPkgHasElems_FmFunction, bool) error
	XsdGoPkgHasElems_FigureCaption                         func(*XsdGoPkgHasElems_FigureCaption, bool) error
	TxsdFmDrbfmModificationRef                             func(*TxsdFmDrbfmModificationRef, bool) error
	TxsdFmDrbfmModificationNote                            func(*TxsdFmDrbfmModificationNote, bool) error
	XsdGoPkgHasElems_TeamMember                            func(*XsdGoPkgHasElems_TeamMember, bool) error
	XsdGoPkgHasElems_FmCharacteristicRef                   func(*XsdGoPkgHasElems_FmCharacteristicRef, bool) error
	XsdGoPkgHasElems_L4                                    func(*XsdGoPkgHasElems_L4, bool) error
	TxsdFmNetConnectionSource                              func(*TxsdFmNetConnectionSource, bool) error
	XsdGoPkgHasElems_FmFaultTypeDecomposition              func(*XsdGoPkgHasElems_FmFaultTypeDecomposition, bool) error
	XsdGoPkgHasElems_PrivateCodes                          func(*XsdGoPkgHasElems_PrivateCodes, bool) error
	XsdGoPkgHasElem_City                                   func(*XsdGoPkgHasElem_City, bool) error
	XsdGoPkgHasElems_FmMachines                            func(*XsdGoPkgHasElems_FmMachines, bool) error
	XsdGoPkgHasElems_FmStructureElementRefs                func(*XsdGoPkgHasElems_FmStructureElementRefs, bool) error
	XsdGoPkgHasElems_RevisionLabel                         func(*XsdGoPkgHasElems_RevisionLabel, bool) error
	TxsdSynSynopsis                                        func(*TxsdSynSynopsis, bool) error
	XsdGoPkgHasElems_SynSynopsis                           func(*XsdGoPkgHasElems_SynSynopsis, bool) error
	XsdGoPkgHasElem_Sdgs                                   func(*XsdGoPkgHasElem_Sdgs, bool) error
	XsdGoPkgHasElem_Figure                                 func(*XsdGoPkgHasElem_Figure, bool) error
	TxsdFmControlPlans                                     func(*TxsdFmControlPlans, bool) error
	TxsdTbody                                              func(*TxsdTbody, bool) error
	XsdGoPkgHasElems_FmExternalActionsOccurrence           func(*XsdGoPkgHasElems_FmExternalActionsOccurrence, bool) error
	XsdGoPkgHasElems_SynCaption                            func(*XsdGoPkgHasElems_SynCaption, bool) error
	XsdGoPkgHasElem_CompanyRevisionInfos                   func(*XsdGoPkgHasElem_CompanyRevisionInfos, bool) error
	TxsdFigure                                             func(*TxsdFigure, bool) error
	XsdGoPkgHasElem_FmNetConnectionTarget                  func(*XsdGoPkgHasElem_FmNetConnectionTarget, bool) error
	XsdGoPkgHasElem_DefList                                func(*XsdGoPkgHasElem_DefList, bool) error
	XsdGoPkgHasElem_FmFunctionTypeRef                      func(*XsdGoPkgHasElem_FmFunctionTypeRef, bool) error
	XsdGoPkgHasElems_Output                                func(*XsdGoPkgHasElems_Output, bool) error
	XsdGoPkgHasElems_FmCurrentSpecification                func(*XsdGoPkgHasElems_FmCurrentSpecification, bool) error
	XsdGoPkgHasElems_FmErrorResponseRef                    func(*XsdGoPkgHasElems_FmErrorResponseRef, bool) error
	XsdGoPkgHasElem_FmOccurrenceTasks                      func(*XsdGoPkgHasElem_FmOccurrenceTasks, bool) error
	XsdGoPkgHasElems_FmOperatingConditionTypeRef           func(*XsdGoPkgHasElems_FmOperatingConditionTypeRef, bool) error
	TxsdFmPaletteColumns                                   func(*TxsdFmPaletteColumns, bool) error
	XsdGoPkgHasElem_FmRsmParameters                        func(*XsdGoPkgHasElem_FmRsmParameters, bool) error
	TxsdMsrQueryResultChapter                              func(*TxsdMsrQueryResultChapter, bool) error
	XsdGoPkgHasElem_FmDetectionTasks                       func(*XsdGoPkgHasElem_FmDetectionTasks, bool) error
	XsdGoPkgHasElems_Formula                               func(*XsdGoPkgHasElems_Formula, bool) error
	XsdGoPkgHasElem_Annotations                            func(*XsdGoPkgHasElem_Annotations, bool) error
	XsdGoPkgHasElem_AddInfo5                               func(*XsdGoPkgHasElem_AddInfo5, bool) error
	TxsdFmDrbfmExcludedFailures                            func(*TxsdFmDrbfmExcludedFailures, bool) error
	XsdGoPkgHasElems_FmUserGroupRef                        func(*XsdGoPkgHasElems_FmUserGroupRef, bool) error
	XsdGoPkgHasElem_FmUserGroupRef                         func(*XsdGoPkgHasElem_FmUserGroupRef, bool) error
	TxsdFmOperatingCondition                               func(*TxsdFmOperatingCondition, bool) error
	TxsdCompanyDocInfo                                     func(*TxsdCompanyDocInfo, bool) error
	TxsdFmLinkDestination                                  func(*TxsdFmLinkDestination, bool) error
	TxsdFmMeasureSequenceRefs                              func(*TxsdFmMeasureSequenceRefs, bool) error
	XsdGoPkgHasElem_TableCaption                           func(*XsdGoPkgHasElem_TableCaption, bool) error
	XsdGoPkgHasElem_Br                                     func(*XsdGoPkgHasElem_Br, bool) error
	XsdGoPkgHasElems_Date                                  func(*XsdGoPkgHasElems_Date, bool) error
	XsdGoPkgHasElem_FmAssessmentEntry                      func(*XsdGoPkgHasElem_FmAssessmentEntry, bool) error
	XsdGoPkgHasElem_FmMachineRef                           func(*XsdGoPkgHasElem_FmMachineRef, bool) error
	XsdGoPkgHasElem_Category                               func(*XsdGoPkgHasElem_Category, bool) error
	XsdGoPkgHasElem_Fax                                    func(*XsdGoPkgHasElem_Fax, bool) error
	TxsdFmSymbolicDates                                    func(*TxsdFmSymbolicDates, bool) error
	TxsdFmStructureRefs                                    func(*TxsdFmStructureRefs, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationNotes              func(*XsdGoPkgHasElems_FmDrbfmModificationNotes, bool) error
	TxsdLongName                                           func(*TxsdLongName, bool) error
	XsdGoPkgHasElem_CompanyRef                             func(*XsdGoPkgHasElem_CompanyRef, bool) error
	XsdGoPkgHasElem_FmActions                              func(*XsdGoPkgHasElem_FmActions, bool) error
	XsdGoPkgHasElems_Max                                   func(*XsdGoPkgHasElems_Max, bool) error
	XsdGoPkgHasElems_FmNetConnectionTarget                 func(*XsdGoPkgHasElems_FmNetConnectionTarget, bool) error
	XsdGoPkgHasElems_FmDrbfmProjectContent                 func(*XsdGoPkgHasElems_FmDrbfmProjectContent, bool) error
	XsdGoPkgHasElems_UserCoverSheet                        func(*XsdGoPkgHasElems_UserCoverSheet, bool) error
	TxsdPrm                                                func(*TxsdPrm, bool) error
	XsdGoPkgHasElems_Topic1                                func(*XsdGoPkgHasElems_Topic1, bool) error
	XsdGoPkgHasElems_FmNetConnectionSource                 func(*XsdGoPkgHasElems_FmNetConnectionSource, bool) error
	TxsdAdminData                                          func(*TxsdAdminData, bool) error
	TxsdDefList                                            func(*TxsdDefList, bool) error
	XsdGoPkgHasElem_Tbody                                  func(*XsdGoPkgHasElem_Tbody, bool) error
	XsdGoPkgHasElem_FmUserdefinedAttributes                func(*XsdGoPkgHasElem_FmUserdefinedAttributes, bool) error
	TxsdMiscData                                           func(*TxsdMiscData, bool) error
	XsdGoPkgHasElem_FmAssessmentDiscoveryList              func(*XsdGoPkgHasElem_FmAssessmentDiscoveryList, bool) error
	XsdGoPkgHasElem_FmFormSheets                           func(*XsdGoPkgHasElem_FmFormSheets, bool) error
	XsdGoPkgHasElem_FmDrbfmSheet                           func(*XsdGoPkgHasElem_FmDrbfmSheet, bool) error
	XsdGoPkgHasElems_MsrQueryText                          func(*XsdGoPkgHasElems_MsrQueryText, bool) error
	XsdGoPkgHasElem_FmActionRef                            func(*XsdGoPkgHasElem_FmActionRef, bool) error
	XsdGoPkgHasElems_FmAnalysisdesktopParameters           func(*XsdGoPkgHasElems_FmAnalysisdesktopParameters, bool) error
	XsdGoPkgHasElems_PrivateCode                           func(*XsdGoPkgHasElems_PrivateCode, bool) error
	TxsdFmPalettes                                         func(*TxsdFmPalettes, bool) error
	XsdGoPkgHasElem_FmTool                                 func(*XsdGoPkgHasElem_FmTool, bool) error
	XsdGoPkgHasElems_L3                                    func(*XsdGoPkgHasElems_L3, bool) error
	XsdGoPkgHasElems_FmStructureRefs                       func(*XsdGoPkgHasElems_FmStructureRefs, bool) error
	XsdGoPkgHasElem_PrivateCode                            func(*XsdGoPkgHasElem_PrivateCode, bool) error
	TxsdFmPdLine                                           func(*TxsdFmPdLine, bool) error
	XsdGoPkgHasElem_FmRequirements                         func(*XsdGoPkgHasElem_FmRequirements, bool) error
	TxsdSwUserAccessCaseRefs                               func(*TxsdSwUserAccessCaseRefs, bool) error
	XsdGoPkgHasElems_FmOrphanHome                          func(*XsdGoPkgHasElems_FmOrphanHome, bool) error
	XsdGoPkgHasElem_FmFunction                             func(*XsdGoPkgHasElem_FmFunction, bool) error
	XsdGoPkgHasElems_IndentSample                          func(*XsdGoPkgHasElems_IndentSample, bool) error
	TxsdL4                                                 func(*TxsdL4, bool) error
	XsdGoPkgHasElem_FmPdTable                              func(*XsdGoPkgHasElem_FmPdTable, bool) error
	XsdGoPkgHasElems_MsrQueryTopic2                        func(*XsdGoPkgHasElems_MsrQueryTopic2, bool) error
	TxsdFmFaultTypeDecomposition                           func(*TxsdFmFaultTypeDecomposition, bool) error
	TxsdFmOperatingConditionRef                            func(*TxsdFmOperatingConditionRef, bool) error
	XsdGoPkgHasElem_FmVariant                              func(*XsdGoPkgHasElem_FmVariant, bool) error
	XsdGoPkgHasElems_FmFaultTypeRef                        func(*XsdGoPkgHasElems_FmFaultTypeRef, bool) error
	TxsdFmPlannedSpecification                             func(*TxsdFmPlannedSpecification, bool) error
	XsdGoPkgHasElems_SynArguments                          func(*XsdGoPkgHasElems_SynArguments, bool) error
	TxsdModification                                       func(*TxsdModification, bool) error
	TxsdArea                                               func(*TxsdArea, bool) error
	TxsdFmReactions                                        func(*TxsdFmReactions, bool) error
	XsdGoPkgHasElem_FmNetConnectionSource                  func(*XsdGoPkgHasElem_FmNetConnectionSource, bool) error
	XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition func(*XsdGoPkgHasElems_FmOperatingConditionTypeDecomposition, bool) error
	TxsdFmDrbfmProjects                                    func(*TxsdFmDrbfmProjects, bool) error
	TxsdNameloc                                            func(*TxsdNameloc, bool) error
	XsdGoPkgHasElems_FmTestEquipment                       func(*XsdGoPkgHasElems_FmTestEquipment, bool) error
	XsdGoPkgHasElem_Prm                                    func(*XsdGoPkgHasElem_Prm, bool) error
	XsdGoPkgHasElem_FmCurrentSpecification                 func(*XsdGoPkgHasElem_FmCurrentSpecification, bool) error
	XsdGoPkgHasElems_Department                            func(*XsdGoPkgHasElems_Department, bool) error
	XsdGoPkgHasElem_Row                                    func(*XsdGoPkgHasElem_Row, bool) error
	XsdGoPkgHasElems_FmCharacteristicTypeRef               func(*XsdGoPkgHasElems_FmCharacteristicTypeRef, bool) error
	XsdGoPkgHasElems_FmCollectionRefs                      func(*XsdGoPkgHasElems_FmCollectionRefs, bool) error
	XsdGoPkgHasElems_FmFormSheetPresentationVersions       func(*XsdGoPkgHasElems_FmFormSheetPresentationVersions, bool) error
	XsdGoPkgHasElems_FmPartList                            func(*XsdGoPkgHasElems_FmPartList, bool) error
	XsdGoPkgHasElems_AnnotationOrigin                      func(*XsdGoPkgHasElems_AnnotationOrigin, bool) error
	XsdGoPkgHasElem_LGraphic                               func(*XsdGoPkgHasElem_LGraphic, bool) error
	XsdGoPkgHasElems_Remark                                func(*XsdGoPkgHasElems_Remark, bool) error
	TxsdFmAssessmentDiscoveryList                          func(*TxsdFmAssessmentDiscoveryList, bool) error
	TxsdFmCauses                                           func(*TxsdFmCauses, bool) error
	XsdGoPkgHasElem_FmDrbfmModifications                   func(*XsdGoPkgHasElem_FmDrbfmModifications, bool) error
	TxsdFmDrbfmSheets                                      func(*TxsdFmDrbfmSheets, bool) error
	XsdGoPkgHasElems_FmReactions                           func(*XsdGoPkgHasElems_FmReactions, bool) error
	XsdGoPkgHasElems_MsrQueryResultChapter                 func(*XsdGoPkgHasElems_MsrQueryResultChapter, bool) error
	XsdGoPkgHasElems_MsrQueryArg                           func(*XsdGoPkgHasElems_MsrQueryArg, bool) error
	XsdGoPkgHasElems_DocRevision                           func(*XsdGoPkgHasElems_DocRevision, bool) error
	XsdGoPkgHasElems_FmVariantRef                          func(*XsdGoPkgHasElems_FmVariantRef, bool) error
	XsdGoPkgHasElem_FmPaletteColumn                        func(*XsdGoPkgHasElem_FmPaletteColumn, bool) error
	XsdGoPkgHasElems_MsrQueryProps                         func(*XsdGoPkgHasElems_MsrQueryProps, bool) error
	TxsdFmErrorResponss                                    func(*TxsdFmErrorResponss, bool) error
	XsdGoPkgHasElem_SystemUser                             func(*XsdGoPkgHasElem_SystemUser, bool) error
	XsdGoPkgHasElem_FmFtaNode                              func(*XsdGoPkgHasElem_FmFtaNode, bool) error
	TxsdFmFaultRef                                         func(*TxsdFmFaultRef, bool) error
	TxsdMsrQueryResultP1                                   func(*TxsdMsrQueryResultP1, bool) error
	TxsdFmDrbfmModificationRefs                            func(*TxsdFmDrbfmModificationRefs, bool) error
	XsdGoPkgHasElem_FmOverlayImage                         func(*XsdGoPkgHasElem_FmOverlayImage, bool) error
	TxsdFmModuleRef                                        func(*TxsdFmModuleRef, bool) error
	XsdGoPkgHasElems_FmFunctions                           func(*XsdGoPkgHasElems_FmFunctions, bool) error
	TxsdFmMeasureSequenceRef                               func(*TxsdFmMeasureSequenceRef, bool) error
	XsdGoPkgHasElem_DocRevision                            func(*XsdGoPkgHasElem_DocRevision, bool) error
	XsdGoPkgHasElems_TeamMemberRefs                        func(*XsdGoPkgHasElems_TeamMemberRefs, bool) error
	XsdGoPkgHasElems_FmOperatingConditionTypes             func(*XsdGoPkgHasElems_FmOperatingConditionTypes, bool) error
	XsdGoPkgHasElems_SynFormat                             func(*XsdGoPkgHasElems_SynFormat, bool) error
	XsdGoPkgHasElems_FmPlannedSpecification                func(*XsdGoPkgHasElems_FmPlannedSpecification, bool) error
	TxsdXdoc                                               func(*TxsdXdoc, bool) error
	XsdGoPkgHasElems_CompanyDocInfo                        func(*XsdGoPkgHasElems_CompanyDocInfo, bool) error
	XsdGoPkgHasElems_FmDrbfmProject                        func(*XsdGoPkgHasElems_FmDrbfmProject, bool) error
	XsdGoPkgHasElem_FmFaultRefs                            func(*XsdGoPkgHasElem_FmFaultRefs, bool) error
	TxsdSynArguments                                       func(*TxsdSynArguments, bool) error
	XsdGoPkgHasElems_DocRevisions                          func(*XsdGoPkgHasElems_DocRevisions, bool) error
	XsdGoPkgHasElems_FmStructureOwner                      func(*XsdGoPkgHasElems_FmStructureOwner, bool) error
	XsdGoPkgHasElems_FmDrbfmReason                         func(*XsdGoPkgHasElems_FmDrbfmReason, bool) error
	XsdGoPkgHasElems_FmAssessmentCatalog                   func(*XsdGoPkgHasElems_FmAssessmentCatalog, bool) error
	XsdGoPkgHasElem_Input                                  func(*XsdGoPkgHasElem_Input, bool) error
	XsdGoPkgHasElems_FmDrbfmModification                   func(*XsdGoPkgHasElems_FmDrbfmModification, bool) error
	TxsdFmUserRightSpec                                    func(*TxsdFmUserRightSpec, bool) error
	XsdGoPkgHasElems_AdminData                             func(*XsdGoPkgHasElems_AdminData, bool) error
	XsdGoPkgHasElem_Tool                                   func(*XsdGoPkgHasElem_Tool, bool) error
	XsdGoPkgHasElem_FmTeams                                func(*XsdGoPkgHasElem_FmTeams, bool) error
	TxsdCond                                               func(*TxsdCond, bool) error
	TxsdFmPdRow                                            func(*TxsdFmPdRow, bool) error
	TxsdFmHistoryState                                     func(*TxsdFmHistoryState, bool) error
	XsdGoPkgHasElems_FigureRef                             func(*XsdGoPkgHasElems_FigureRef, bool) error
	XsdGoPkgHasElems_FmFormSheets                          func(*XsdGoPkgHasElems_FmFormSheets, bool) error
	XsdGoPkgHasElems_FmLinkDestinations                    func(*XsdGoPkgHasElems_FmLinkDestinations, bool) error
	XsdGoPkgHasElems_FmPalettes                            func(*XsdGoPkgHasElems_FmPalettes, bool) error
	XsdGoPkgHasElems_LongName1                             func(*XsdGoPkgHasElems_LongName1, bool) error
	XsdGoPkgHasElems_FmControlMethods                      func(*XsdGoPkgHasElems_FmControlMethods, bool) error
	XsdGoPkgHasElem_FmPaletteRow                           func(*XsdGoPkgHasElem_FmPaletteRow, bool) error
	TxsdMsrQueryResultText                                 func(*TxsdMsrQueryResultText, bool) error
	TxsdL5                                                 func(*TxsdL5, bool) error
	XsdGoPkgHasElem_FmStructureElementRef                  func(*XsdGoPkgHasElem_FmStructureElementRef, bool) error
	XsdGoPkgHasElem_FmLinkDestinations                     func(*XsdGoPkgHasElem_FmLinkDestinations, bool) error
	XsdGoPkgHasElem_Role                                   func(*XsdGoPkgHasElem_Role, bool) error
	XsdGoPkgHasElems_FmMeasureSequenceRefs                 func(*XsdGoPkgHasElems_FmMeasureSequenceRefs, bool) error
	XsdGoPkgHasElem_Cond                                   func(*XsdGoPkgHasElem_Cond, bool) error
	TxsdFmTaskHistory                                      func(*TxsdFmTaskHistory, bool) error
	TxsdFmSeFunctions                                      func(*TxsdFmSeFunctions, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationRef                func(*XsdGoPkgHasElems_FmDrbfmModificationRef, bool) error
	XsdGoPkgHasElem_SwUserAccessCase                       func(*XsdGoPkgHasElem_SwUserAccessCase, bool) error
	XsdGoPkgHasElems_Tool                                  func(*XsdGoPkgHasElems_Tool, bool) error
	XsdGoPkgHasElems_Url                                   func(*XsdGoPkgHasElems_Url, bool) error
	XsdGoPkgHasElem_L2                                     func(*XsdGoPkgHasElem_L2, bool) error
	XsdGoPkgHasElems_Publisher                             func(*XsdGoPkgHasElems_Publisher, bool) error
	XsdGoPkgHasElems_Sdgs                                  func(*XsdGoPkgHasElems_Sdgs, bool) error
	XsdGoPkgHasElems_Xfile                                 func(*XsdGoPkgHasElems_Xfile, bool) error
	XsdGoPkgHasElem_RevisionLabelP2                        func(*XsdGoPkgHasElem_RevisionLabelP2, bool) error
	XsdGoPkgHasElems_Item                                  func(*XsdGoPkgHasElems_Item, bool) error
	TxsdColspec                                            func(*TxsdColspec, bool) error
	TxsdFmOperatingConditions                              func(*TxsdFmOperatingConditions, bool) error
	XsdGoPkgHasElems_FmSignificance                        func(*XsdGoPkgHasElems_FmSignificance, bool) error
	XsdGoPkgHasElem_FmDrbfmModification                    func(*XsdGoPkgHasElem_FmDrbfmModification, bool) error
	XsdGoPkgHasElem_AdminData                              func(*XsdGoPkgHasElem_AdminData, bool) error
	XsdGoPkgHasElems_FmPalette                             func(*XsdGoPkgHasElems_FmPalette, bool) error
	XsdGoPkgHasElems_FmProject                             func(*XsdGoPkgHasElems_FmProject, bool) error
	TxsdFmActionTypes                                      func(*TxsdFmActionTypes, bool) error
	XsdGoPkgHasElems_Thead                                 func(*XsdGoPkgHasElems_Thead, bool) error
	XsdGoPkgHasElems_XrefTarget                            func(*XsdGoPkgHasElems_XrefTarget, bool) error
	TxsdFmActionTypeRef                                    func(*TxsdFmActionTypeRef, bool) error
	XsdGoPkgHasElem_SynInclude                             func(*XsdGoPkgHasElem_SynInclude, bool) error
	XsdGoPkgHasElem_Colspec                                func(*XsdGoPkgHasElem_Colspec, bool) error
	XsdGoPkgHasElems_State                                 func(*XsdGoPkgHasElems_State, bool) error
	XsdGoPkgHasElems_FmVersionInfo                         func(*XsdGoPkgHasElems_FmVersionInfo, bool) error
	XsdGoPkgHasElem_Position                               func(*XsdGoPkgHasElem_Position, bool) error
	TxsdTeamMemberRefs                                     func(*TxsdTeamMemberRefs, bool) error
	TxsdFmFtaNode                                          func(*TxsdFmFtaNode, bool) error
	XsdGoPkgHasElem_FmAssessmentCatalog                    func(*XsdGoPkgHasElem_FmAssessmentCatalog, bool) error
	XsdGoPkgHasElem_SystemUserGroups                       func(*XsdGoPkgHasElem_SystemUserGroups, bool) error
	XsdGoPkgHasElem_MsrQueryTopic1                         func(*XsdGoPkgHasElem_MsrQueryTopic1, bool) error
	XsdGoPkgHasElem_UserCoverSheet                         func(*XsdGoPkgHasElem_UserCoverSheet, bool) error
	XsdGoPkgHasElem_Date1                                  func(*XsdGoPkgHasElem_Date1, bool) error
	TxsdSystemUsers                                        func(*TxsdSystemUsers, bool) error
	TxsdSwUserAccessCaseRef                                func(*TxsdSwUserAccessCaseRef, bool) error
	XsdGoPkgHasElem_SystemUsers                            func(*XsdGoPkgHasElem_SystemUsers, bool) error
	XsdGoPkgHasElems_CompanyRevisionInfos                  func(*XsdGoPkgHasElems_CompanyRevisionInfos, bool) error
	XsdGoPkgHasElems_FmTeam                                func(*XsdGoPkgHasElems_FmTeam, bool) error
	TxsdFmCharacteristicRef                                func(*TxsdFmCharacteristicRef, bool) error
	TxsdFmPaletteRow                                       func(*TxsdFmPaletteRow, bool) error
	XsdGoPkgHasElem_FmProjects                             func(*XsdGoPkgHasElem_FmProjects, bool) error
	XsdGoPkgHasElem_FmAssessmentMilList                    func(*XsdGoPkgHasElem_FmAssessmentMilList, bool) error
	XsdGoPkgHasElems_Def                                   func(*XsdGoPkgHasElems_Def, bool) error
	XsdGoPkgHasElem_FmPlannedSpecification                 func(*XsdGoPkgHasElem_FmPlannedSpecification, bool) error
	TxsdFmErrorResponse                                    func(*TxsdFmErrorResponse, bool) error
	XsdGoPkgHasElem_Annotation                             func(*XsdGoPkgHasElem_Annotation, bool) error
	XsdGoPkgHasElem_Language                               func(*XsdGoPkgHasElem_Language, bool) error
	TxsdFigureCaption                                      func(*TxsdFigureCaption, bool) error
	XsdGoPkgHasElem_SynObject                              func(*XsdGoPkgHasElem_SynObject, bool) error
	XsdGoPkgHasElem_FmLinkDestination                      func(*XsdGoPkgHasElem_FmLinkDestination, bool) error
	XsdGoPkgHasElem_FmErrorResponse                        func(*XsdGoPkgHasElem_FmErrorResponse, bool) error
	TxsdTt                                                 func(*TxsdTt, bool) error
	XsdGoPkgHasElems_FmOperatingConditionRef               func(*XsdGoPkgHasElems_FmOperatingConditionRef, bool) error
	XsdGoPkgHasElems_FmControlPlans                        func(*XsdGoPkgHasElems_FmControlPlans, bool) error
	XsdGoPkgHasElem_FmFunctionRef                          func(*XsdGoPkgHasElem_FmFunctionRef, bool) error
	XsdGoPkgHasElem_CCode                                  func(*XsdGoPkgHasElem_CCode, bool) error
	XsdGoPkgHasElem_RevisionLabel                          func(*XsdGoPkgHasElem_RevisionLabel, bool) error
	XsdGoPkgHasElem_FmSeFunctions                          func(*XsdGoPkgHasElem_FmSeFunctions, bool) error
	TxsdTopic1                                             func(*TxsdTopic1, bool) error
	TxsdFmUserdefinedAttribute                             func(*TxsdFmUserdefinedAttribute, bool) error
	XsdGoPkgHasElems_Chapter                               func(*XsdGoPkgHasElems_Chapter, bool) error
	XsdGoPkgHasElems_Desc                                  func(*XsdGoPkgHasElems_Desc, bool) error
	XsdGoPkgHasElems_RiskPriorityFactor                    func(*XsdGoPkgHasElems_RiskPriorityFactor, bool) error
	TxsdAnnotations                                        func(*TxsdAnnotations, bool) error
	TxsdUserCoverSheets                                    func(*TxsdUserCoverSheets, bool) error
	XsdGoPkgHasElem_FmIdtable                              func(*XsdGoPkgHasElem_FmIdtable, bool) error
	XsdGoPkgHasElems_FmPaletteColumns                      func(*XsdGoPkgHasElems_FmPaletteColumns, bool) error
	XsdGoPkgHasElem_FmUserdefinedAttribute                 func(*XsdGoPkgHasElem_FmUserdefinedAttribute, bool) error
	XsdGoPkgHasElem_FmDrbfmParameters                      func(*XsdGoPkgHasElem_FmDrbfmParameters, bool) error
	TxsdFmFunctionTypes                                    func(*TxsdFmFunctionTypes, bool) error
	TxsdFmUserGroupRefs                                    func(*TxsdFmUserGroupRefs, bool) error
	TxsdFmUserGroup                                        func(*TxsdFmUserGroup, bool) error
	XsdGoPkgHasElem_SynSemantics                           func(*XsdGoPkgHasElem_SynSemantics, bool) error
	TxsdAnnotation                                         func(*TxsdAnnotation, bool) error
	TxsdFmDrbfmModification                                func(*TxsdFmDrbfmModification, bool) error
	XsdGoPkgHasElems_FmTestSample                          func(*XsdGoPkgHasElems_FmTestSample, bool) error
	XsdGoPkgHasElems_Prms                                  func(*XsdGoPkgHasElems_Prms, bool) error
	TxsdFormatterCtrls                                     func(*TxsdFormatterCtrls, bool) error
	XsdGoPkgHasElems_FmCauses                              func(*XsdGoPkgHasElems_FmCauses, bool) error
	XsdGoPkgHasElem_FmToolData                             func(*XsdGoPkgHasElem_FmToolData, bool) error
	XsdGoPkgHasElems_FmUserdefinedAttributes               func(*XsdGoPkgHasElems_FmUserdefinedAttributes, bool) error
	TxsdFmSymbols                                          func(*TxsdFmSymbols, bool) error
	XsdGoPkgHasElem_FmCharacteristicType                   func(*XsdGoPkgHasElem_FmCharacteristicType, bool) error
	XsdGoPkgHasElem_FmNetConnection                        func(*XsdGoPkgHasElem_FmNetConnection, bool) error
	TxsdMsrQueryProps                                      func(*TxsdMsrQueryProps, bool) error
	TxsdFmTestSampleRef                                    func(*TxsdFmTestSampleRef, bool) error
	XsdGoPkgHasElem_FmControlMethods                       func(*XsdGoPkgHasElem_FmControlMethods, bool) error
	TxsdFmVariantMiscDatas                                 func(*TxsdFmVariantMiscDatas, bool) error
	XsdGoPkgHasElems_FmTaskHistory                         func(*XsdGoPkgHasElems_FmTaskHistory, bool) error
	XsdGoPkgHasElems_Language                              func(*XsdGoPkgHasElems_Language, bool) error
	TxsdP                                                  func(*TxsdP, bool) error
	XsdGoPkgHasElem_FmSeCharacteristics                    func(*XsdGoPkgHasElem_FmSeCharacteristics, bool) error
	TxsdLabeledItem                                        func(*TxsdLabeledItem, bool) error
	XsdGoPkgHasElem_FmTaskSchedule                         func(*XsdGoPkgHasElem_FmTaskSchedule, bool) error
	XsdGoPkgHasElem_FmTaskSet                              func(*XsdGoPkgHasElem_FmTaskSet, bool) error
	XsdGoPkgHasElem_SynSynopsis                            func(*XsdGoPkgHasElem_SynSynopsis, bool) error
	XsdGoPkgHasElem_TeamMemberRef                          func(*XsdGoPkgHasElem_TeamMemberRef, bool) error
	XsdGoPkgHasElems_Area                                  func(*XsdGoPkgHasElems_Area, bool) error
	XsdGoPkgHasElem_FmCollectionRefs                       func(*XsdGoPkgHasElem_FmCollectionRefs, bool) error
	XsdGoPkgHasElem_Chapter                                func(*XsdGoPkgHasElem_Chapter, bool) error
	XsdGoPkgHasElem_FmUserGroupRefs                        func(*XsdGoPkgHasElem_FmUserGroupRefs, bool) error
	XsdGoPkgHasElem_FmPdRow                                func(*XsdGoPkgHasElem_FmPdRow, bool) error
	XsdGoPkgHasElems_SwUserAccessCaseRefs                  func(*XsdGoPkgHasElems_SwUserAccessCaseRefs, bool) error
	TxsdLongName1                                          func(*TxsdLongName1, bool) error
	TxsdIdc                                                func(*TxsdIdc, bool) error
	XsdGoPkgHasElems_DefList                               func(*XsdGoPkgHasElems_DefList, bool) error
	XsdGoPkgHasElem_FmFunctionTypes                        func(*XsdGoPkgHasElem_FmFunctionTypes, bool) error
	TxsdMsrQueryTopic1                                     func(*TxsdMsrQueryTopic1, bool) error
	XsdGoPkgHasElems_Modifications                         func(*XsdGoPkgHasElems_Modifications, bool) error
	XsdGoPkgHasElems_Visible                               func(*XsdGoPkgHasElems_Visible, bool) error
	TxsdFmTestEquipmentRef                                 func(*TxsdFmTestEquipmentRef, bool) error
	XsdGoPkgHasElem_SynArguments                           func(*XsdGoPkgHasElem_SynArguments, bool) error
	XsdGoPkgHasElem_Introduction                           func(*XsdGoPkgHasElem_Introduction, bool) error
	XsdGoPkgHasElem_FmControlPlan                          func(*XsdGoPkgHasElem_FmControlPlan, bool) error
	TxsdFmCharacteristicType                               func(*TxsdFmCharacteristicType, bool) error
	XsdGoPkgHasElems_FmFaultType                           func(*XsdGoPkgHasElems_FmFaultType, bool) error
	XsdGoPkgHasElem_FmUserGroups                           func(*XsdGoPkgHasElem_FmUserGroups, bool) error
	XsdGoPkgHasElem_CompanyRevisionInfo                    func(*XsdGoPkgHasElem_CompanyRevisionInfo, bool) error
	TxsdSdgCaption                                         func(*TxsdSdgCaption, bool) error
	TxsdCompanies                                          func(*TxsdCompanies, bool) error
	TxsdFmTool                                             func(*TxsdFmTool, bool) error
	XsdGoPkgHasElem_FmMachines                             func(*XsdGoPkgHasElem_FmMachines, bool) error
	XsdGoPkgHasElems_FormulaCaption                        func(*XsdGoPkgHasElems_FormulaCaption, bool) error
	XsdGoPkgHasElem_Publisher                              func(*XsdGoPkgHasElem_Publisher, bool) error
	XsdGoPkgHasElems_L10                                   func(*XsdGoPkgHasElems_L10, bool) error
	TxsdFmTestSampleRefs                                   func(*TxsdFmTestSampleRefs, bool) error
	XsdGoPkgHasElem_FmPalettes                             func(*XsdGoPkgHasElem_FmPalettes, bool) error
	XsdGoPkgHasElems_FmCharacteristicTypes                 func(*XsdGoPkgHasElems_FmCharacteristicTypes, bool) error
	TxsdLGraphic                                           func(*TxsdLGraphic, bool) error
	TxsdFmDrbfmModificationTypes                           func(*TxsdFmDrbfmModificationTypes, bool) error
	XsdGoPkgHasElems_SynObject                             func(*XsdGoPkgHasElems_SynObject, bool) error
	XsdGoPkgHasElems_AnnotationText                        func(*XsdGoPkgHasElems_AnnotationText, bool) error
	XsdGoPkgHasElem_Table                                  func(*XsdGoPkgHasElem_Table, bool) error
	XsdGoPkgHasElem_Topic1                                 func(*XsdGoPkgHasElem_Topic1, bool) error
	XsdGoPkgHasElems_FmRequirements                        func(*XsdGoPkgHasElems_FmRequirements, bool) error
	TxsdRoles                                              func(*TxsdRoles, bool) error
	XsdGoPkgHasElems_FmFtaNode                             func(*XsdGoPkgHasElems_FmFtaNode, bool) error
	XsdGoPkgHasElems_FmTestSamples                         func(*XsdGoPkgHasElems_FmTestSamples, bool) error
	XsdGoPkgHasElems_SpecialData                           func(*XsdGoPkgHasElems_SpecialData, bool) error
	TxsdDefItem                                            func(*TxsdDefItem, bool) error
	XsdGoPkgHasElem_FmCharacteristicRef                    func(*XsdGoPkgHasElem_FmCharacteristicRef, bool) error
	XsdGoPkgHasElem_Misc                                   func(*XsdGoPkgHasElem_Misc, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationNote               func(*XsdGoPkgHasElems_FmDrbfmModificationNote, bool) error
	TxsdMisc                                               func(*TxsdMisc, bool) error
	XsdGoPkgHasElem_FmReactions                            func(*XsdGoPkgHasElem_FmReactions, bool) error
	TxsdGraphic                                            func(*TxsdGraphic, bool) error
	TxsdFmOperatingConditionTypeRef                        func(*TxsdFmOperatingConditionTypeRef, bool) error
	XsdGoPkgHasElems_Topic2                                func(*XsdGoPkgHasElems_Topic2, bool) error
	XsdGoPkgHasElem_FmCollections                          func(*XsdGoPkgHasElem_FmCollections, bool) error
	XsdGoPkgHasElems_Reason                                func(*XsdGoPkgHasElems_Reason, bool) error
	XsdGoPkgHasElems_SynReturnValue                        func(*XsdGoPkgHasElems_SynReturnValue, bool) error
	XsdGoPkgHasElems_Ft                                    func(*XsdGoPkgHasElems_Ft, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationRefs                func(*XsdGoPkgHasElem_FmDrbfmModificationRefs, bool) error
	TxsdFmSignificance                                     func(*TxsdFmSignificance, bool) error
	TxsdMsrQueryResultTopic2                               func(*TxsdMsrQueryResultTopic2, bool) error
	TxsdTeamMembers                                        func(*TxsdTeamMembers, bool) error
	TxsdFmStructureOwner                                   func(*TxsdFmStructureOwner, bool) error
	XsdGoPkgHasElem_FmActionState                          func(*XsdGoPkgHasElem_FmActionState, bool) error
	XsdGoPkgHasElem_FmTestEquipment                        func(*XsdGoPkgHasElem_FmTestEquipment, bool) error
	XsdGoPkgHasElem_Sub                                    func(*XsdGoPkgHasElem_Sub, bool) error
	XsdGoPkgHasElems_FmDrbfmExcludedFailures               func(*XsdGoPkgHasElems_FmDrbfmExcludedFailures, bool) error
	TxsdSub                                                func(*TxsdSub, bool) error
	TxsdFmDrbfmProjectContent                              func(*TxsdFmDrbfmProjectContent, bool) error
	XsdGoPkgHasElem_MsrQueryResultP2                       func(*XsdGoPkgHasElem_MsrQueryResultP2, bool) error
	XsdGoPkgHasElem_FmPartList                             func(*XsdGoPkgHasElem_FmPartList, bool) error
	XsdGoPkgHasElem_MimeContainer                          func(*XsdGoPkgHasElem_MimeContainer, bool) error
	XsdGoPkgHasElems_FmVariantMiscDatas                    func(*XsdGoPkgHasElems_FmVariantMiscDatas, bool) error
	XsdGoPkgHasElem_FormatterCtrl                          func(*XsdGoPkgHasElem_FormatterCtrl, bool) error
	XsdGoPkgHasElem_Label                                  func(*XsdGoPkgHasElem_Label, bool) error
	XsdGoPkgHasElems_MsrQueryResultP2                      func(*XsdGoPkgHasElems_MsrQueryResultP2, bool) error
	TxsdAddInfo5                                           func(*TxsdAddInfo5, bool) error
	TxsdFmFormHeader                                       func(*TxsdFmFormHeader, bool) error
	TxsdFmTaskSets                                         func(*TxsdFmTaskSets, bool) error
	XsdGoPkgHasElems_Entry                                 func(*XsdGoPkgHasElems_Entry, bool) error
	TxsdFmMeasureSequence                                  func(*TxsdFmMeasureSequence, bool) error
	XsdGoPkgHasElems_Std                                   func(*XsdGoPkgHasElems_Std, bool) error
	TxsdFmDrbfmModificationTypeRef                         func(*TxsdFmDrbfmModificationTypeRef, bool) error
	XsdGoPkgHasElem_FmVariantRef                           func(*XsdGoPkgHasElem_FmVariantRef, bool) error
	XsdGoPkgHasElem_FmErrorDetectionRef                    func(*XsdGoPkgHasElem_FmErrorDetectionRef, bool) error
	XsdGoPkgHasElem_FmDrbfmProject                         func(*XsdGoPkgHasElem_FmDrbfmProject, bool) error
	XsdGoPkgHasElem_UserCoverSheets                        func(*XsdGoPkgHasElem_UserCoverSheets, bool) error
	TxsdChapter                                            func(*TxsdChapter, bool) error
	XsdGoPkgHasElems_Address                               func(*XsdGoPkgHasElems_Address, bool) error
	XsdGoPkgHasElem_TeamMember                             func(*XsdGoPkgHasElem_TeamMember, bool) error
	TxsdFmCharacteristicTypeRef                            func(*TxsdFmCharacteristicTypeRef, bool) error
	TxsdFmSeCharacteristics                                func(*TxsdFmSeCharacteristics, bool) error
	TxsdTopic2                                             func(*TxsdTopic2, bool) error
	XsdGoPkgHasElems_SynSemantics                          func(*XsdGoPkgHasElems_SynSemantics, bool) error
	XsdGoPkgHasElem_Subtitle                               func(*XsdGoPkgHasElem_Subtitle, bool) error
	TxsdSdgs                                               func(*TxsdSdgs, bool) error
	XsdGoPkgHasElem_FmStructureOwner                       func(*XsdGoPkgHasElem_FmStructureOwner, bool) error
	XsdGoPkgHasElems_FmMeasureSequenceRef                  func(*XsdGoPkgHasElems_FmMeasureSequenceRef, bool) error
	XsdGoPkgHasElems_FmTaskSet                             func(*XsdGoPkgHasElems_FmTaskSet, bool) error
	XsdGoPkgHasElems_FmFormSheetPresentationVersion        func(*XsdGoPkgHasElems_FmFormSheetPresentationVersion, bool) error
	XsdGoPkgHasElems_FmFaultRefs                           func(*XsdGoPkgHasElems_FmFaultRefs, bool) error
	TxsdFmOverlayImage                                     func(*TxsdFmOverlayImage, bool) error
	TxsdFmOrphanHome                                       func(*TxsdFmOrphanHome, bool) error
	XsdGoPkgHasElems_FmSeCharacteristics                   func(*XsdGoPkgHasElems_FmSeCharacteristics, bool) error
	XsdGoPkgHasElems_FmSymbolicDates                       func(*XsdGoPkgHasElems_FmSymbolicDates, bool) error
	XsdGoPkgHasElems_FmPdTable                             func(*XsdGoPkgHasElems_FmPdTable, bool) error
	XsdGoPkgHasElem_AnnotationText                         func(*XsdGoPkgHasElem_AnnotationText, bool) error
	XsdGoPkgHasElem_Tol                                    func(*XsdGoPkgHasElem_Tol, bool) error
	XsdGoPkgHasElems_FmFaultRef                            func(*XsdGoPkgHasElems_FmFaultRef, bool) error
	TxsdFmNetConnections                                   func(*TxsdFmNetConnections, bool) error
	XsdGoPkgHasElems_RevisionLabelP2                       func(*XsdGoPkgHasElems_RevisionLabelP2, bool) error
	XsdGoPkgHasElems_Zip                                   func(*XsdGoPkgHasElems_Zip, bool) error
	TxsdIndentSample                                       func(*TxsdIndentSample, bool) error
	TxsdFmSymbolicDateRef                                  func(*TxsdFmSymbolicDateRef, bool) error
	XsdGoPkgHasElem_SynSeeAlso                             func(*XsdGoPkgHasElem_SynSeeAlso, bool) error
	XsdGoPkgHasElem_FmStructure                            func(*XsdGoPkgHasElem_FmStructure, bool) error
	XsdGoPkgHasElem_Msrfmea                                func(*XsdGoPkgHasElem_Msrfmea, bool) error
	XsdGoPkgHasElem_FmVariantMiscData                      func(*XsdGoPkgHasElem_FmVariantMiscData, bool) error
	XsdGoPkgHasElems_CompanyRevisionInfo                   func(*XsdGoPkgHasElems_CompanyRevisionInfo, bool) error
	XsdGoPkgHasElem_FmStructureRoot                        func(*XsdGoPkgHasElem_FmStructureRoot, bool) error
	XsdGoPkgHasElems_FmMachine                             func(*XsdGoPkgHasElems_FmMachine, bool) error
	XsdGoPkgHasElem_FmIecParameters                        func(*XsdGoPkgHasElem_FmIecParameters, bool) error
	XsdGoPkgHasElems_L1                                    func(*XsdGoPkgHasElems_L1, bool) error
	XsdGoPkgHasElem_ShortLabel                             func(*XsdGoPkgHasElem_ShortLabel, bool) error
	XsdGoPkgHasElem_L3                                     func(*XsdGoPkgHasElem_L3, bool) error
	XsdGoPkgHasElems_MsrQueryResultText                    func(*XsdGoPkgHasElems_MsrQueryResultText, bool) error
	XsdGoPkgHasElem_MiscData                               func(*XsdGoPkgHasElem_MiscData, bool) error
	XsdGoPkgHasElem_TeamMemberRefs                         func(*XsdGoPkgHasElem_TeamMemberRefs, bool) error
	XsdGoPkgHasElems_FmErrorDetection                      func(*XsdGoPkgHasElems_FmErrorDetection, bool) error
	TxsdSynReturnValue                                     func(*TxsdSynReturnValue, bool) error
	XsdGoPkgHasElems_Spanspec                              func(*XsdGoPkgHasElems_Spanspec, bool) error
	TxsdFmUserAccessDefinitions                            func(*TxsdFmUserAccessDefinitions, bool) error
	XsdGoPkgHasElems_FmActionTypeDecomposition             func(*XsdGoPkgHasElems_FmActionTypeDecomposition, bool) error
	XsdGoPkgHasElems_FmFtaParameters                       func(*XsdGoPkgHasElems_FmFtaParameters, bool) error
	XsdGoPkgHasElem_CompanyDocInfos                        func(*XsdGoPkgHasElem_CompanyDocInfos, bool) error
	XsdGoPkgHasElem_Output                                 func(*XsdGoPkgHasElem_Output, bool) error
	XsdGoPkgHasElem_FmFtaParameters                        func(*XsdGoPkgHasElem_FmFtaParameters, bool) error
	XsdGoPkgHasElems_Row                                   func(*XsdGoPkgHasElems_Row, bool) error
	XsdGoPkgHasElem_FmDrbfmProjectContent                  func(*XsdGoPkgHasElem_FmDrbfmProjectContent, bool) error
	XsdGoPkgHasElem_Department                             func(*XsdGoPkgHasElem_Department, bool) error
	XsdGoPkgHasElems_Input                                 func(*XsdGoPkgHasElems_Input, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationRef                 func(*XsdGoPkgHasElem_FmDrbfmModificationRef, bool) error
	TxsdFmPaletteEntry                                     func(*TxsdFmPaletteEntry, bool) error
	TxsdFmAction                                           func(*TxsdFmAction, bool) error
	XsdGoPkgHasElems_Annotations                           func(*XsdGoPkgHasElems_Annotations, bool) error
	XsdGoPkgHasElems_FmPaletteRowRef                       func(*XsdGoPkgHasElems_FmPaletteRowRef, bool) error
	XsdGoPkgHasElem_Phone                                  func(*XsdGoPkgHasElem_Phone, bool) error
	TxsdSwUserAccessCase                                   func(*TxsdSwUserAccessCase, bool) error
	XsdGoPkgHasElems_SynExample                            func(*XsdGoPkgHasElems_SynExample, bool) error
	XsdGoPkgHasElem_FmPdLine                               func(*XsdGoPkgHasElem_FmPdLine, bool) error
	TxsdVisible                                            func(*TxsdVisible, bool) error
	TxsdFmFaults                                           func(*TxsdFmFaults, bool) error
	XsdGoPkgHasElems_Figure                                func(*XsdGoPkgHasElems_Figure, bool) error
	XsdGoPkgHasElems_FmActionTypes                         func(*XsdGoPkgHasElems_FmActionTypes, bool) error
	XsdGoPkgHasElem_Url                                    func(*XsdGoPkgHasElem_Url, bool) error
	XsdGoPkgHasElem_FmHead                                 func(*XsdGoPkgHasElem_FmHead, bool) error
	XsdGoPkgHasElems_City                                  func(*XsdGoPkgHasElems_City, bool) error
	XsdGoPkgHasElems_FmToolData                            func(*XsdGoPkgHasElems_FmToolData, bool) error
	TxsdFmVariants                                         func(*TxsdFmVariants, bool) error
	TxsdCompanyRevisionInfo                                func(*TxsdCompanyRevisionInfo, bool) error
	XsdGoPkgHasElem_FmXref                                 func(*XsdGoPkgHasElem_FmXref, bool) error
	XsdGoPkgHasElems_FmStructureElementRef                 func(*XsdGoPkgHasElems_FmStructureElementRef, bool) error
	TxsdFmFormSheets                                       func(*TxsdFmFormSheets, bool) error
	XsdGoPkgHasElems_FmDetectionTasks                      func(*XsdGoPkgHasElems_FmDetectionTasks, bool) error
	XsdGoPkgHasElem_MsrQueryTopic2                         func(*XsdGoPkgHasElem_MsrQueryTopic2, bool) error
	XsdGoPkgHasElems_FmErrorDetections                     func(*XsdGoPkgHasElems_FmErrorDetections, bool) error
	XsdGoPkgHasElem_Roles                                  func(*XsdGoPkgHasElem_Roles, bool) error
	TxsdCompany                                            func(*TxsdCompany, bool) error
	XsdGoPkgHasElems_FmLinkDestination                     func(*XsdGoPkgHasElems_FmLinkDestination, bool) error
	TxsdFmFunctionTypeDecomposition                        func(*TxsdFmFunctionTypeDecomposition, bool) error
	XsdGoPkgHasElem_FigureCaption                          func(*XsdGoPkgHasElem_FigureCaption, bool) error
	TxsdFmExternalAction                                   func(*TxsdFmExternalAction, bool) error
	XsdGoPkgHasElems_FmTestEquipmentRef                    func(*XsdGoPkgHasElems_FmTestEquipmentRef, bool) error
	XsdGoPkgHasElems_Category                              func(*XsdGoPkgHasElems_Category, bool) error
	XsdGoPkgHasElems_Cond                                  func(*XsdGoPkgHasElems_Cond, bool) error
	XsdGoPkgHasElem_FmOperatingConditionType               func(*XsdGoPkgHasElem_FmOperatingConditionType, bool) error
	XsdGoPkgHasElems_TeamMemberRef                         func(*XsdGoPkgHasElems_TeamMemberRef, bool) error
	TxsdFmHead                                             func(*TxsdFmHead, bool) error
	XsdGoPkgHasElem_FmExternalActionsOccurrence            func(*XsdGoPkgHasElem_FmExternalActionsOccurrence, bool) error
	XsdGoPkgHasElem_FmFaultTypeDecomposition               func(*XsdGoPkgHasElem_FmFaultTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmCategoryRefs                         func(*XsdGoPkgHasElem_FmCategoryRefs, bool) error
	TxsdFormulaCaption                                     func(*TxsdFormulaCaption, bool) error
	XsdGoPkgHasElem_FmSymbolSpec                           func(*XsdGoPkgHasElem_FmSymbolSpec, bool) error
	TxsdFmPartList                                         func(*TxsdFmPartList, bool) error
	TxsdFmTestEquipmentRefs                                func(*TxsdFmTestEquipmentRefs, bool) error
	TxsdFmResponsibleName                                  func(*TxsdFmResponsibleName, bool) error
	XsdGoPkgHasElem_FmResponsibleName                      func(*XsdGoPkgHasElem_FmResponsibleName, bool) error
	XsdGoPkgHasElem_MsrQueryP1                             func(*XsdGoPkgHasElem_MsrQueryP1, bool) error
	XsdGoPkgHasElems_SwUserAccessCases                     func(*XsdGoPkgHasElems_SwUserAccessCases, bool) error
	XsdGoPkgHasElems_Misc                                  func(*XsdGoPkgHasElems_Misc, bool) error
	XsdGoPkgHasElem_Zip                                    func(*XsdGoPkgHasElem_Zip, bool) error
	XsdGoPkgHasElems_FmDrbfmSheet                          func(*XsdGoPkgHasElems_FmDrbfmSheet, bool) error
	TxsdSwUserAccessCases                                  func(*TxsdSwUserAccessCases, bool) error
	TxsdFormatterCtrl                                      func(*TxsdFormatterCtrl, bool) error
	XsdGoPkgHasElem_SystemUserGroup                        func(*XsdGoPkgHasElem_SystemUserGroup, bool) error
	XsdGoPkgHasElems_Company                               func(*XsdGoPkgHasElems_Company, bool) error
	TxsdFmPrerequisites                                    func(*TxsdFmPrerequisites, bool) error
	XsdGoPkgHasElems_FmCharacteristicType                  func(*XsdGoPkgHasElems_FmCharacteristicType, bool) error
	TxsdFmProject                                          func(*TxsdFmProject, bool) error
	TxsdFmPaletteRowRef                                    func(*TxsdFmPaletteRowRef, bool) error
	XsdGoPkgHasElems_SwUserAccessCase                      func(*XsdGoPkgHasElems_SwUserAccessCase, bool) error
	TxsdFmActionTypeDecomposition                          func(*TxsdFmActionTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmPaletteEntry                         func(*XsdGoPkgHasElem_FmPaletteEntry, bool) error
	XsdGoPkgHasElem_FmVariantMiscDatas                     func(*XsdGoPkgHasElem_FmVariantMiscDatas, bool) error
	XsdGoPkgHasElem_FmUserRightSpec                        func(*XsdGoPkgHasElem_FmUserRightSpec, bool) error
	XsdGoPkgHasElems_FmStructureRoot                       func(*XsdGoPkgHasElems_FmStructureRoot, bool) error
	XsdGoPkgHasElem_Xref                                   func(*XsdGoPkgHasElem_Xref, bool) error
	XsdGoPkgHasElems_FmActionRef                           func(*XsdGoPkgHasElems_FmActionRef, bool) error
	XsdGoPkgHasElems_FmCollections                         func(*XsdGoPkgHasElems_FmCollections, bool) error
	XsdGoPkgHasElem_E                                      func(*XsdGoPkgHasElem_E, bool) error
	XsdGoPkgHasElems_Tt                                    func(*XsdGoPkgHasElems_Tt, bool) error
	TxsdFmMachineRef                                       func(*TxsdFmMachineRef, bool) error
	XsdGoPkgHasElems_SwUserAccessCaseRef                   func(*XsdGoPkgHasElems_SwUserAccessCaseRef, bool) error
	XsdGoPkgHasElem_SynReturnValue                         func(*XsdGoPkgHasElem_SynReturnValue, bool) error
	XsdGoPkgHasElems_FmTaskSets                            func(*XsdGoPkgHasElems_FmTaskSets, bool) error
	XsdGoPkgHasElem_NotificationState                      func(*XsdGoPkgHasElem_NotificationState, bool) error
	XsdGoPkgHasElems_FmMachineRef                          func(*XsdGoPkgHasElems_FmMachineRef, bool) error
	TxsdTexMath                                            func(*TxsdTexMath, bool) error
	XsdGoPkgHasElem_MsrProcessingLog                       func(*XsdGoPkgHasElem_MsrProcessingLog, bool) error
	XsdGoPkgHasElems_Msrfmea                               func(*XsdGoPkgHasElems_Msrfmea, bool) error
	XsdGoPkgHasElem_FmStructureElementRefs                 func(*XsdGoPkgHasElem_FmStructureElementRefs, bool) error
	XsdGoPkgHasElems_E                                     func(*XsdGoPkgHasElems_E, bool) error
	XsdGoPkgHasElem_UsedLanguages                          func(*XsdGoPkgHasElem_UsedLanguages, bool) error
	XsdGoPkgHasElem_FmTestSampleRefs                       func(*XsdGoPkgHasElem_FmTestSampleRefs, bool) error
	XsdGoPkgHasElems_FmPdEntry                             func(*XsdGoPkgHasElems_FmPdEntry, bool) error
	XsdGoPkgHasElem_FmPaletteRowRef                        func(*XsdGoPkgHasElem_FmPaletteRowRef, bool) error
	XsdGoPkgHasElems_FmAction                              func(*XsdGoPkgHasElems_FmAction, bool) error
	TxsdFmVariantRef                                       func(*TxsdFmVariantRef, bool) error
	XsdGoPkgHasElem_FmStructureElements                    func(*XsdGoPkgHasElem_FmStructureElements, bool) error
	XsdGoPkgHasElem_FmTestEquipments                       func(*XsdGoPkgHasElem_FmTestEquipments, bool) error
	XsdGoPkgHasElem_MsrQueryResultChapter                  func(*XsdGoPkgHasElem_MsrQueryResultChapter, bool) error
	XsdGoPkgHasElems_CompanyDocInfos                       func(*XsdGoPkgHasElems_CompanyDocInfos, bool) error
	XsdGoPkgHasElems_FmAssessmentMilList                   func(*XsdGoPkgHasElems_FmAssessmentMilList, bool) error
	XsdGoPkgHasElem_FmCharacteristic                       func(*XsdGoPkgHasElem_FmCharacteristic, bool) error
	XsdGoPkgHasElem_Topic2                                 func(*XsdGoPkgHasElem_Topic2, bool) error
	XsdGoPkgHasElem_FmClassification                       func(*XsdGoPkgHasElem_FmClassification, bool) error
	XsdGoPkgHasElem_MatchingDcis                           func(*XsdGoPkgHasElem_MatchingDcis, bool) error
	TxsdFmErrorResponseRefs                                func(*TxsdFmErrorResponseRefs, bool) error
	TxsdFmControlPlanParameters                            func(*TxsdFmControlPlanParameters, bool) error
	TxsdUrl                                                func(*TxsdUrl, bool) error
	TxsdSynCaption                                         func(*TxsdSynCaption, bool) error
	XsdGoPkgHasElems_FmUserdefinedAttribute                func(*XsdGoPkgHasElems_FmUserdefinedAttribute, bool) error
	XsdGoPkgHasElems_FmAccessDef                           func(*XsdGoPkgHasElems_FmAccessDef, bool) error
	XsdGoPkgHasElem_FmMeasureSequence                      func(*XsdGoPkgHasElem_FmMeasureSequence, bool) error
	XsdGoPkgHasElems_FmErrorDetectionRefs                  func(*XsdGoPkgHasElems_FmErrorDetectionRefs, bool) error
	TxsdList                                               func(*TxsdList, bool) error
	TxsdFmFunctions                                        func(*TxsdFmFunctions, bool) error
	TxsdMsrfmea                                            func(*TxsdMsrfmea, bool) error
	XsdGoPkgHasElems_Phone                                 func(*XsdGoPkgHasElems_Phone, bool) error
	TxsdNote                                               func(*TxsdNote, bool) error
	XsdGoPkgHasElems_MsrQueryName                          func(*XsdGoPkgHasElems_MsrQueryName, bool) error
	XsdGoPkgHasElems_FmDrbfmProjectContents                func(*XsdGoPkgHasElems_FmDrbfmProjectContents, bool) error
	XsdGoPkgHasElems_FmIdtable                             func(*XsdGoPkgHasElems_FmIdtable, bool) error
	XsdGoPkgHasElems_FmTestSampleRefs                      func(*XsdGoPkgHasElems_FmTestSampleRefs, bool) error
	XsdGoPkgHasElems_ShortLabel                            func(*XsdGoPkgHasElems_ShortLabel, bool) error
	TxsdE                                                  func(*TxsdE, bool) error
	TxsdFmNetConnection                                    func(*TxsdFmNetConnection, bool) error
	XsdGoPkgHasElem_FmCharacteristicTypeDecomposition      func(*XsdGoPkgHasElem_FmCharacteristicTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmActionType                           func(*XsdGoPkgHasElem_FmActionType, bool) error
	XsdGoPkgHasElems_Br                                    func(*XsdGoPkgHasElems_Br, bool) error
	XsdGoPkgHasElems_Xdoc                                  func(*XsdGoPkgHasElems_Xdoc, bool) error
	XsdGoPkgHasElems_P                                     func(*XsdGoPkgHasElems_P, bool) error
	XsdGoPkgHasElem_FmInterface                            func(*XsdGoPkgHasElem_FmInterface, bool) error
	TxsdFmFormSheetPresentationVersions                    func(*TxsdFmFormSheetPresentationVersions, bool) error
	XsdGoPkgHasElem_FmPdEntry                              func(*XsdGoPkgHasElem_FmPdEntry, bool) error
	XsdGoPkgHasElem_FmStructureElement                     func(*XsdGoPkgHasElem_FmStructureElement, bool) error
	XsdGoPkgHasElems_FmVariantRefs                         func(*XsdGoPkgHasElems_FmVariantRefs, bool) error
	XsdGoPkgHasElem_L4                                     func(*XsdGoPkgHasElem_L4, bool) error
	XsdGoPkgHasElem_Abs                                    func(*XsdGoPkgHasElem_Abs, bool) error
	XsdGoPkgHasElems_FmFormSheet                           func(*XsdGoPkgHasElems_FmFormSheet, bool) error
	TxsdFmVariantMiscData                                  func(*TxsdFmVariantMiscData, bool) error
	TxsdFigureRef                                          func(*TxsdFigureRef, bool) error
	XsdGoPkgHasElem_PrivateCodes                           func(*XsdGoPkgHasElem_PrivateCodes, bool) error
	XsdGoPkgHasElem_FmDrbfmExcludedFailures                func(*XsdGoPkgHasElem_FmDrbfmExcludedFailures, bool) error
	XsdGoPkgHasElems_FmUserGroupRefs                       func(*XsdGoPkgHasElems_FmUserGroupRefs, bool) error
	TxsdMsrQueryText                                       func(*TxsdMsrQueryText, bool) error
	TxsdIntroduction                                       func(*TxsdIntroduction, bool) error
	XsdGoPkgHasElems_TeamMembers                           func(*XsdGoPkgHasElems_TeamMembers, bool) error
	TxsdCompanyDocInfos                                    func(*TxsdCompanyDocInfos, bool) error
	XsdGoPkgHasElems_Role                                  func(*XsdGoPkgHasElems_Role, bool) error
	TxsdSynObjects                                         func(*TxsdSynObjects, bool) error
	XsdGoPkgHasElems_FmErrorResponss                       func(*XsdGoPkgHasElems_FmErrorResponss, bool) error
	TxsdSpanspec                                           func(*TxsdSpanspec, bool) error
	XsdGoPkgHasElems_FmVariant                             func(*XsdGoPkgHasElems_FmVariant, bool) error
	TxsdFmPaletteRows                                      func(*TxsdFmPaletteRows, bool) error
	XsdGoPkgHasElem_FmPalette                              func(*XsdGoPkgHasElem_FmPalette, bool) error
	XsdGoPkgHasElems_FmPdRow                               func(*XsdGoPkgHasElems_FmPdRow, bool) error
	XsdGoPkgHasElem_FmSymbolicDates                        func(*XsdGoPkgHasElem_FmSymbolicDates, bool) error
	TxsdFmFtaParameters                                    func(*TxsdFmFtaParameters, bool) error
	TxsdMatchingDcis                                       func(*TxsdMatchingDcis, bool) error
	XsdGoPkgHasElem_Graphic                                func(*XsdGoPkgHasElem_Graphic, bool) error
	XsdGoPkgHasElem_TexMath                                func(*XsdGoPkgHasElem_TexMath, bool) error
	XsdGoPkgHasElem_FmMachine                              func(*XsdGoPkgHasElem_FmMachine, bool) error
	XsdGoPkgHasElem_Tt                                     func(*XsdGoPkgHasElem_Tt, bool) error
	XsdGoPkgHasElems_List                                  func(*XsdGoPkgHasElems_List, bool) error
	XsdGoPkgHasElem_FmFaultType                            func(*XsdGoPkgHasElem_FmFaultType, bool) error
	XsdGoPkgHasElems_FmFaults                              func(*XsdGoPkgHasElems_FmFaults, bool) error
	TxsdFmCollectionRef                                    func(*TxsdFmCollectionRef, bool) error
	TxsdFmUserdefinedAttributes                            func(*TxsdFmUserdefinedAttributes, bool) error
	XsdGoPkgHasElem_FmTaskSets                             func(*XsdGoPkgHasElem_FmTaskSets, bool) error
	XsdGoPkgHasElems_Unit                                  func(*XsdGoPkgHasElems_Unit, bool) error
	TxsdAnnotationText                                     func(*TxsdAnnotationText, bool) error
	TxsdFmTeam                                             func(*TxsdFmTeam, bool) error
	XsdGoPkgHasElem_FmPrerequisites                        func(*XsdGoPkgHasElem_FmPrerequisites, bool) error
	XsdGoPkgHasElem_FmProjectOwner                         func(*XsdGoPkgHasElem_FmProjectOwner, bool) error
	XsdGoPkgHasElem_FmOperatingConditionRef                func(*XsdGoPkgHasElem_FmOperatingConditionRef, bool) error
	TxsdNmlist                                             func(*TxsdNmlist, bool) error
	TxsdFmFormSheetPresentationVersion                     func(*TxsdFmFormSheetPresentationVersion, bool) error
	XsdGoPkgHasElem_FmActionTypeRef                        func(*XsdGoPkgHasElem_FmActionTypeRef, bool) error
	XsdGoPkgHasElem_LabeledItem                            func(*XsdGoPkgHasElem_LabeledItem, bool) error
	TxsdL10                                                func(*TxsdL10, bool) error
	XsdGoPkgHasElems_Modification                          func(*XsdGoPkgHasElems_Modification, bool) error
	XsdGoPkgHasElem_FmFormHeader                           func(*XsdGoPkgHasElem_FmFormHeader, bool) error
	TxsdFmAssessmentCatalogs                               func(*TxsdFmAssessmentCatalogs, bool) error
	XsdGoPkgHasElem_Std                                    func(*XsdGoPkgHasElem_Std, bool) error
	TxsdFmOperatingConditionType                           func(*TxsdFmOperatingConditionType, bool) error
	XsdGoPkgHasElem_FmCollectionRef                        func(*XsdGoPkgHasElem_FmCollectionRef, bool) error
	XsdGoPkgHasElem_FmControlPlanParameters                func(*XsdGoPkgHasElem_FmControlPlanParameters, bool) error
	XsdGoPkgHasElems_Comment                               func(*XsdGoPkgHasElems_Comment, bool) error
	XsdGoPkgHasElems_Abs                                   func(*XsdGoPkgHasElems_Abs, bool) error
	XsdGoPkgHasElem_FmDrbfmProjectContents                 func(*XsdGoPkgHasElem_FmDrbfmProjectContents, bool) error
	XsdGoPkgHasElems_FmPdLine                              func(*XsdGoPkgHasElems_FmPdLine, bool) error
	TxsdMsrQueryP2                                         func(*TxsdMsrQueryP2, bool) error
	XsdGoPkgHasElems_FmFunctionType                        func(*XsdGoPkgHasElems_FmFunctionType, bool) error
	XsdGoPkgHasElem_Number                                 func(*XsdGoPkgHasElem_Number, bool) error
	XsdGoPkgHasElems_FormatterCtrl                         func(*XsdGoPkgHasElems_FormatterCtrl, bool) error
	TxsdSynFormats                                         func(*TxsdSynFormats, bool) error
	XsdGoPkgHasElems_FmFunctionTypeDecomposition           func(*XsdGoPkgHasElems_FmFunctionTypeDecomposition, bool) error
	XsdGoPkgHasElems_FmMeasureSequences                    func(*XsdGoPkgHasElems_FmMeasureSequences, bool) error
	XsdGoPkgHasElem_FormatterCtrls                         func(*XsdGoPkgHasElem_FormatterCtrls, bool) error
	XsdGoPkgHasElems_CCode                                 func(*XsdGoPkgHasElems_CCode, bool) error
	XsdGoPkgHasElem_Modification                           func(*XsdGoPkgHasElem_Modification, bool) error
	XsdGoPkgHasElem_MsrQueryText                           func(*XsdGoPkgHasElem_MsrQueryText, bool) error
	XsdGoPkgHasElems_FmErrorDetectionRef                   func(*XsdGoPkgHasElems_FmErrorDetectionRef, bool) error
	XsdGoPkgHasElem_FmCharacteristicTypeRef                func(*XsdGoPkgHasElem_FmCharacteristicTypeRef, bool) error
	TxsdFmFunction                                         func(*TxsdFmFunction, bool) error
	XsdGoPkgHasElems_FmUserAccessDefinitions               func(*XsdGoPkgHasElems_FmUserAccessDefinitions, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationRefs               func(*XsdGoPkgHasElems_FmDrbfmModificationRefs, bool) error
	XsdGoPkgHasElems_Typ                                   func(*XsdGoPkgHasElems_Typ, bool) error
	TxsdFmCollectionRefs                                   func(*TxsdFmCollectionRefs, bool) error
	TxsdSystemUserGroups                                   func(*TxsdSystemUserGroups, bool) error
	XsdGoPkgHasElems_FmTestEquipmentRefs                   func(*XsdGoPkgHasElems_FmTestEquipmentRefs, bool) error
	XsdGoPkgHasElems_SynSeeAlso                            func(*XsdGoPkgHasElems_SynSeeAlso, bool) error
	TxsdFmFaultRefs                                        func(*TxsdFmFaultRefs, bool) error
	XsdGoPkgHasElem_Locs                                   func(*XsdGoPkgHasElem_Locs, bool) error
	XsdGoPkgHasElems_FmOperatingConditions                 func(*XsdGoPkgHasElems_FmOperatingConditions, bool) error
	TxsdFmControlPlan                                      func(*TxsdFmControlPlan, bool) error
	TxsdFmTestSample                                       func(*TxsdFmTestSample, bool) error
	XsdGoPkgHasElem_Modifications                          func(*XsdGoPkgHasElem_Modifications, bool) error
	XsdGoPkgHasElem_MiscValue                              func(*XsdGoPkgHasElem_MiscValue, bool) error
	XsdGoPkgHasElem_Typ                                    func(*XsdGoPkgHasElem_Typ, bool) error
	XsdGoPkgHasElem_Max                                    func(*XsdGoPkgHasElem_Max, bool) error
	XsdGoPkgHasElems_FmInterface                           func(*XsdGoPkgHasElems_FmInterface, bool) error
	XsdGoPkgHasElems_FmProjectOwner                        func(*XsdGoPkgHasElems_FmProjectOwner, bool) error
	XsdGoPkgHasElem_Item                                   func(*XsdGoPkgHasElem_Item, bool) error
	XsdGoPkgHasElems_MsrProcessingLog                      func(*XsdGoPkgHasElems_MsrProcessingLog, bool) error
	XsdGoPkgHasElem_ShortName                              func(*XsdGoPkgHasElem_ShortName, bool) error
	TxsdUserCoverSheet                                     func(*TxsdUserCoverSheet, bool) error
	XsdGoPkgHasElems_FmAssessmentEntry                     func(*XsdGoPkgHasElems_FmAssessmentEntry, bool) error
	TxsdFmDrbfmModificationType                            func(*TxsdFmDrbfmModificationType, bool) error
	XsdGoPkgHasElem_SpecialData                            func(*XsdGoPkgHasElem_SpecialData, bool) error
	TxsdFmRsmParameters                                    func(*TxsdFmRsmParameters, bool) error
	XsdGoPkgHasElem_FigureRef                              func(*XsdGoPkgHasElem_FigureRef, bool) error
	XsdGoPkgHasElems_FmCharacteristicTypeDecomposition     func(*XsdGoPkgHasElems_FmCharacteristicTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmAssessmentOccurrenceList             func(*XsdGoPkgHasElem_FmAssessmentOccurrenceList, bool) error
	XsdGoPkgHasElem_FmFaults                               func(*XsdGoPkgHasElem_FmFaults, bool) error
	XsdGoPkgHasElems_FmUserdefinedAttributeRefs            func(*XsdGoPkgHasElems_FmUserdefinedAttributeRefs, bool) error
	TxsdFmTeams                                            func(*TxsdFmTeams, bool) error
	XsdGoPkgHasElem_SynFormats                             func(*XsdGoPkgHasElem_SynFormats, bool) error
	XsdGoPkgHasElem_L5                                     func(*XsdGoPkgHasElem_L5, bool) error
	XsdGoPkgHasElems_UserCoverSheets                       func(*XsdGoPkgHasElems_UserCoverSheets, bool) error
	XsdGoPkgHasElem_Comment                                func(*XsdGoPkgHasElem_Comment, bool) error
	TxsdFmTaskSet                                          func(*TxsdFmTaskSet, bool) error
	XsdGoPkgHasElems_FmPartListEntry                       func(*XsdGoPkgHasElems_FmPartListEntry, bool) error
	XsdGoPkgHasElems_MsrQueryChapter                       func(*XsdGoPkgHasElems_MsrQueryChapter, bool) error
	XsdGoPkgHasElems_FmStructureElement                    func(*XsdGoPkgHasElems_FmStructureElement, bool) error
	XsdGoPkgHasElem_Nameloc                                func(*XsdGoPkgHasElem_Nameloc, bool) error
	TxsdFmCollection                                       func(*TxsdFmCollection, bool) error
	XsdGoPkgHasElems_SystemUsers                           func(*XsdGoPkgHasElems_SystemUsers, bool) error
	XsdGoPkgHasElem_Tgroup                                 func(*XsdGoPkgHasElem_Tgroup, bool) error
	XsdGoPkgHasElems_FmXref                                func(*XsdGoPkgHasElems_FmXref, bool) error
	XsdGoPkgHasElems_FmCharacteristic                      func(*XsdGoPkgHasElems_FmCharacteristic, bool) error
	TxsdFmTaskSchedule                                     func(*TxsdFmTaskSchedule, bool) error
	XsdGoPkgHasElem_DefItem                                func(*XsdGoPkgHasElem_DefItem, bool) error
	TxsdDocRevisions                                       func(*TxsdDocRevisions, bool) error
	TxsdFmAssessmentEntry                                  func(*TxsdFmAssessmentEntry, bool) error
	XsdGoPkgHasElem_FmMeasureSequenceRef                   func(*XsdGoPkgHasElem_FmMeasureSequenceRef, bool) error
	XsdGoPkgHasElem_Date                                   func(*XsdGoPkgHasElem_Date, bool) error
	TxsdFmTestSamples                                      func(*TxsdFmTestSamples, bool) error
	XsdGoPkgHasElems_FormatterCtrls                        func(*XsdGoPkgHasElems_FormatterCtrls, bool) error
	XsdGoPkgHasElem_Visible                                func(*XsdGoPkgHasElem_Visible, bool) error
	XsdGoPkgHasElems_Label                                 func(*XsdGoPkgHasElems_Label, bool) error
	XsdGoPkgHasElem_FmFunctionType                         func(*XsdGoPkgHasElem_FmFunctionType, bool) error
	XsdGoPkgHasElem_FmProject                              func(*XsdGoPkgHasElem_FmProject, bool) error
	XsdGoPkgHasElems_Text                                  func(*XsdGoPkgHasElems_Text, bool) error
	TxsdIe                                                 func(*TxsdIe, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationTypeRef             func(*XsdGoPkgHasElem_FmDrbfmModificationTypeRef, bool) error
	XsdGoPkgHasElem_FmIdPrefix                             func(*XsdGoPkgHasElem_FmIdPrefix, bool) error
	XsdGoPkgHasElem_FmSymbolicDateRef                      func(*XsdGoPkgHasElem_FmSymbolicDateRef, bool) error
	TxsdCompanyRef                                         func(*TxsdCompanyRef, bool) error
	XsdGoPkgHasElem_FmPaletteColumnRef                     func(*XsdGoPkgHasElem_FmPaletteColumnRef, bool) error
	TxsdFmDrbfmModifications                               func(*TxsdFmDrbfmModifications, bool) error
	XsdGoPkgHasElems_FmFunctionTypes                       func(*XsdGoPkgHasElems_FmFunctionTypes, bool) error
	XsdGoPkgHasElem_FmDrbfmReason                          func(*XsdGoPkgHasElem_FmDrbfmReason, bool) error
	XsdGoPkgHasElem_FmErrorResponseRefs                    func(*XsdGoPkgHasElem_FmErrorResponseRefs, bool) error
	XsdGoPkgHasElems_FmFaultTypes                          func(*XsdGoPkgHasElems_FmFaultTypes, bool) error
	TxsdSdg                                                func(*TxsdSdg, bool) error
	TxsdRevisionLabel                                      func(*TxsdRevisionLabel, bool) error
	XsdGoPkgHasElems_MatchingDci                           func(*XsdGoPkgHasElems_MatchingDci, bool) error
	XsdGoPkgHasElems_FmPaletteColumn                       func(*XsdGoPkgHasElems_FmPaletteColumn, bool) error
	TxsdFt                                                 func(*TxsdFt, bool) error
	TxsdFmFunctionType                                     func(*TxsdFmFunctionType, bool) error
	XsdGoPkgHasElem_State                                  func(*XsdGoPkgHasElem_State, bool) error
	TxsdFmCharacteristics                                  func(*TxsdFmCharacteristics, bool) error
	TxsdFmAnalysisdesktopParameters                        func(*TxsdFmAnalysisdesktopParameters, bool) error
	TxsdFmDrbfmSheet                                       func(*TxsdFmDrbfmSheet, bool) error
	XsdGoPkgHasElems_Xref                                  func(*XsdGoPkgHasElems_Xref, bool) error
	XsdGoPkgHasElem_MsrQueryName                           func(*XsdGoPkgHasElem_MsrQueryName, bool) error
	XsdGoPkgHasElem_FmTestEquipmentRefs                    func(*XsdGoPkgHasElem_FmTestEquipmentRefs, bool) error
	XsdGoPkgHasElems_FmHistoryStates                       func(*XsdGoPkgHasElems_FmHistoryStates, bool) error
	TxsdFmVersionInfo                                      func(*TxsdFmVersionInfo, bool) error
	TxsdTableCaption                                       func(*TxsdTableCaption, bool) error
	XsdGoPkgHasElem_FmTestSampleRef                        func(*XsdGoPkgHasElem_FmTestSampleRef, bool) error
	XsdGoPkgHasElems_FmRsmParameters                       func(*XsdGoPkgHasElems_FmRsmParameters, bool) error
	XsdGoPkgHasElems_PartNumber                            func(*XsdGoPkgHasElems_PartNumber, bool) error
	XsdGoPkgHasElem_Remark                                 func(*XsdGoPkgHasElem_Remark, bool) error
	XsdGoPkgHasElems_Nameloc                               func(*XsdGoPkgHasElems_Nameloc, bool) error
	XsdGoPkgHasElem_FmSymbols                              func(*XsdGoPkgHasElem_FmSymbols, bool) error
	XsdGoPkgHasElem_SynObjects                             func(*XsdGoPkgHasElem_SynObjects, bool) error
	XsdGoPkgHasElem_FmFaultTypes                           func(*XsdGoPkgHasElem_FmFaultTypes, bool) error
	XsdGoPkgHasElems_FmSymbols                             func(*XsdGoPkgHasElems_FmSymbols, bool) error
	XsdGoPkgHasElems_FmVariants                            func(*XsdGoPkgHasElems_FmVariants, bool) error
	XsdGoPkgHasElem_Ie                                     func(*XsdGoPkgHasElem_Ie, bool) error
	XsdGoPkgHasElem_FmAssessmentCatalogs                   func(*XsdGoPkgHasElem_FmAssessmentCatalogs, bool) error
	TxsdFmSymbolSpec                                       func(*TxsdFmSymbolSpec, bool) error
	XsdGoPkgHasElems_Fax                                   func(*XsdGoPkgHasElems_Fax, bool) error
	XsdGoPkgHasElem_MatchingDci                            func(*XsdGoPkgHasElem_MatchingDci, bool) error
	XsdGoPkgHasElems_Min                                   func(*XsdGoPkgHasElems_Min, bool) error
	XsdGoPkgHasElems_Sd                                    func(*XsdGoPkgHasElems_Sd, bool) error
	XsdGoPkgHasElem_FmOrphanHome                           func(*XsdGoPkgHasElem_FmOrphanHome, bool) error
	TxsdTfoot                                              func(*TxsdTfoot, bool) error
	XsdGoPkgHasElems_Date1                                 func(*XsdGoPkgHasElems_Date1, bool) error
	XsdGoPkgHasElem_FmMeasureSequences                     func(*XsdGoPkgHasElem_FmMeasureSequences, bool) error
	XsdGoPkgHasElems_FmTaskSchedule                        func(*XsdGoPkgHasElems_FmTaskSchedule, bool) error
	XsdGoPkgHasElem_FmTeam                                 func(*XsdGoPkgHasElem_FmTeam, bool) error
	XsdGoPkgHasElems_Annotation                            func(*XsdGoPkgHasElems_Annotation, bool) error
	TxsdFmClassification                                   func(*TxsdFmClassification, bool) error
	TxsdMsrQueryTopic2                                     func(*TxsdMsrQueryTopic2, bool) error
	TxsdFmProjects                                         func(*TxsdFmProjects, bool) error
	XsdGoPkgHasElems_Notation                              func(*XsdGoPkgHasElems_Notation, bool) error
	XsdGoPkgHasElem_MsrQueryProps                          func(*XsdGoPkgHasElem_MsrQueryProps, bool) error
	TxsdTable                                              func(*TxsdTable, bool) error
	TxsdFmFtaNodes                                         func(*TxsdFmFtaNodes, bool) error
	XsdGoPkgHasElems_FmProcessDiagrams                     func(*XsdGoPkgHasElems_FmProcessDiagrams, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationTypes               func(*XsdGoPkgHasElem_FmDrbfmModificationTypes, bool) error
	XsdGoPkgHasElem_SynExample                             func(*XsdGoPkgHasElem_SynExample, bool) error
	XsdGoPkgHasElems_FmDrbfmSheets                         func(*XsdGoPkgHasElems_FmDrbfmSheets, bool) error
	TxsdFmProcessDiagram                                   func(*TxsdFmProcessDiagram, bool) error
	TxsdEntry                                              func(*TxsdEntry, bool) error
	TxsdFmCollections                                      func(*TxsdFmCollections, bool) error
	XsdGoPkgHasElems_FmSymbolicDateRef                     func(*XsdGoPkgHasElems_FmSymbolicDateRef, bool) error
	XsdGoPkgHasElem_FmUserdefinedAttributeRefs             func(*XsdGoPkgHasElem_FmUserdefinedAttributeRefs, bool) error
	XsdGoPkgHasElem_Map                                    func(*XsdGoPkgHasElem_Map, bool) error
	XsdGoPkgHasElems_Prm                                   func(*XsdGoPkgHasElems_Prm, bool) error
	TxsdInput                                              func(*TxsdInput, bool) error
	XsdGoPkgHasElems_TableCaption                          func(*XsdGoPkgHasElems_TableCaption, bool) error
	XsdGoPkgHasElems_FmAssessmentOccurrenceList            func(*XsdGoPkgHasElems_FmAssessmentOccurrenceList, bool) error
	XsdGoPkgHasElem_MsrQueryResultText                     func(*XsdGoPkgHasElem_MsrQueryResultText, bool) error
	XsdGoPkgHasElem_IssuedBy                               func(*XsdGoPkgHasElem_IssuedBy, bool) error
	XsdGoPkgHasElems_FmPaletteRow                          func(*XsdGoPkgHasElems_FmPaletteRow, bool) error
	XsdGoPkgHasElem_Company                                func(*XsdGoPkgHasElem_Company, bool) error
	XsdGoPkgHasElems_Sub                                   func(*XsdGoPkgHasElems_Sub, bool) error
	XsdGoPkgHasElem_Homepage                               func(*XsdGoPkgHasElem_Homepage, bool) error
	XsdGoPkgHasElem_FmModuleRef                            func(*XsdGoPkgHasElem_FmModuleRef, bool) error
	XsdGoPkgHasElems_FmOverlayImage                        func(*XsdGoPkgHasElems_FmOverlayImage, bool) error
	XsdGoPkgHasElems_FmSymbolicDate                        func(*XsdGoPkgHasElems_FmSymbolicDate, bool) error
	XsdGoPkgHasElem_FmFaultRef                             func(*XsdGoPkgHasElem_FmFaultRef, bool) error
	TxsdFmFormSheetPresentation                            func(*TxsdFmFormSheetPresentation, bool) error
	XsdGoPkgHasElem_FmOperatingConditions                  func(*XsdGoPkgHasElem_FmOperatingConditions, bool) error
	XsdGoPkgHasElems_Companies                             func(*XsdGoPkgHasElems_Companies, bool) error
	XsdGoPkgHasElems_Subtitle                              func(*XsdGoPkgHasElems_Subtitle, bool) error
	XsdGoPkgHasElems_FmDrbfmParameters                     func(*XsdGoPkgHasElems_FmDrbfmParameters, bool) error
	TxsdFmSymbolicDate                                     func(*TxsdFmSymbolicDate, bool) error
	XsdGoPkgHasElems_FmCollectionRef                       func(*XsdGoPkgHasElems_FmCollectionRef, bool) error
	XsdGoPkgHasElem_LongName                               func(*XsdGoPkgHasElem_LongName, bool) error
	TxsdMsrQueryResultTopic1                               func(*TxsdMsrQueryResultTopic1, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationNote                func(*XsdGoPkgHasElem_FmDrbfmModificationNote, bool) error
	XsdGoPkgHasElems_ToolVersion                           func(*XsdGoPkgHasElems_ToolVersion, bool) error
	XsdGoPkgHasElem_FmCharacteristics                      func(*XsdGoPkgHasElem_FmCharacteristics, bool) error
	TxsdFmFormSheet                                        func(*TxsdFmFormSheet, bool) error
	XsdGoPkgHasElems_FmSymbolSpec                          func(*XsdGoPkgHasElems_FmSymbolSpec, bool) error
	XsdGoPkgHasElems_SynObjects                            func(*XsdGoPkgHasElems_SynObjects, bool) error
	XsdGoPkgHasElem_FmNetConnections                       func(*XsdGoPkgHasElem_FmNetConnections, bool) error
	XsdGoPkgHasElems_MsrQueryP1                            func(*XsdGoPkgHasElems_MsrQueryP1, bool) error
	XsdGoPkgHasElem_State1                                 func(*XsdGoPkgHasElem_State1, bool) error
	XsdGoPkgHasElems_Verbatim                              func(*XsdGoPkgHasElems_Verbatim, bool) error
	XsdGoPkgHasElem_FmMachineRefs                          func(*XsdGoPkgHasElem_FmMachineRefs, bool) error
	XsdGoPkgHasElem_Thead                                  func(*XsdGoPkgHasElem_Thead, bool) error
	XsdGoPkgHasElem_Text                                   func(*XsdGoPkgHasElem_Text, bool) error
	XsdGoPkgHasElems_FmPaletteEntry                        func(*XsdGoPkgHasElems_FmPaletteEntry, bool) error
	XsdGoPkgHasElem_SwUserAccessCases                      func(*XsdGoPkgHasElem_SwUserAccessCases, bool) error
	XsdGoPkgHasElem_MsrQueryChapter                        func(*XsdGoPkgHasElem_MsrQueryChapter, bool) error
	XsdGoPkgHasElems_Ie                                    func(*XsdGoPkgHasElems_Ie, bool) error
	TxsdFmUserdefinedAttributeRefs                         func(*TxsdFmUserdefinedAttributeRefs, bool) error
	XsdGoPkgHasElem_FmFaultTypeRef                         func(*XsdGoPkgHasElem_FmFaultTypeRef, bool) error
	XsdGoPkgHasElem_IndentSample                           func(*XsdGoPkgHasElem_IndentSample, bool) error
	XsdGoPkgHasElem_RiskPriorityFactor                     func(*XsdGoPkgHasElem_RiskPriorityFactor, bool) error
	XsdGoPkgHasElem_FmFormSheet                            func(*XsdGoPkgHasElem_FmFormSheet, bool) error
	XsdGoPkgHasElem_P                                      func(*XsdGoPkgHasElem_P, bool) error
	XsdGoPkgHasElem_FmErrorResponseRef                     func(*XsdGoPkgHasElem_FmErrorResponseRef, bool) error
	XsdGoPkgHasElems_DefItem                               func(*XsdGoPkgHasElems_DefItem, bool) error
	XsdGoPkgHasElems_MsrQueryResultTopic2                  func(*XsdGoPkgHasElems_MsrQueryResultTopic2, bool) error
	XsdGoPkgHasElems_Nmlist                                func(*XsdGoPkgHasElems_Nmlist, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationTypeRef            func(*XsdGoPkgHasElems_FmDrbfmModificationTypeRef, bool) error
	XsdGoPkgHasElem_DocRevisions                           func(*XsdGoPkgHasElem_DocRevisions, bool) error
	XsdGoPkgHasElem_Verbatim                               func(*XsdGoPkgHasElem_Verbatim, bool) error
	TxsdFmCharacteristicTypeDecomposition                  func(*TxsdFmCharacteristicTypeDecomposition, bool) error
	XsdGoPkgHasElem_FmHistoryStates                        func(*XsdGoPkgHasElem_FmHistoryStates, bool) error
	XsdGoPkgHasElem_FmTaskHistory                          func(*XsdGoPkgHasElem_FmTaskHistory, bool) error
	TxsdFmErrorDetectionRefs                               func(*TxsdFmErrorDetectionRefs, bool) error
	XsdGoPkgHasElems_FmHead                                func(*XsdGoPkgHasElems_FmHead, bool) error
	XsdGoPkgHasElems_NotificationState                     func(*XsdGoPkgHasElems_NotificationState, bool) error
	TxsdFmCollectionConts                                  func(*TxsdFmCollectionConts, bool) error
	TxsdMin                                                func(*TxsdMin, bool) error
	TxsdFmActionRef                                        func(*TxsdFmActionRef, bool) error
	XsdGoPkgHasElems_Graphic                               func(*XsdGoPkgHasElems_Graphic, bool) error
	XsdGoPkgHasElems_Homepage                              func(*XsdGoPkgHasElems_Homepage, bool) error
	XsdGoPkgHasElems_Position                              func(*XsdGoPkgHasElems_Position, bool) error
	XsdGoPkgHasElem_FormulaCaption                         func(*XsdGoPkgHasElem_FormulaCaption, bool) error
	XsdGoPkgHasElem_FmVariants                             func(*XsdGoPkgHasElem_FmVariants, bool) error
	XsdGoPkgHasElem_SwUserAccessCaseRef                    func(*XsdGoPkgHasElem_SwUserAccessCaseRef, bool) error
	XsdGoPkgHasElem_MsrQueryResultP1                       func(*XsdGoPkgHasElem_MsrQueryResultP1, bool) error
	XsdGoPkgHasElems_L2                                    func(*XsdGoPkgHasElems_L2, bool) error
	XsdGoPkgHasElem_Email                                  func(*XsdGoPkgHasElem_Email, bool) error
	TxsdFmMachineRefs                                      func(*TxsdFmMachineRefs, bool) error
	TxsdFmStructureElements                                func(*TxsdFmStructureElements, bool) error
	XsdGoPkgHasElems_MsrQueryTopic1                        func(*XsdGoPkgHasElems_MsrQueryTopic1, bool) error
	XsdGoPkgHasElems_DocLabel                              func(*XsdGoPkgHasElems_DocLabel, bool) error
	TxsdFmMachines                                         func(*TxsdFmMachines, bool) error
	XsdGoPkgHasElem_ItemLabel                              func(*XsdGoPkgHasElem_ItemLabel, bool) error
	XsdGoPkgHasElems_Tol                                   func(*XsdGoPkgHasElems_Tol, bool) error
	XsdGoPkgHasElems_Sup                                   func(*XsdGoPkgHasElems_Sup, bool) error
	TxsdXfile                                              func(*TxsdXfile, bool) error
	XsdGoPkgHasElem_EntityName                             func(*XsdGoPkgHasElem_EntityName, bool) error
	XsdGoPkgHasElem_FmCollection                           func(*XsdGoPkgHasElem_FmCollection, bool) error
	XsdGoPkgHasElem_FmAccessDef                            func(*XsdGoPkgHasElem_FmAccessDef, bool) error
	XsdGoPkgHasElem_TeamMembers                            func(*XsdGoPkgHasElem_TeamMembers, bool) error
	XsdGoPkgHasElems_FmOperatingConditionType              func(*XsdGoPkgHasElems_FmOperatingConditionType, bool) error
	XsdGoPkgHasElem_FmErrorResponss                        func(*XsdGoPkgHasElem_FmErrorResponss, bool) error
	XsdGoPkgHasElem_FmDrbfmSheets                          func(*XsdGoPkgHasElem_FmDrbfmSheets, bool) error
	XsdGoPkgHasElems_FmExternalAction                      func(*XsdGoPkgHasElems_FmExternalAction, bool) error
	TxsdTgroup                                             func(*TxsdTgroup, bool) error
	TxsdMsrQueryP1                                         func(*TxsdMsrQueryP1, bool) error
	XsdGoPkgHasElems_L5                                    func(*XsdGoPkgHasElems_L5, bool) error
	XsdGoPkgHasElem_FmAssessmentSignificanceList           func(*XsdGoPkgHasElem_FmAssessmentSignificanceList, bool) error
	XsdGoPkgHasElems_FmTestSampleRef                       func(*XsdGoPkgHasElems_FmTestSampleRef, bool) error
	XsdGoPkgHasElems_FmControlPlan                         func(*XsdGoPkgHasElems_FmControlPlan, bool) error
	XsdGoPkgHasElem_FmFunctions                            func(*XsdGoPkgHasElem_FmFunctions, bool) error
	XsdGoPkgHasElems_FmTeams                               func(*XsdGoPkgHasElems_FmTeams, bool) error
	XsdGoPkgHasElems_LGraphic                              func(*XsdGoPkgHasElems_LGraphic, bool) error
	TxsdFmVariantRefs                                      func(*TxsdFmVariantRefs, bool) error
	XsdGoPkgHasElem_FmSignificance                         func(*XsdGoPkgHasElem_FmSignificance, bool) error
	XsdGoPkgHasElem_FmErrorDetections                      func(*XsdGoPkgHasElem_FmErrorDetections, bool) error
	TxsdMsrQueryChapter                                    func(*TxsdMsrQueryChapter, bool) error
	XsdGoPkgHasElems_FmExternalActionsDetect               func(*XsdGoPkgHasElems_FmExternalActionsDetect, bool) error
	XsdGoPkgHasElems_FmSeDecomposition                     func(*XsdGoPkgHasElems_FmSeDecomposition, bool) error
	XsdGoPkgHasElem_Note                                   func(*XsdGoPkgHasElem_Note, bool) error
	XsdGoPkgHasElem_Change                                 func(*XsdGoPkgHasElem_Change, bool) error
	TxsdPrmChar                                            func(*TxsdPrmChar, bool) error
	TxsdFmProcessDiagrams                                  func(*TxsdFmProcessDiagrams, bool) error
	XsdGoPkgHasElem_FmCauses                               func(*XsdGoPkgHasElem_FmCauses, bool) error
	XsdGoPkgHasElem_PrmChar                                func(*XsdGoPkgHasElem_PrmChar, bool) error
	XsdGoPkgHasElem_Spanspec                               func(*XsdGoPkgHasElem_Spanspec, bool) error
	XsdGoPkgHasElem_Idc                                    func(*XsdGoPkgHasElem_Idc, bool) error
	XsdGoPkgHasElems_MimeContainer                         func(*XsdGoPkgHasElems_MimeContainer, bool) error
	TxsdSd                                                 func(*TxsdSd, bool) error
	TxsdDocRevision                                        func(*TxsdDocRevision, bool) error
	TxsdMsrQueryResultP2                                   func(*TxsdMsrQueryResultP2, bool) error
	XsdGoPkgHasElem_FmHistoryState                         func(*XsdGoPkgHasElem_FmHistoryState, bool) error
	XsdGoPkgHasElems_GenericMath                           func(*XsdGoPkgHasElems_GenericMath, bool) error
	XsdGoPkgHasElems_FmIecParameters                       func(*XsdGoPkgHasElems_FmIecParameters, bool) error
	XsdGoPkgHasElem_AnnotationOrigin                       func(*XsdGoPkgHasElem_AnnotationOrigin, bool) error
	XsdGoPkgHasElems_FmFault                               func(*XsdGoPkgHasElems_FmFault, bool) error
	TxsdFmPaletteColumnRef                                 func(*TxsdFmPaletteColumnRef, bool) error
	TxsdFmPalette                                          func(*TxsdFmPalette, bool) error
	XsdGoPkgHasElems_FmPaletteColumnRef                    func(*XsdGoPkgHasElems_FmPaletteColumnRef, bool) error
	XsdGoPkgHasElem_Ft                                     func(*XsdGoPkgHasElem_Ft, bool) error
	XsdGoPkgHasElem_Sdg                                    func(*XsdGoPkgHasElem_Sdg, bool) error
	XsdGoPkgHasElem_XrefTarget                             func(*XsdGoPkgHasElem_XrefTarget, bool) error
	XsdGoPkgHasElems_PrmChar                               func(*XsdGoPkgHasElems_PrmChar, bool) error
	TxsdFmMachine                                          func(*TxsdFmMachine, bool) error
	XsdGoPkgHasElems_Email                                 func(*XsdGoPkgHasElems_Email, bool) error
	XsdGoPkgHasElems_FmClassification                      func(*XsdGoPkgHasElems_FmClassification, bool) error
	XsdGoPkgHasElems_FmProjects                            func(*XsdGoPkgHasElems_FmProjects, bool) error
	XsdGoPkgHasElems_RevisionLabelP1                       func(*XsdGoPkgHasElems_RevisionLabelP1, bool) error
	XsdGoPkgHasElem_SynArgument                            func(*XsdGoPkgHasElem_SynArgument, bool) error
	XsdGoPkgHasElem_LongName1                              func(*XsdGoPkgHasElem_LongName1, bool) error
	XsdGoPkgHasElem_FmDrbfmModificationNotes               func(*XsdGoPkgHasElem_FmDrbfmModificationNotes, bool) error
	XsdGoPkgHasElem_FmDrbfmProjects                        func(*XsdGoPkgHasElem_FmDrbfmProjects, bool) error
	TxsdPrms                                               func(*TxsdPrms, bool) error
	XsdGoPkgHasElem_Tfoot                                  func(*XsdGoPkgHasElem_Tfoot, bool) error
	XsdGoPkgHasElem_FmFtaNodes                             func(*XsdGoPkgHasElem_FmFtaNodes, bool) error
	XsdGoPkgHasElem_FmProcessDiagram                       func(*XsdGoPkgHasElem_FmProcessDiagram, bool) error
	XsdGoPkgHasElems_SystemUserGroup                       func(*XsdGoPkgHasElems_SystemUserGroup, bool) error
	TxsdMsrProcessingLog                                   func(*TxsdMsrProcessingLog, bool) error
	XsdGoPkgHasElems_FmResponsibleName                     func(*XsdGoPkgHasElems_FmResponsibleName, bool) error
	XsdGoPkgHasElem_ToolVersion                            func(*XsdGoPkgHasElem_ToolVersion, bool) error
	TxsdTeamMemberRef                                      func(*TxsdTeamMemberRef, bool) error
	XsdGoPkgHasElem_DocLabel                               func(*XsdGoPkgHasElem_DocLabel, bool) error
	TxsdFmErrorResponseRef                                 func(*TxsdFmErrorResponseRef, bool) error
	TxsdL1                                                 func(*TxsdL1, bool) error
	XsdGoPkgHasElems_FmActionType                          func(*XsdGoPkgHasElems_FmActionType, bool) error
	TxsdFmActions                                          func(*TxsdFmActions, bool) error
	XsdGoPkgHasElems_CoverSheetStyle                       func(*XsdGoPkgHasElems_CoverSheetStyle, bool) error
	XsdGoPkgHasElems_FmCharacteristics                     func(*XsdGoPkgHasElems_FmCharacteristics, bool) error
	TxsdFmAssessmentCatalog                                func(*TxsdFmAssessmentCatalog, bool) error
	XsdGoPkgHasElems_FmNetConnection                       func(*XsdGoPkgHasElems_FmNetConnection, bool) error
	TxsdFmStructureRef                                     func(*TxsdFmStructureRef, bool) error
	XsdGoPkgHasElems_Change                                func(*XsdGoPkgHasElems_Change, bool) error
	TxsdMap                                                func(*TxsdMap, bool) error
	XsdGoPkgHasElems_FmAssessmentCatalogs                  func(*XsdGoPkgHasElems_FmAssessmentCatalogs, bool) error
	XsdGoPkgHasElems_FmAssessmentSignificanceList          func(*XsdGoPkgHasElems_FmAssessmentSignificanceList, bool) error
	XsdGoPkgHasElem_LabeledList                            func(*XsdGoPkgHasElem_LabeledList, bool) error
	XsdGoPkgHasElem_Sup                                    func(*XsdGoPkgHasElem_Sup, bool) error
	XsdGoPkgHasElems_FmDrbfmModificationTypes              func(*XsdGoPkgHasElems_FmDrbfmModificationTypes, bool) error
	XsdGoPkgHasElems_MsrQueryP2                            func(*XsdGoPkgHasElems_MsrQueryP2, bool) error
	XsdGoPkgHasElems_FmActionTypeRef                       func(*XsdGoPkgHasElems_FmActionTypeRef, bool) error
	XsdGoPkgHasElems_FmSeFunctions                         func(*XsdGoPkgHasElems_FmSeFunctions, bool) error
	XsdGoPkgHasElem_FmUserdefinedAttributeRef              func(*XsdGoPkgHasElem_FmUserdefinedAttributeRef, bool) error
	XsdGoPkgHasElem_FmExternalActionsDetect                func(*XsdGoPkgHasElem_FmExternalActionsDetect, bool) error
	XsdGoPkgHasElem_Entry                                  func(*XsdGoPkgHasElem_Entry, bool) error
	XsdGoPkgHasElems_FmIdPrefix                            func(*XsdGoPkgHasElems_FmIdPrefix, bool) error
	TxsdFmAccessDef                                        func(*TxsdFmAccessDef, bool) error
	XsdGoPkgHasElem_CompanyDocInfo                         func(*XsdGoPkgHasElem_CompanyDocInfo, bool) error
	XsdGoPkgHasElem_CoverSheetStyle                        func(*XsdGoPkgHasElem_CoverSheetStyle, bool) error
	TxsdL3                                                 func(*TxsdL3, bool) error
	TxsdText                                               func(*TxsdText, bool) error
	TxsdFormula                                            func(*TxsdFormula, bool) error
	XsdGoPkgHasElem_SynCaption                             func(*XsdGoPkgHasElem_SynCaption, bool) error
	XsdGoPkgHasElems_EntityName                            func(*XsdGoPkgHasElems_EntityName, bool) error
	XsdGoPkgHasElems_LongName                              func(*XsdGoPkgHasElems_LongName, bool) error
	TxsdVerbatim                                           func(*TxsdVerbatim, bool) error
	TxsdFmFaultTypeRef                                     func(*TxsdFmFaultTypeRef, bool) error
	XsdGoPkgHasElem_FmSeDecomposition                      func(*XsdGoPkgHasElem_FmSeDecomposition, bool) error
	XsdGoPkgHasElem_FmActionTypeDecomposition              func(*XsdGoPkgHasElem_FmActionTypeDecomposition, bool) error
	XsdGoPkgHasElem_SynFormat                              func(*XsdGoPkgHasElem_SynFormat, bool) error
	XsdGoPkgHasElems_FmFtaNodes                            func(*XsdGoPkgHasElems_FmFtaNodes, bool) error
	TxsdFmPdTable                                          func(*TxsdFmPdTable, bool) error
	XsdGoPkgHasElem_FmAnalysisdesktopParameters            func(*XsdGoPkgHasElem_FmAnalysisdesktopParameters, bool) error
	XsdGoPkgHasElems_FmUserGroup                           func(*XsdGoPkgHasElems_FmUserGroup, bool) error
	XsdGoPkgHasElems_FmStructureElements                   func(*XsdGoPkgHasElems_FmStructureElements, bool) error
	TxsdFmFaultType                                        func(*TxsdFmFaultType, bool) error
	XsdGoPkgHasCdata                                       func(*XsdGoPkgHasCdata, bool) error
	TxsdPrivateCodes                                       func(*TxsdPrivateCodes, bool) error
	XsdGoPkgHasElems_FmStructure                           func(*XsdGoPkgHasElems_FmStructure, bool) error
	XsdGoPkgHasElem_FmFormSheetPresentation                func(*XsdGoPkgHasElem_FmFormSheetPresentation, bool) error
	XsdGoPkgHasElems_IssuedBy                              func(*XsdGoPkgHasElems_IssuedBy, bool) error
	XsdGoPkgHasElems_MiscValue                             func(*XsdGoPkgHasElems_MiscValue, bool) error
	TxsdStd                                                func(*TxsdStd, bool) error
	XsdGoPkgHasElems_Idc                                   func(*XsdGoPkgHasElems_Idc, bool) error
	XsdGoPkgHasElems_Colspec                               func(*XsdGoPkgHasElems_Colspec, bool) error
	XsdGoPkgHasElems_FmActions                             func(*XsdGoPkgHasElems_FmActions, bool) error
	TxsdFmUserGroupRef                                     func(*TxsdFmUserGroupRef, bool) error
	XsdGoPkgHasElem_FmAction                               func(*XsdGoPkgHasElem_FmAction, bool) error
	XsdGoPkgHasElem_FmPartListEntry                        func(*XsdGoPkgHasElem_FmPartListEntry, bool) error
	XsdGoPkgHasElems_FmCategoryRefs                        func(*XsdGoPkgHasElems_FmCategoryRefs, bool) error
	XsdGoPkgHasElems_FmDrbfmModifications                  func(*XsdGoPkgHasElems_FmDrbfmModifications, bool) error
	XsdGoPkgHasElem_Address                                func(*XsdGoPkgHasElem_Address, bool) error
	TxsdFmPdEntry                                          func(*TxsdFmPdEntry, bool) error
	XsdGoPkgHasElems_LabeledList                           func(*XsdGoPkgHasElems_LabeledList, bool) error
	TxsdFmFunctionTypeRef                                  func(*TxsdFmFunctionTypeRef, bool) error
}
